{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/nk/Documents/GitHub/etheos-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport http from \"http\";\nimport https from \"https\";\nimport { parse } from \"url\";\nimport { concat } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n\nfunction getResponse(request) {\n  return new Promise(function (resolve, reject) {\n    request.once(\"response\", function (resp) {\n      var response = {\n        statusCode: resp.statusCode,\n        statusMessage: resp.statusMessage,\n        headers: Object.keys(resp.headers).reduce(function (accum, name) {\n          var value = resp.headers[name];\n\n          if (Array.isArray(value)) {\n            value = value.join(\", \");\n          }\n\n          accum[name] = value;\n          return accum;\n        }, {}),\n        body: null\n      }; //resp.setEncoding(\"utf8\");\n\n      resp.on(\"data\", function (chunk) {\n        if (response.body == null) {\n          response.body = new Uint8Array(0);\n        }\n\n        response.body = concat([response.body, chunk]);\n      });\n      resp.on(\"end\", function () {\n        resolve(response);\n      });\n      resp.on(\"error\", function (error) {\n        /* istanbul ignore next */\n        error.response = response;\n        reject(error);\n      });\n    });\n    request.on(\"error\", function (error) {\n      reject(error);\n    });\n  });\n} // The URL.parse uses null instead of the empty string\n\n\nfunction nonnull(value) {\n  if (value == null) {\n    return \"\";\n  }\n\n  return value;\n}\n\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, request, req, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (options == null) {\n              options = {};\n            } // @TODO: Once we drop support for node 8, we can pass the href\n            //        firectly into request and skip adding the components\n            //        to this request object\n\n\n            url = parse(href);\n            request = {\n              protocol: nonnull(url.protocol),\n              hostname: nonnull(url.hostname),\n              port: nonnull(url.port),\n              path: nonnull(url.pathname) + nonnull(url.search),\n              method: options.method || \"GET\",\n              headers: options.headers || {}\n            };\n            req = null;\n            _context.t0 = nonnull(url.protocol);\n            _context.next = _context.t0 === \"http:\" ? 7 : _context.t0 === \"https:\" ? 9 : 11;\n            break;\n\n          case 7:\n            req = http.request(request);\n            return _context.abrupt(\"break\", 12);\n\n          case 9:\n            req = https.request(request);\n            return _context.abrupt(\"break\", 12);\n\n          case 11:\n            /* istanbul ignore next */\n            logger.throwError(\"unsupported protocol \".concat(url.protocol), Logger.errors.UNSUPPORTED_OPERATION, {\n              protocol: url.protocol,\n              operation: \"request\"\n            });\n\n          case 12:\n            if (options.body) {\n              req.write(Buffer.from(options.body));\n            }\n\n            req.end();\n            _context.next = 16;\n            return getResponse(req);\n\n          case 16:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}