{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\nimport * as reducers from './redux/reducers';\nimport { history, reactReduxContext } from './utils/history';\nimport App from './App';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { Web3Provider } from '@ethersproject/providers';\nconst {\n  NODE_ENV\n} = process.env;\nlet composeEnhancers;\nlet middleware;\n\nif (NODE_ENV === 'development') {\n  const loggerMiddleware = createLogger();\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  middleware = applyMiddleware(routerMiddleware(history), thunkMiddleware, loggerMiddleware);\n} else if (NODE_ENV === 'production') {\n  composeEnhancers = compose;\n  middleware = applyMiddleware(routerMiddleware(history), thunkMiddleware);\n}\n\nconst store = createStore(combineReducers({\n  router: connectRouter(history),\n  ...reducers\n}), composeEnhancers(middleware));\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  context: reactReduxContext\n}, /*#__PURE__*/React.createElement(Web3ReactProvider, {\n  getLibrary: getLibrary\n}, /*#__PURE__*/React.createElement(App, null))), document.getElementById('root'));","map":null,"metadata":{},"sourceType":"module"}