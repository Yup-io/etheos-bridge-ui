{"ast":null,"code":"'use strict';\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar assert = require('assert');\n\nvar _require = require('bytebuffer'),\n    Long = _require.Long;\n\nmodule.exports = {\n  ULong: ULong,\n  isName: isName,\n  encodeName: encodeName,\n  // encode human readable name to uint64 (number string)\n  decodeName: decodeName,\n  // decode from uint64 to human readable\n  encodeNameHex: function encodeNameHex(name) {\n    return Long.fromString(encodeName(name), true).toString(16);\n  },\n  decodeNameHex: function decodeNameHex(hex) {\n    var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return decodeName(Long.fromString(hex, true, 16).toString(), littleEndian);\n  },\n  DecimalString: DecimalString,\n  DecimalPad: DecimalPad,\n  DecimalImply: DecimalImply,\n  DecimalUnimply: DecimalUnimply,\n  printAsset: printAsset,\n  parseAsset: parseAsset\n  /** @private */\n\n};\n\nvar signed = function signed(fn) {\n  return function () {};\n};\n\nfunction ULong(value) {\n  var unsigned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var radix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n\n  if (typeof value === 'number') {\n    // Some JSON libs use numbers for values under 53 bits or strings for larger.\n    // Accomidate but double-check it..\n    if (value > Number.MAX_SAFE_INTEGER) throw new TypeError('value parameter overflow');\n    value = Long.fromString(String(value), unsigned, radix);\n  } else if (typeof value === 'string') {\n    value = Long.fromString(value, unsigned, radix);\n  } else if (!Long.isLong(value)) {\n    throw new TypeError('value parameter is a requied Long, Number or String');\n  }\n\n  return value;\n}\n\nfunction isName(str, err) {\n  try {\n    encodeName(str);\n    return true;\n  } catch (error) {\n    if (err) {\n      err(error);\n    }\n\n    return false;\n  }\n}\n\nvar charmap = '.12345abcdefghijklmnopqrstuvwxyz';\n\nvar charidx = function charidx(ch) {\n  var idx = charmap.indexOf(ch);\n  if (idx === -1) throw new TypeError('Invalid character: \\'' + ch + '\\'');\n  return idx;\n};\n/** Original Name encode and decode logic is in github.com/eosio/eos  native.hpp */\n\n/**\n  Encode a name (a base32 string) to a number.\n\n  For performance reasons, the blockchain uses the numerical encoding of strings\n  for very common types like account names.\n\n  @see types.hpp string_to_name\n\n  @arg {string} name - A string to encode, up to 12 characters long.\n  @arg {string} [littleEndian = true] - Little or Bigendian encoding\n\n  @return {string<uint64>} - compressed string (from name arg).  A string is\n    always used because a number could exceed JavaScript's 52 bit limit.\n*/\n\n\nfunction encodeName(name) {\n  var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (typeof name !== 'string') throw new TypeError('name parameter is a required string');\n  if (name.length > 12) throw new TypeError('A name can be up to 12 characters long');\n  var bitstr = '';\n\n  for (var i = 0; i <= 12; i++) {\n    // process all 64 bits (even if name is short)\n    var c = i < name.length ? charidx(name[i]) : 0;\n    var bitlen = i < 12 ? 5 : 4;\n    var bits = Number(c).toString(2);\n\n    if (bits.length > bitlen) {\n      throw new TypeError('Invalid name ' + name);\n    }\n\n    bits = '0'.repeat(bitlen - bits.length) + bits;\n    bitstr += bits;\n  }\n\n  var value = Long.fromString(bitstr, true, 2); // convert to LITTLE_ENDIAN\n\n  var leHex = '';\n  var bytes = littleEndian ? value.toBytesLE() : value.toBytesBE();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = bytes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var b = _step.value;\n      var n = Number(b).toString(16);\n      leHex += (n.length === 1 ? '0' : '') + n;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var ulName = Long.fromString(leHex, true, 16).toString(); // console.log('encodeName', name, value.toString(), ulName.toString(), JSON.stringify(bitstr.split(/(.....)/).slice(1)))\n\n  return ulName.toString();\n}\n/**\n  @arg {Long|String|number} value uint64\n  @arg {string} [littleEndian = true] - Little or Bigendian encoding\n\n  @return {string}\n*/\n\n\nfunction decodeName(value) {\n  var littleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  value = ULong(value); // convert from LITTLE_ENDIAN\n\n  var beHex = '';\n  var bytes = littleEndian ? value.toBytesLE() : value.toBytesBE();\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = bytes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var b = _step2.value;\n      var n = Number(b).toString(16);\n      beHex += (n.length === 1 ? '0' : '') + n;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  beHex += '0'.repeat(16 - beHex.length);\n  var fiveBits = Long.fromNumber(0x1f, true);\n  var fourBits = Long.fromNumber(0x0f, true);\n  var beValue = Long.fromString(beHex, true, 16);\n  var str = '';\n  var tmp = beValue;\n\n  for (var i = 0; i <= 12; i++) {\n    var c = charmap[tmp.and(i === 0 ? fourBits : fiveBits)];\n    str = c + str;\n    tmp = tmp.shiftRight(i === 0 ? 4 : 5);\n  }\n\n  str = str.replace(/\\.+$/, ''); // remove trailing dots (all of them)\n  // console.log('decodeName', str, beValue.toString(), value.toString(), JSON.stringify(beValue.toString(2).split(/(.....)/).slice(1)))\n\n  return str;\n}\n/**\n  Normalize and validate decimal string (potentially large values).  Should\n  avoid internationalization issues if possible but will be safe and\n  throw an error for an invalid number.\n\n  Normalization removes extra zeros or decimal.\n\n  @return {string} value\n*/\n\n\nfunction DecimalString(value) {\n  assert(value != null, 'value is required');\n  value = value === 'object' && value.toString ? value.toString() : String(value);\n  var neg = /^-/.test(value);\n\n  if (neg) {\n    value = value.substring(1);\n  }\n\n  if (value[0] === '.') {\n    value = '0' + value;\n  }\n\n  var part = value.split('.');\n  assert(part.length <= 2, 'invalid decimal ' + value);\n  assert(/^\\d+(,?\\d)*\\d*$/.test(part[0]), 'invalid decimal ' + value);\n\n  if (part.length === 2) {\n    assert(/^\\d*$/.test(part[1]), 'invalid decimal ' + value);\n    part[1] = part[1].replace(/0+$/, ''); // remove suffixing zeros\n\n    if (part[1] === '') {\n      part.pop();\n    }\n  }\n\n  part[0] = part[0].replace(/^0*/, ''); // remove leading zeros\n\n  if (part[0] === '') {\n    part[0] = '0';\n  }\n\n  return (neg ? '-' : '') + part.join('.');\n}\n/**\n  Ensure a fixed number of decimal places.  Safe for large numbers.\n\n  @see ./format.test.js\n\n  @example DecimalPad(10.2, 3) === '10.200'\n\n  @arg {number|string|object.toString} num\n  @arg {number} [precision = null] - number of decimal places.  Null skips\n    padding suffix but still applies number format normalization.\n  @return {string} decimal part is added and zero padded to match precision\n*/\n\n\nfunction DecimalPad(num, precision) {\n  var value = DecimalString(num);\n\n  if (precision == null) {\n    return value;\n  }\n\n  assert(precision >= 0 && precision <= 18, 'Precision should be 18 characters or less');\n  var part = value.split('.');\n\n  if (precision === 0 && part.length === 1) {\n    return part[0];\n  }\n\n  if (part.length === 1) {\n    return part[0] + '.' + '0'.repeat(precision);\n  } else {\n    var pad = precision - part[1].length;\n    assert(pad >= 0, 'decimal \\'' + value + '\\' exceeds precision ' + precision);\n    return part[0] + '.' + part[1] + '0'.repeat(pad);\n  }\n}\n/** Ensures proper trailing zeros then removes decimal place. */\n\n\nfunction DecimalImply(value, precision) {\n  return DecimalPad(value, precision).replace('.', '');\n}\n/**\n  Put the decimal place back in its position and return the normalized number\n  string (with any unnecessary zeros or an unnecessary decimal removed).\n\n  @arg {string|number|value.toString} value 10000\n  @arg {number} precision 4\n  @return {number} 1.0000\n*/\n\n\nfunction DecimalUnimply(value, precision) {\n  assert(value != null, 'value is required');\n  value = value === 'object' && value.toString ? value.toString() : String(value);\n  var neg = /^-/.test(value);\n\n  if (neg) {\n    value = value.substring(1);\n  }\n\n  assert(/^\\d+$/.test(value), 'invalid whole number ' + value);\n  assert(precision != null, 'precision required');\n  assert(precision >= 0 && precision <= 18, 'Precision should be 18 characters or less'); // Ensure minimum length\n\n  var pad = precision - value.length;\n\n  if (pad > 0) {\n    value = '' + '0'.repeat(pad) + value;\n  }\n\n  var dotIdx = value.length - precision;\n  value = value.slice(0, dotIdx) + '.' + value.slice(dotIdx);\n  return (neg ? '-' : '') + DecimalPad(value, precision); // Normalize\n}\n/** @private for now, support for asset strings is limited\n*/\n\n\nfunction printAsset(_ref) {\n  var amount = _ref.amount,\n      precision = _ref.precision,\n      symbol = _ref.symbol,\n      contract = _ref.contract;\n  assert.equal(typeof symbol === 'undefined' ? 'undefined' : (0, _typeof3.default)(symbol), 'string', 'symbol is a required string');\n\n  if (amount != null && precision != null) {\n    amount = DecimalPad(amount, precision);\n  }\n\n  var join = function join(e1, e2) {\n    return e1 == null ? '' : e2 == null ? '' : e1 + e2;\n  };\n\n  if (amount != null) {\n    // the amount contains the precision\n    return join(amount, ' ') + symbol + join('@', contract);\n  }\n\n  return join(precision, ',') + symbol + join('@', contract);\n}\n/**\n  Attempts to parse all forms of the asset strings (symbol, asset, or extended\n  versions).  If the provided string contains any additional or appears to have\n  invalid information an error is thrown.\n\n  @return {object} {amount, precision, symbol, contract}\n  @throws AssertionError\n*/\n\n\nfunction parseAsset(str) {\n  var _str$split = str.split(' '),\n      _str$split2 = (0, _slicedToArray3.default)(_str$split, 1),\n      amountRaw = _str$split2[0];\n\n  var amountMatch = amountRaw.match(/^(-?[0-9]+(\\.[0-9]+)?)( |$)/);\n  var amount = amountMatch ? amountMatch[1] : null;\n  var precisionMatch = str.match(/(^| )([0-9]+),([A-Z]+)(@|$)/);\n  var precisionSymbol = precisionMatch ? Number(precisionMatch[2]) : null;\n  var precisionAmount = amount ? (amount.split('.')[1] || '').length : null;\n  var precision = precisionSymbol != null ? precisionSymbol : precisionAmount;\n  var symbolMatch = str.match(/(^| |,)([A-Z]+)(@|$)/);\n  var symbol = symbolMatch ? symbolMatch[2] : null;\n\n  var _str$split3 = str.split('@'),\n      _str$split4 = (0, _slicedToArray3.default)(_str$split3, 2),\n      _str$split4$ = _str$split4[1],\n      contractRaw = _str$split4$ === undefined ? '' : _str$split4$;\n\n  var contract = /^[a-z0-5]+(\\.[a-z0-5]+)*$/.test(contractRaw) ? contractRaw : null;\n  var check = printAsset({\n    amount: amount,\n    precision: precision,\n    symbol: symbol,\n    contract: contract\n  });\n  assert.equal(str, check, 'Invalid asset string: ' + str + ' !== ' + check);\n\n  if (precision != null) {\n    assert(precision >= 0 && precision <= 18, 'Precision should be 18 characters or less');\n  }\n\n  if (symbol != null) {\n    assert(symbol.length <= 7, 'Asset symbol is 7 characters or less');\n  }\n\n  if (contract != null) {\n    assert(contract.length <= 12, 'Contract is 12 characters or less');\n  }\n\n  return {\n    amount: amount,\n    precision: precision,\n    symbol: symbol,\n    contract: contract\n  };\n}","map":null,"metadata":{},"sourceType":"script"}