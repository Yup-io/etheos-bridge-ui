{"ast":null,"code":"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport Web3 from 'web3';\nimport TransferABI from './abi/TransferABI.abi.json'; // import Alert from '@material-ui/lab/Alert'\n// import AlertTitle from '@material-ui/lab/AlertTitle'\n\nconst web3 = new Web3(new Web3(Web3.givenProvider));\nexport default function StakeButton({\n  classes,\n  account,\n  staked\n}) {\n  const [open, setOpen] = useState(false);\n  const [stakeValue, setStakeValue] = useState(0); // const [validEntry, setValidEntry] = useState(true)\n\n  const tokenAddress = '0xc2118d4d90b274016cB7a54c03EF52E6c537D957';\n  const toAddress = '0x1AFa7C0703bE5489087dd106dce466B795376Fa0';\n  const decimals = web3.utils.toBN(18);\n\n  const handleTextFieldChange = e => {\n    setStakeValue(e.target.value);\n  };\n\n  const stakeToken = () => {\n    try {\n      const transferAmount = web3.utils.toBN(stakeValue);\n      const contract = new web3.eth.Contract(TransferABI, tokenAddress);\n      const value = transferAmount.mul(web3.utils.toBN(10).pow(decimals));\n      contract.methods.transfer(toAddress, value).send({\n        from: account\n      }).on('transactionHash', function (hash) {\n        console.log(hash);\n      }); // setValidEntry(true)\n    } catch (e) {\n      // setValidEntry(false)\n      console.log('error with staking request: ', e);\n    }\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.stake,\n    style: {\n      backgroundColor: staked ? '#333333' : '#03B991',\n      border: staked ? 'solid 6px #2C2C2C' : ''\n    },\n    onClick: handleClickOpen\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.stakeText\n  }, \"Stake\")), /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    PaperProps: {\n      style: {\n        backgroundColor: '#1A1A1A',\n        color: '#F7F7F7'\n      }\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, \"Stake YUPETH LP\"), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(DialogContentText, {\n    color: \"#F7F7F7\"\n  }, \"Enter the amount you would like to stake\"), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"none\",\n    onChange: handleTextFieldChange,\n    type: \"email\",\n    fullWidth: true,\n    InputProps: {\n      style: {\n        border: '1px solid #04C399',\n        borderBottomColor: '#04C399',\n        borderColor: '#04C399',\n        color: '#F7F7F7',\n        '&:hover': {\n          boxShadow: '#04C399',\n          borderBottomColor: '#04C399',\n          border: '1px solid red'\n        }\n      }\n    }\n  }), /*#__PURE__*/React.createElement(DialogContentText, {\n    color: \"#F7F7F7\"\n  }, \"Staking fee estimate: 0.025 ETH\")), /*#__PURE__*/React.createElement(DialogActions, {\n    style: {\n      padding: '15px'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    variant: \"outlined\",\n    style: {\n      backgroundColor: '#F7F7F7'\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      stakeToken();\n      handleClose();\n    },\n    fullWidth: true,\n    variant: \"outlined\",\n    style: {\n      backgroundColor: '#04C399'\n    }\n  }, \"Stake\")))));\n}\nStakeButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n  account: PropTypes.object,\n  staked: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}