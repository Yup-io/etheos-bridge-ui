{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/nk/Documents/GitHub/etheos-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nk/Documents/GitHub/etheos-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/nk/Documents/GitHub/etheos-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/nk/Documents/GitHub/etheos-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nk/Documents/GitHub/etheos-bridge-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport var AlchemyProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(AlchemyProvider, _UrlJsonRpcProvider);\n\n  var _super = _createSuper(AlchemyProvider);\n\n  function AlchemyProvider() {\n    _classCallCheck(this, AlchemyProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AlchemyProvider, null, [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      var provider = new AlchemyProvider(network, apiKey);\n      var url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n      return new WebSocketProvider(url, provider.network);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      if (apiKey == null) {\n        return defaultApiKey;\n      }\n\n      if (apiKey && typeof apiKey !== \"string\") {\n        logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n      }\n\n      return apiKey;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network.name) {\n        case \"homestead\":\n          host = \"eth-mainnet.alchemyapi.io/v2/\";\n          break;\n\n        case \"ropsten\":\n          host = \"eth-ropsten.alchemyapi.io/v2/\";\n          break;\n\n        case \"rinkeby\":\n          host = \"eth-rinkeby.alchemyapi.io/v2/\";\n          break;\n\n        case \"goerli\":\n          host = \"eth-goerli.alchemyapi.io/v2/\";\n          break;\n\n        case \"kovan\":\n          host = \"eth-kovan.alchemyapi.io/v2/\";\n          break;\n\n        default:\n          logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n      }\n\n      return {\n        url: \"https:/\" + \"/\" + host + apiKey,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey === defaultApiKey) {\n            showThrottleMessage();\n          }\n\n          return Promise.resolve(true);\n        }\n      };\n    }\n  }]);\n\n  return AlchemyProvider;\n}(UrlJsonRpcProvider);","map":null,"metadata":{},"sourceType":"module"}