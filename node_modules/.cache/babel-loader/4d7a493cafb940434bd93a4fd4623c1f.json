{"ast":null,"code":"import wallet from '../scatter/scatter.wallet';\nimport axios from 'axios';\nimport { Api, JsonRpc } from 'eosjs2';\nimport { JsSignatureProvider } from 'eosjs2/dist/eosjs-jssig';\nimport fetch from 'node-fetch';\nimport crypto from 'crypto';\nconst {\n  EOS_API,\n  EOS_CHAINID\n} = process.env;\nconst signatureProvider = new JsSignatureProvider([]);\nconst rpc = new JsonRpc(EOS_API, {\n  fetch\n});\nconst api = new Api({\n  rpc,\n  signatureProvider\n});\nexport async function pushTransaction(txData) {\n  console.log(txData);\n\n  if (wallet.scatter.isExtension) {\n    console.log('EOS: ', wallet.eos);\n    const {\n      transaction: signedTx\n    } = await wallet.eos.transaction(txData, {\n      blocksBehind: 3,\n      expireSeconds: 60,\n      broadcast: false\n    });\n    console.log(signedTx);\n    const {\n      transaction,\n      signatures\n    } = signedTx;\n    console.log('TX: ', transaction);\n    const serializedTx = api.serializeTransaction(transaction);\n    console.log('TX: ', serializedTx);\n    const signBuf = Buffer.concat([Buffer.from(EOS_CHAINID, 'hex'), Buffer.from(serializedTx), Buffer.from(new Uint8Array(32))]);\n    console.log('BUF: ', signBuf);\n    const signedDataHash = crypto.createHash('sha256').update(signBuf).digest('hex');\n    const backend = 'http://localhost:4001';\n    const txStatus = (await axios.post(`${backend}/transaction`, {\n      transaction,\n      signature: signatures[0],\n      signedDataHash\n    })).data;\n    return txStatus;\n  } else {\n    return wallet.eos.transact(txData, {\n      blocksBehind: 3,\n      expireSeconds: 30\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}