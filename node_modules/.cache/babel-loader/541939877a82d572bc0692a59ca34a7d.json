{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport axios from 'axios';\nimport ScatterJS, { Network } from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\nimport { mainnet, testnet } from './scatter.config';\nimport { JsonRpc } from 'eosjs2';\nconst {\n  BACKEND_API\n} = process.env;\nconst networkConfig = NODE_ENV === 'production' ? mainnet : testnet; // const networkConfig = testnet\n\nconst network = Network.fromJson(networkConfig);\nconst rpc = new JsonRpc(network.fullhost());\n\nlet ScatterWallet = /*#__PURE__*/function () {\n  function ScatterWallet() {\n    _classCallCheck(this, ScatterWallet);\n\n    this.scatter = null;\n    this.identity = null;\n    this.connected = false;\n    this.eos = null;\n    this.rpc = rpc;\n  }\n\n  _createClass(ScatterWallet, [{\n    key: \"detect\",\n    value: async function detect(updateScatter, scatterInstall) {\n      try {\n        const connected = await ScatterJS.scatter.connect('YupApp');\n\n        if (!connected) {\n          return;\n        }\n\n        this.connected = connected;\n        this.scatter = ScatterJS.scatter;\n        window.scatter = null;\n        ScatterJS.plugins(new ScatterEOS());\n\n        if (this.identity == null) {\n          const identity = await this.scatter.getIdentity({\n            accounts: [networkConfig]\n          });\n\n          if (identity.length === 0) {\n            throw Error('No Yup identities found');\n          }\n\n          this.identity = {\n            name: identity.accounts[0].name,\n            authority: identity.accounts[0].authority\n          };\n          window.analytics.identify({\n            userId: this.identity.name\n          }); // Add new account to backend if it doesn't exist\n\n          try {\n            await axios.get(`${BACKEND_API}/accounts/${this.identity.name}`);\n          } catch (e) {\n            if (e.response.data.statusCode === 404) {\n              axios.post(`${BACKEND_API}/accounts/${this.identity.name}`);\n            }\n          }\n\n          if (this.scatter && this.scatter.isExtension) {\n            this.eos = this.scatter.eos(networkConfig, Eos, {});\n            updateScatter(this.scatter, this.identity);\n            scatterInstall(true);\n          }\n        }\n      } catch (err) {\n        console.error('SCATTER ERROR: ', err);\n      }\n    }\n  }]);\n\n  return ScatterWallet;\n}();\n\nconst wallet = new ScatterWallet();\nexport default wallet;","map":null,"metadata":{},"sourceType":"module"}