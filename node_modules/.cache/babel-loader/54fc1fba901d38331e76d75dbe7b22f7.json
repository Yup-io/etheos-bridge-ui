{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'; // import numeral from 'numeral'\n\nimport { ERC20Balance } from '../ERC20Balance/ERC20Balance';\nimport { useWeb3React } from '@web3-react/core';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nconst BACKEND_API = process.env.BACKEND_API;\n\nconst styles = theme => ({\n  container: {\n    backgroundColor: '#2C2C2C',\n    height: '50px',\n    width: '570px',\n    margin: 'auto',\n    borderBottomLeftRadius: '5px',\n    borderBottomRightRadius: '5px',\n    display: 'flex',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    fontFamily: 'VT323',\n    fontSize: '1.2rem',\n    boxShadow: '0px -20px #2c2c2c',\n    [theme.breakpoints.down('xs')]: {\n      width: '100%',\n      fontSize: '1rem'\n    }\n  },\n  metrics: {\n    fontSize: '1.7rem',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '1.2rem'\n    }\n  },\n  number: {\n    color: '#C4C4C4',\n    textTransform: 'uppercase'\n  }\n});\n\nconst MetricsBar = props => {\n  const {\n    classes,\n    scatter,\n    scatterAccount\n  } = props;\n  const {\n    account,\n    library,\n    chainId,\n    active\n  } = useWeb3React();\n  const [yupBal, setYupBal] = useState(0);\n  const [yupInf, setYupInf] = useState(0);\n\n  const fetchYupData = () => {\n    if (scatterAccount) {\n      const req = `${BACKEND_API}/levels/user/${scatterAccount.name}`;\n      axios.get(req).then(res => {\n        setYupBal(res.data.balance.YUPX);\n        setYupInf(res.data.weight);\n      }).catch(err => {\n        console.error(err, 'ERROR FETCHING YUP BALANCE');\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchYupData();\n  }, [scatter, scatterAccount]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container\n  }, active && /*#__PURE__*/React.createElement(ERC20Balance, {\n    chainId: chainId,\n    account: account,\n    active: active,\n    library: library,\n    classes: classes\n  }), !active && scatterAccount && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.number\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.metrics\n  }, yupBal), \" Yup\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.number\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.metrics\n  }, \"1231.223\"), \" Staked\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.number\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.metrics\n  }, yupInf), \" Influence\"));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const scatter = state.scatterRequest;\n  const scatterAccount = state.scatterRequest.scatterAccount;\n  return {\n    scatter,\n    scatterAccount\n  };\n};\n\nMetricsBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  scatter: PropTypes.object,\n  scatterAccount: PropTypes.object\n};\nexport default connect(mapStateToProps)(withStyles(styles)(MetricsBar));","map":null,"metadata":{},"sourceType":"module"}