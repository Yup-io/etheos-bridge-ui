{"ast":null,"code":"import React, { useState } from 'react';\nimport { withStyles, MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { Grid, MenuItem, FormHelperText, Snackbar } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Footer from '../Footer/Footer';\nimport { connect } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport Web3 from 'web3';\nimport TransferABI from './abi/TransferABI.abi.json';\nimport Alert from '@material-ui/lab/Alert';\nimport numeral from 'numeral';\nconst web3 = new Web3(new Web3(Web3.givenProvider));\nconst TOKEN_ADDRESS = '0xc2118d4d90b274016cB7a54c03EF52E6c537D957';\nconst TO_ADDRESS = '0xf8b41A391782Be39b7A8c36aA775c675A8368f53';\nconst BRIDGE_FEE = 0.05;\n\nconst styles = theme => ({\n  container: {\n    width: '100%',\n    padding: '0px',\n    background: '#3A3A3A',\n    fontFamily: 'Rubik',\n    [theme.breakpoints.down('sm')]: {\n      height: '100%'\n    }\n  },\n  bridgeContainer: {\n    width: '35%',\n    maxWidth: '550px',\n    background: '#434343',\n    margin: 'auto',\n    borderRadius: '20px',\n    padding: '0px 0px 25px 0px',\n    [theme.breakpoints.down('md')]: {\n      width: '60%'\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n      minHeight: '50vh'\n    }\n  },\n  grid: {\n    paddingLeft: theme.spacing(5),\n    paddingRight: theme.spacing(5),\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(2),\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(3)\n    },\n    maxWidth: '100%'\n  },\n  textItem: {\n    width: '75px'\n  },\n  text: {\n    width: '75px',\n    fontSize: '1.5rem',\n    color: '#fff',\n    fontWeight: '100',\n    fontFamily: 'Rubik'\n  },\n  textField: {\n    fontSize: '1.2rem',\n    fontFamily: 'Rubik',\n    [theme.breakpoints.down('lg')]: {},\n    [theme.breakpoints.down('sm')]: {},\n    [theme.breakpoints.down('xs')]: {}\n  },\n  formControl: {\n    minWidth: 100,\n    marginRight: '10px',\n    [theme.breakpoints.down('xs')]: {\n      minWidth: 20\n    }\n  },\n  menu: {\n    fontFamily: 'Rubik !important'\n  },\n  memoItem: {\n    margin: 'auto'\n  },\n  acctField: {\n    width: '20vw',\n    fontFamily: 'Rubik',\n    [theme.breakpoints.down('md')]: {\n      width: '40vw'\n    },\n    [theme.breakpoints.down('xs')]: {\n      width: '80vw'\n    }\n  },\n  feeGrid: {\n    margin: 'auto',\n    paddingLeft: theme.spacing(5),\n    paddingRight: theme.spacing(5),\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    [theme.breakpoints.down('xs')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1)\n    }\n  },\n  feeText: {\n    fontSize: '1.1rem',\n    color: '#C4C4C4',\n    fontWeight: '100',\n    fontFamily: 'Rubik, sans-serif'\n  },\n  sendBtn: {\n    backgroundColor: '#04C399',\n    width: '90%',\n    height: '60px',\n    fontSize: '1.2rem',\n    color: '#fff',\n    display: 'flex',\n    borderRadius: '15px',\n    margin: '7% auto auto auto',\n    boxShadow: '0 0 20px #A3A3A355',\n    '&:hover': {\n      backgroundColor: '#04C399',\n      opacity: '0.8',\n      boxShadow: '0 0 20px #A3A3A380'\n    },\n    [theme.breakpoints.down('md')]: {\n      margin: '10% auto auto auto',\n      bottom: '10px'\n    }\n  }\n});\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#fff'\n    },\n    secondary: {\n      main: '#fff'\n    },\n    third: {\n      main: '#00eab7'\n    }\n  },\n  overrides: {\n    container: {\n      fontFamily: 'Rubik, sans-serif'\n    }\n  }\n});\n\nconst YupBridge = props => {\n  const {\n    classes,\n    scatter,\n    scatterAccount\n  } = props;\n  console.log('SCATTER: ', scatter, scatterAccount);\n  const {\n    account\n  } = useWeb3React();\n  const [token, setToken] = useState('YUP');\n  const [chain, setChain] = useState('ETH');\n  const [sendValue, setSendValue] = useState(0.0);\n  const [memo, setMemo] = useState('');\n  const [error, setError] = useState({\n    severity: null,\n    msg: '',\n    snackbar: false\n  });\n  const [transactFee, setTransactFee] = useState(0.0);\n  const [bridgeFee, setBridgeFee] = useState(0.0);\n\n  const handleBalanceChange = e => {\n    setSendValue(e.target.value);\n    const transact = e.target.value ? parseFloat(e.target.value) : 0.0;\n    setTransactFee(transact);\n    setBridgeFee(parseFloat(numeral(e.target.value * BRIDGE_FEE).format('0,0.00')));\n    console.log('BALANCE: ' + sendValue);\n  };\n\n  const handleAcctChange = e => {\n    setMemo(e.target.value);\n    console.log('SEND TO: ' + memo);\n  };\n\n  const handleTokenChange = e => {\n    setToken(e.target.value);\n  };\n\n  const handleChainChange = e => {\n    setChain(e.target.value);\n  };\n\n  const sendToken = () => {\n    try {\n      const totalFee = parseInt(numeral(transactFee + bridgeFee).format('0,0.00'));\n      const transferAmount = web3.utils.toBN(totalFee);\n      const contract = new web3.eth.Contract(TransferABI, TOKEN_ADDRESS);\n      const decimals = web3.utils.toBN(18);\n      const value = transferAmount.mul(web3.utils.toBN(10).pow(decimals));\n      contract.methods.transfer(TO_ADDRESS, value).send({\n        from: account\n      }).on('error', () => {\n        setError({\n          severity: 'error',\n          msg: 'There was an error with your transaction. Please try again.',\n          snackbar: true\n        });\n      }).then(() => setError({\n        severity: 'success',\n        msg: `You have successfully transfered ${sendValue} ${token}.`,\n        snackbar: true\n      }));\n    } catch (e) {\n      setError({\n        severity: 'error',\n        msg: 'There was an error with your transaction. Please try again.',\n        snackbar: true\n      });\n    }\n  };\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === 'clickaway') return;\n    setError({\n      snackbar: false\n    });\n  };\n\n  const fetchTotalFee = () => {\n    const fee = transactFee + bridgeFee;\n    const parseFee = parseFloat(numeral(fee).format('0,0.00'));\n    return parseFee;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Snackbar, {\n    open: error.snackbar,\n    autoHideDuration: 3000,\n    onClose: handleSnackbarClose,\n    message: error.msg\n  }, /*#__PURE__*/React.createElement(Alert, {\n    severity: error.severity,\n    onClose: handleSnackbarClose,\n    variant: \"filled\",\n    style: {\n      fontSize: 14,\n      textTransform: 'none',\n      maxWidth: 400\n    }\n  }, error.msg)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bridgeContainer\n  }, /*#__PURE__*/React.createElement(MuiThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.grid,\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    direction: \"row\",\n    spacing: 1\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    sm: 2,\n    className: classes.textItem,\n    style: {\n      marginBottom: '15px'\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.text\n  }, \"Send\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    sm: 2\n  }, /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"none\",\n    onChange: handleBalanceChange,\n    type: \"text\",\n    placeholder: \"0.00\",\n    InputProps: {\n      className: classes.textField\n    },\n    style: {}\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    style: {\n      opacity: '0.7',\n      color: '#C4C4C4'\n    }\n  }, \"Balance:\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    sm: 4,\n    className: classes.gridItem\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: classes.textField,\n    inputProps: {\n      className: classes.textField\n    },\n    style: {\n      textTransform: 'uppercase'\n    },\n    MenuProps: {\n      getContentAnchorEl: null,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      }\n    },\n    value: token,\n    onChange: handleTokenChange,\n    margin: \"none\",\n    size: \"medium\"\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"YUP\"\n  }, \"YUP\"), /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"YUPETH LP\"\n  }, \"YUP/ETH LP\")), /*#__PURE__*/React.createElement(FormHelperText, {\n    style: {\n      opacity: '0.7',\n      color: '#C4C4C4'\n    }\n  }, \"Token\")))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.grid,\n    alignItems: \"center\",\n    direction: \"row\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    sm: 2,\n    className: classes.textItem\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.text\n  }, \"to\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    sm: 2\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: classes.textField,\n    inputProps: {\n      className: classes.textField\n    },\n    MenuProps: {\n      getContentAnchorEl: null,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      }\n    },\n    value: chain,\n    onChange: handleChainChange,\n    margin: \"none\",\n    size: \"medium\"\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"ETH\"\n  }, \"Ethereum\"), /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"EOS\"\n  }, \"EOS\"))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.memoItem\n  }, /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"none\",\n    onChange: handleAcctChange,\n    type: \"text\",\n    fullWidth: true,\n    InputProps: {\n      className: classes.acctField\n    },\n    placeholder: \"Address\"\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.feeGrid,\n    alignItems: \"center\",\n    direction: \"row\",\n    style: {\n      marginTop: '50px',\n      fontFamily: 'Rubik'\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText\n  }, \"Transaction Fee\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      textAlign: 'right'\n    }\n  }, transactFee, \" \", token))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.feeGrid,\n    alignItems: \"center\",\n    direction: \"row\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText\n  }, \"Bridge Fee (\", BRIDGE_FEE * 100, \"%)\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      textAlign: 'right'\n    }\n  }, bridgeFee, \" \", token))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.feeGrid,\n    alignItems: \"center\",\n    direction: \"row\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      color: '#fff'\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", null, \"Total\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      color: '#fff',\n      textAlign: 'right'\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", null, fetchTotalFee(), \" \", token))))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (isNaN(sendValue)) {\n        setError({\n          severity: 'warning',\n          msg: 'Please enter a valid staking amount.',\n          snackbar: true\n        });\n      } else {\n        sendToken();\n      }\n    },\n    className: classes.sendBtn\n  }, \"Send\"))), /*#__PURE__*/React.createElement(Footer, null));\n};\n\nYupBridge.propTypes = {\n  classes: PropTypes.object.isRequired,\n  scatter: PropTypes.object,\n  scatterAccount: PropTypes.object\n};\n\nconst mapStateToProps = ({\n  scatterRequest\n}) => {\n  return { ...scatterRequest\n  };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(YupBridge));","map":null,"metadata":{},"sourceType":"module"}