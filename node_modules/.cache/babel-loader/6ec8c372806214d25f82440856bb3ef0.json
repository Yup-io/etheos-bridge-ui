{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/darrenw/Desktop/Yup/Yup-Racing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/darrenw/Desktop/Yup/Yup-Racing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/darrenw/Desktop/Yup/Yup-Racing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/darrenw/Desktop/Yup/Yup-Racing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/darrenw/Desktop/Yup/Yup-Racing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/darrenw/Desktop/Yup/Yup-Racing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport net from \"net\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nexport var IpcProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(IpcProvider, _JsonRpcProvider);\n\n  var _super = _createSuper(IpcProvider);\n\n  function IpcProvider(path, network) {\n    var _this;\n\n    _classCallCheck(this, IpcProvider);\n\n    logger.checkNew(this instanceof IpcProvider ? this.constructor : void 0, IpcProvider);\n\n    if (path == null) {\n      logger.throwError(\"missing path\", Logger.errors.MISSING_ARGUMENT, {\n        arg: \"path\"\n      });\n    }\n\n    _this = _super.call(this, \"ipc://\" + path, network);\n    defineReadOnly(_assertThisInitialized(_this), \"path\", path);\n    return _this;\n  } // @TODO: Create a connection to the IPC path and use filters instead of polling for block\n\n\n  _createClass(IpcProvider, [{\n    key: \"send\",\n    value: function send(method, params) {\n      var _this2 = this;\n\n      // This method is very simple right now. We create a new socket\n      // connection each time, which may be slower, but the main\n      // advantage we are aiming for now is security. This simplifies\n      // multiplexing requests (since we do not need to multiplex).\n      var payload = JSON.stringify({\n        method: method,\n        params: params,\n        id: 42,\n        jsonrpc: \"2.0\"\n      });\n      return new Promise(function (resolve, reject) {\n        var response = Buffer.alloc(0);\n        var stream = net.connect(_this2.path);\n        stream.on(\"data\", function (data) {\n          response = Buffer.concat([response, data]);\n        });\n        stream.on(\"end\", function () {\n          try {\n            resolve(JSON.parse(response.toString()).result); // @TODO: Better pull apart the error\n\n            stream.destroy();\n          } catch (error) {\n            reject(error);\n            stream.destroy();\n          }\n        });\n        stream.on(\"error\", function (error) {\n          reject(error);\n          stream.destroy();\n        });\n        stream.write(payload);\n        stream.end();\n      });\n    }\n  }]);\n\n  return IpcProvider;\n}(JsonRpcProvider);","map":null,"metadata":{},"sourceType":"module"}