{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar ByteBuffer = require('bytebuffer');\n\nvar Struct = require('./struct');\n\nmodule.exports = {\n  create: create,\n  toBuffer: toBuffer,\n  fromBuffer: fromBuffer\n  /**\n    @summary Create a serializer for each definition.\n    @return {CreateStruct}\n  */\n\n};\n\nfunction create(definitions, types) {\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : types.config;\n  var errors = [];\n\n  if (!config.sort) {\n    config.sort = {};\n  } // Basic structure validation\n\n\n  for (var key in definitions) {\n    var value = definitions[key];\n    var base = value.base,\n        fields = value.fields;\n    var typeOfValue = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n    if (typeOfValue === 'object') {\n      if (!base && !fields) {\n        errors.push('Expecting ' + key + '.fields or ' + key + '.base');\n        continue;\n      }\n\n      if (base && typeof base !== 'string') {\n        errors.push('Expecting string ' + key + '.base');\n      }\n\n      if (fields) {\n        if ((typeof fields === 'undefined' ? 'undefined' : _typeof(fields)) !== 'object') {\n          errors.push('Expecting object ' + key + '.fields');\n        } else {\n          for (var field in fields) {\n            if (typeof fields[field] !== 'string') {\n              errors.push('Expecting string in ' + key + '.fields.' + field);\n            }\n          }\n        }\n      }\n    } else if (typeOfValue !== 'string') {\n      errors.push('Expecting object or string under ' + key + ', instead got ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));\n      continue;\n    }\n  } // Keys with objects are structs\n\n\n  var structs = {};\n\n  for (var _key in definitions) {\n    var _value = definitions[_key];\n\n    if ((typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === 'object') {\n      structs[_key] = Struct(_key, config);\n    }\n  } // Resolve user-friendly typedef names pointing to a native type (or another typedef)\n\n\n  for (var _key2 in definitions) {\n    var _value2 = definitions[_key2];\n\n    if (typeof _value2 === 'string') {\n      var type = types[_value2];\n\n      if (type) {\n        types[_key2] = type;\n      } else {\n        // example: key === 'fields' && value === field[]\n        var struct = getTypeOrStruct(_key2, _value2); // type = vector(field)\n\n        if (struct) {\n          structs[_key2] = struct;\n        } else {\n          errors.push('Unrecognized type or struct ' + _key2 + '.' + _value2);\n        }\n      }\n    }\n  } // Structs can inherit another struct, they will share the same instance\n\n\n  for (var _key3 in definitions) {\n    var thisStruct = structs[_key3];\n    if (!thisStruct) continue;\n    var _value3 = definitions[_key3];\n\n    if ((typeof _value3 === 'undefined' ? 'undefined' : _typeof(_value3)) === 'object' && _value3.base) {\n      var base = _value3.base;\n      var baseStruct = structs[base];\n\n      if (!baseStruct) {\n        errors.push('Missing ' + base + ' in ' + _key3 + '.base');\n        continue;\n      }\n\n      thisStruct.add('', structPtr(baseStruct));\n    }\n  } // Create types from a string (ex vector[Type])\n\n\n  function getTypeOrStruct(key, Type, typeArgs, fieldName) {\n    var typeatty = parseType(Type);\n    if (!typeatty) return null;\n    var name = typeatty.name,\n        annotation = typeatty.annotation,\n        arrayType = typeatty.arrayType;\n    var ret = void 0;\n\n    if (annotation) {\n      // any_type<field_name, type_name>\n      var _type = types[name];\n\n      if (_type == null) {\n        errors.push('Missing ' + name + ' in ' + Type);\n        return null;\n      }\n\n      var annTypes = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = annotation[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var annTypeName = _step.value;\n          var annType = getTypeOrStruct(key, annTypeName, null, fieldName);\n\n          if (!annType) {\n            errors.push('Missing ' + annTypeName + ' in ' + Type);\n            return null;\n          }\n\n          annTypes.push(annType);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      ret = _type(annTypes);\n    } else if (arrayType == null) {\n      // AnyType\n      var fieldStruct = structs[name];\n\n      if (fieldStruct) {\n        return fieldStruct;\n      }\n\n      var _type2 = types[name];\n\n      if (!_type2) {\n        return null;\n      } // types need to be instantiated\n\n\n      ret = _type2(typeArgs);\n    } else if (arrayType === '') {\n      // AnyType[]\n      var nameType = getTypeOrStruct(key, typeatty.name, null, fieldName);\n\n      if (!nameType) {\n        return null;\n      }\n\n      var sort = config.sort[key + '.' + fieldName] || false; // console.log('sort?', `${key}.${fieldName}`, sort, config.sort)\n\n      ret = types.vector(nameType, sort);\n    } else if (arrayType.length > 0) {\n      // vector[Type]\n      var arrayTs = getTypeOrStruct(key, typeatty.arrayType, null, fieldName);\n\n      if (!arrayTs) {\n        errors.push('Missing ' + typeatty.arrayType + ' in ' + Type);\n        return null;\n      }\n\n      var baseTs = getTypeOrStruct(key, typeatty.name, arrayTs, fieldName);\n\n      if (!baseTs) {\n        errors.push('Missing ' + typeatty.name + ' in ' + Type);\n        return null;\n      }\n\n      ret = baseTs;\n    }\n\n    return typeatty.optional ? types.optional(ret) : ret;\n  } // Add all the fields.  Thanks to structPtr no need to look at base types.\n\n\n  for (var _key4 in definitions) {\n    var _thisStruct = structs[_key4];\n    if (!_thisStruct) continue;\n    var _value4 = definitions[_key4];\n    if (!_value4.fields) continue;\n    var fields = _value4.fields;\n\n    for (var Field in fields) {\n      var Type = fields[Field];\n      var ts = getTypeOrStruct(_key4, Type, null, Field);\n\n      if (!ts) {\n        errors.push('Missing ' + Type + ' in ' + _key4 + '.fields.' + Field);\n        continue;\n      }\n\n      _thisStruct.add(Field, ts);\n    }\n  }\n\n  if (errors.length) {\n    // 'structs' could contain invalid references\n    return {\n      errors: errors\n    };\n  }\n\n  return {\n    errors: errors,\n    structs: structs\n  };\n}\n\nvar parseType = function parseType(name) {\n  if (!name || typeof name !== 'string') {\n    return null;\n  }\n\n  name = name.trim();\n  var annotationMatch = name.match(/<(.*)>/);\n\n  if (annotationMatch) {\n    var annotation = annotationMatch ? annotationMatch[1].replace(/ /g, '').split(',') : null;\n    name = name.replace(annotationMatch[0], '').trim();\n    return {\n      name: name,\n      annotation: annotation\n    };\n  }\n\n  var arrayMatch = name.match(/\\[(.*)\\]/);\n  var arrayType = arrayMatch ? arrayMatch[1].trim() : null;\n\n  if (arrayMatch) {\n    name = name.replace(arrayMatch[0], '').trim();\n  }\n\n  var optional = false;\n\n  if (/\\?$/.test(name)) {\n    name = name.substring(0, name.length - 1);\n    optional = true;\n  }\n\n  return {\n    name: name,\n    arrayType: arrayType,\n    optional: optional\n  };\n};\n/**\n  Base types all point to the same struct.\n\n  Note, appendByteBuffer has no return type.\n*/\n\n\nvar structPtr = function structPtr(type) {\n  return {\n    fromByteBuffer: function fromByteBuffer(b) {\n      return type.fromByteBuffer(b);\n    },\n    appendByteBuffer: function appendByteBuffer(b, value) {\n      type.appendByteBuffer(b, value);\n    },\n    fromObject: function fromObject(value) {\n      return type.fromObject(value);\n    },\n    toObject: function toObject(value) {\n      return type.toObject(value);\n    }\n  };\n};\n\nfunction toBuffer(type, value) {\n  var struct = type.fromObject(value);\n  return Buffer.from(toByteBuffer(type, struct).toBinary(), 'binary');\n}\n\nfunction fromBuffer(type, buffer) {\n  var toObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var b = ByteBuffer.fromBinary(buffer.toString('binary'), ByteBuffer.LITTLE_ENDIAN);\n  var struct = type.fromByteBuffer(b);\n  return toObject ? type.toObject(struct) : struct;\n}\n\nfunction toByteBuffer(type, value) {\n  var b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);\n  type.appendByteBuffer(b, value);\n  return b.copy(0, b.offset);\n}","map":null,"metadata":{},"sourceType":"script"}