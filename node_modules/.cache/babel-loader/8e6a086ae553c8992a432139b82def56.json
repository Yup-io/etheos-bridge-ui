{"ast":null,"code":"import { accountConstants as constants } from '../constants';\nimport produce from 'immer';\nexport function currencyBalance(state = {}, action) {\n  return produce(state, draft => {\n    switch (action.type) {\n      case constants.FETCH_CURRENCY_BALANCE:\n        draft[action.username] = { ...draft[action.username]\n        };\n        draft[action.username][action.currency] = {\n          isLoading: true,\n          balance: null,\n          error: null\n        };\n        break;\n\n      case constants.FETCH_CURRENCY_BALANCE_SUCCESS:\n        draft[action.username][action.currency] = {\n          isLoading: false,\n          balance: action.balance,\n          error: null\n        };\n        break;\n\n      case constants.FETCH_CURRENCY_BALANCE_FAILURE:\n        draft[action.username][action.currency] = {\n          isLoading: false,\n          balance: null,\n          error: action.error\n        };\n        break;\n\n      case constants.DEDUCT_BALANCE:\n        const curr = draft[action.username] && draft[action.username][action.currency];\n        draft[action.username] = { ...draft[action.username],\n          [action.currency]: {\n            isLoading: null,\n            balance: curr && curr.balance ? curr.balance - action.amount : null,\n            error: null\n          }\n        };\n        break;\n\n      default:\n        return state;\n    }\n  });\n}\nexport function resourceUsage(state = {}, action) {\n  return produce(state, draft => {\n    switch (action.type) {\n      case constants.FETCH_RESOURCE_USAGE:\n        draft[action.username] = {\n          isLoading: true,\n          error: null,\n          resourceInfo: null\n        };\n        break;\n\n      case constants.FETCH_RESOURCE_USAGE_SUCCESS:\n        draft[action.username] = {\n          isLoading: false,\n          error: null,\n          resourceInfo: action.resourceInfo\n        };\n        break;\n\n      case constants.FETCH_RESOURCE_USAGE_FAILURE:\n        draft[action.username] = {\n          isLoading: false,\n          error: action.error,\n          resourceInfo: null\n        };\n        break;\n\n      default:\n        return state;\n    }\n  });\n}\nexport function socialLevels(state = {\n  isLoading: true,\n  levels: {}\n}, action) {\n  return produce(state, draft => {\n    switch (action.type) {\n      case constants.FETCH_SOCIAL_LEVEL:\n        draft.levels[action.username] = {\n          isLoading: true,\n          error: null,\n          levelInfo: null\n        };\n        break;\n\n      case constants.FETCH_SOCIAL_LEVEL_SUCCESS:\n        draft.levels[action.username] = {\n          isLoading: false,\n          error: null,\n          levelInfo: action.levelInfo\n        };\n        break;\n\n      case constants.FETCH_SOCIAL_LEVEL_FAILURE:\n        draft.levels[action.username] = {\n          isLoading: false,\n          error: action.error,\n          levelInfo: null\n        };\n        break;\n\n      case constants.FETCH_ALL_SOCIAL_LEVELS:\n        draft.isLoading = true;\n        draft.levels = {};\n        break;\n\n      case constants.FETCH_ALL_SOCIAL_LEVELS_SUCCESS:\n        draft.isLoading = false;\n\n        for (let level of action.levelsInfo) {\n          draft.levels[level._id] = {\n            isLoading: false,\n            error: null,\n            levelInfo: level\n          };\n        }\n\n        break;\n\n      case constants.FETCH_ALL_SOCIAL_LEVELS_FAILURE:\n        draft.isLoading = false;\n        draft.error = action.error;\n        break;\n\n      case constants.UPDATE_WEIGHT:\n        const levelInfo = draft.levels[action.username].levelInfo;\n        const upvotes = action.upvotes ? levelInfo.upvotes + action.upvotes : levelInfo.upvotes;\n        const downvotes = action.downvotes ? levelInfo.downvotes + action.downvotes : levelInfo.downvotes;\n        const balance = action.balance ? Number(levelInfo.balance.YUPX) + Number(action.balance) : levelInfo.balance.YUPX;\n        levelInfo.weight = balance * Math.sqrt((upvotes + 1) / (downvotes + 1));\n        levelInfo.upvotes = upvotes;\n        levelInfo.downvotes = downvotes;\n        break;\n\n      case constants.UPDATE_ACCOUNT_INFO:\n        draft.levels[action.username].isLoading = true;\n        break;\n\n      case constants.UPDATE_ACCOUNT_INFO_SUCCESS:\n        const level = draft.levels[action.username];\n        level.levelInfo = { ...level.levelInfo,\n          bio: action.update.bio,\n          fullname: action.update.fullname,\n          avatar: action.update.avatar\n        };\n        break;\n\n      case constants.UPDATE_ACCOUNT_INFO_FAILURE:\n        draft.levels[action.username].error = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}