{"ast":null,"code":"\"use strict\";\n/**\n * @module Numeric\n */\n// copyright defined in eosjs/LICENSE.txt\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ripemd160 = require('./ripemd').RIPEMD160.hash;\n\nvar base58Chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nvar base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfunction create_base58_map() {\n  var base58M = Array(256).fill(-1);\n\n  for (var i = 0; i < base58Chars.length; ++i) {\n    base58M[base58Chars.charCodeAt(i)] = i;\n  }\n\n  return base58M;\n}\n\nvar base58Map = create_base58_map();\n\nfunction create_base64_map() {\n  var base64M = Array(256).fill(-1);\n\n  for (var i = 0; i < base64Chars.length; ++i) {\n    base64M[base64Chars.charCodeAt(i)] = i;\n  }\n\n  base64M['='.charCodeAt(0)] = 0;\n  return base64M;\n}\n\nvar base64Map = create_base64_map();\n/** Is `bignum` a negative number? */\n\nfunction isNegative(bignum) {\n  return (bignum[bignum.length - 1] & 0x80) !== 0;\n}\n\nexports.isNegative = isNegative;\n/** Negate `bignum` */\n\nfunction negate(bignum) {\n  var carry = 1;\n\n  for (var i = 0; i < bignum.length; ++i) {\n    var x = (~bignum[i] & 0xff) + carry;\n    bignum[i] = x;\n    carry = x >> 8;\n  }\n}\n\nexports.negate = negate;\n/**\n * Convert an unsigned decimal number in `s` to a bignum\n * @param size bignum size (bytes)\n */\n\nfunction decimalToBinary(size, s) {\n  var result = new Uint8Array(size);\n\n  for (var i = 0; i < s.length; ++i) {\n    var srcDigit = s.charCodeAt(i);\n\n    if (srcDigit < '0'.charCodeAt(0) || srcDigit > '9'.charCodeAt(0)) {\n      throw new Error('invalid number');\n    }\n\n    var carry = srcDigit - '0'.charCodeAt(0);\n\n    for (var j = 0; j < size; ++j) {\n      var x = result[j] * 10 + carry;\n      result[j] = x;\n      carry = x >> 8;\n    }\n\n    if (carry) {\n      throw new Error('number is out of range');\n    }\n  }\n\n  return result;\n}\n\nexports.decimalToBinary = decimalToBinary;\n/**\n * Convert a signed decimal number in `s` to a bignum\n * @param size bignum size (bytes)\n */\n\nfunction signedDecimalToBinary(size, s) {\n  var negative = s[0] === '-';\n\n  if (negative) {\n    s = s.substr(1);\n  }\n\n  var result = decimalToBinary(size, s);\n\n  if (negative) {\n    negate(result);\n\n    if (!isNegative(result)) {\n      throw new Error('number is out of range');\n    }\n  } else if (isNegative(result)) {\n    throw new Error('number is out of range');\n  }\n\n  return result;\n}\n\nexports.signedDecimalToBinary = signedDecimalToBinary;\n/**\n * Convert `bignum` to an unsigned decimal number\n * @param minDigits 0-pad result to this many digits\n */\n\nfunction binaryToDecimal(bignum, minDigits) {\n  if (minDigits === void 0) {\n    minDigits = 1;\n  }\n\n  var result = Array(minDigits).fill('0'.charCodeAt(0));\n\n  for (var i = bignum.length - 1; i >= 0; --i) {\n    var carry = bignum[i];\n\n    for (var j = 0; j < result.length; ++j) {\n      var x = (result[j] - '0'.charCodeAt(0) << 8) + carry;\n      result[j] = '0'.charCodeAt(0) + x % 10;\n      carry = x / 10 | 0;\n    }\n\n    while (carry) {\n      result.push('0'.charCodeAt(0) + carry % 10);\n      carry = carry / 10 | 0;\n    }\n  }\n\n  result.reverse();\n  return String.fromCharCode.apply(String, __spread(result));\n}\n\nexports.binaryToDecimal = binaryToDecimal;\n/**\n * Convert `bignum` to a signed decimal number\n * @param minDigits 0-pad result to this many digits\n */\n\nfunction signedBinaryToDecimal(bignum, minDigits) {\n  if (minDigits === void 0) {\n    minDigits = 1;\n  }\n\n  if (isNegative(bignum)) {\n    var x = bignum.slice();\n    negate(x);\n    return '-' + binaryToDecimal(x, minDigits);\n  }\n\n  return binaryToDecimal(bignum, minDigits);\n}\n\nexports.signedBinaryToDecimal = signedBinaryToDecimal;\n/**\n * Convert an unsigned base-58 number in `s` to a bignum\n * @param size bignum size (bytes)\n */\n\nfunction base58ToBinary(size, s) {\n  var result = new Uint8Array(size);\n\n  for (var i = 0; i < s.length; ++i) {\n    var carry = base58Map[s.charCodeAt(i)];\n\n    if (carry < 0) {\n      throw new Error('invalid base-58 value');\n    }\n\n    for (var j = 0; j < size; ++j) {\n      var x = result[j] * 58 + carry;\n      result[j] = x;\n      carry = x >> 8;\n    }\n\n    if (carry) {\n      throw new Error('base-58 value is out of range');\n    }\n  }\n\n  result.reverse();\n  return result;\n}\n\nexports.base58ToBinary = base58ToBinary;\n/**\n * Convert `bignum` to a base-58 number\n * @param minDigits 0-pad result to this many digits\n */\n\nfunction binaryToBase58(bignum, minDigits) {\n  if (minDigits === void 0) {\n    minDigits = 1;\n  }\n\n  var e_1, _a, e_2, _b;\n\n  var result = [];\n\n  try {\n    for (var bignum_1 = __values(bignum), bignum_1_1 = bignum_1.next(); !bignum_1_1.done; bignum_1_1 = bignum_1.next()) {\n      var byte = bignum_1_1.value;\n      var carry = byte;\n\n      for (var j = 0; j < result.length; ++j) {\n        var x = (base58Map[result[j]] << 8) + carry;\n        result[j] = base58Chars.charCodeAt(x % 58);\n        carry = x / 58 | 0;\n      }\n\n      while (carry) {\n        result.push(base58Chars.charCodeAt(carry % 58));\n        carry = carry / 58 | 0;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (bignum_1_1 && !bignum_1_1.done && (_a = bignum_1.return)) _a.call(bignum_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  try {\n    for (var bignum_2 = __values(bignum), bignum_2_1 = bignum_2.next(); !bignum_2_1.done; bignum_2_1 = bignum_2.next()) {\n      var byte = bignum_2_1.value;\n\n      if (byte) {\n        break;\n      } else {\n        result.push('1'.charCodeAt(0));\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (bignum_2_1 && !bignum_2_1.done && (_b = bignum_2.return)) _b.call(bignum_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  result.reverse();\n  return String.fromCharCode.apply(String, __spread(result));\n}\n\nexports.binaryToBase58 = binaryToBase58;\n/** Convert an unsigned base-64 number in `s` to a bignum */\n\nfunction base64ToBinary(s) {\n  var len = s.length;\n\n  if ((len & 3) === 1 && s[len - 1] === '=') {\n    len -= 1;\n  } // fc appends an extra '='\n\n\n  if ((len & 3) !== 0) {\n    throw new Error('base-64 value is not padded correctly');\n  }\n\n  var groups = len >> 2;\n  var bytes = groups * 3;\n\n  if (len > 0 && s[len - 1] === '=') {\n    if (s[len - 2] === '=') {\n      bytes -= 2;\n    } else {\n      bytes -= 1;\n    }\n  }\n\n  var result = new Uint8Array(bytes);\n\n  for (var group = 0; group < groups; ++group) {\n    var digit0 = base64Map[s.charCodeAt(group * 4 + 0)];\n    var digit1 = base64Map[s.charCodeAt(group * 4 + 1)];\n    var digit2 = base64Map[s.charCodeAt(group * 4 + 2)];\n    var digit3 = base64Map[s.charCodeAt(group * 4 + 3)];\n    result[group * 3 + 0] = digit0 << 2 | digit1 >> 4;\n\n    if (group * 3 + 1 < bytes) {\n      result[group * 3 + 1] = (digit1 & 15) << 4 | digit2 >> 2;\n    }\n\n    if (group * 3 + 2 < bytes) {\n      result[group * 3 + 2] = (digit2 & 3) << 6 | digit3;\n    }\n  }\n\n  return result;\n}\n\nexports.base64ToBinary = base64ToBinary;\n/** Key types this library supports */\n\nvar KeyType;\n\n(function (KeyType) {\n  KeyType[KeyType[\"k1\"] = 0] = \"k1\";\n  KeyType[KeyType[\"r1\"] = 1] = \"r1\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\n/** Public key data size, excluding type field */\n\n\nexports.publicKeyDataSize = 33;\n/** Private key data size, excluding type field */\n\nexports.privateKeyDataSize = 32;\n/** Signature data size, excluding type field */\n\nexports.signatureDataSize = 65;\n\nfunction digestSuffixRipemd160(data, suffix) {\n  var d = new Uint8Array(data.length + suffix.length);\n\n  for (var i = 0; i < data.length; ++i) {\n    d[i] = data[i];\n  }\n\n  for (var i = 0; i < suffix.length; ++i) {\n    d[data.length + i] = suffix.charCodeAt(i);\n  }\n\n  return ripemd160(d);\n}\n\nfunction stringToKey(s, type, size, suffix) {\n  var whole = base58ToBinary(size + 4, s);\n  var result = {\n    type: type,\n    data: new Uint8Array(whole.buffer, 0, size)\n  };\n  var digest = new Uint8Array(digestSuffixRipemd160(result.data, suffix));\n\n  if (digest[0] !== whole[size + 0] || digest[1] !== whole[size + 1] || digest[2] !== whole[size + 2] || digest[3] !== whole[size + 3]) {\n    throw new Error('checksum doesn\\'t match');\n  }\n\n  return result;\n}\n\nfunction keyToString(key, suffix, prefix) {\n  var digest = new Uint8Array(digestSuffixRipemd160(key.data, suffix));\n  var whole = new Uint8Array(key.data.length + 4);\n\n  for (var i = 0; i < key.data.length; ++i) {\n    whole[i] = key.data[i];\n  }\n\n  for (var i = 0; i < 4; ++i) {\n    whole[i + key.data.length] = digest[i];\n  }\n\n  return prefix + binaryToBase58(whole);\n}\n/** Convert key in `s` to binary form */\n\n\nfunction stringToPublicKey(s) {\n  if (typeof s !== 'string') {\n    throw new Error('expected string containing public key');\n  }\n\n  if (s.substr(0, 3) === 'EOS') {\n    var whole = base58ToBinary(exports.publicKeyDataSize + 4, s.substr(3));\n    var key = {\n      type: KeyType.k1,\n      data: new Uint8Array(exports.publicKeyDataSize)\n    };\n\n    for (var i = 0; i < exports.publicKeyDataSize; ++i) {\n      key.data[i] = whole[i];\n    }\n\n    var digest = new Uint8Array(ripemd160(key.data));\n\n    if (digest[0] !== whole[exports.publicKeyDataSize] || digest[1] !== whole[34] || digest[2] !== whole[35] || digest[3] !== whole[36]) {\n      throw new Error('checksum doesn\\'t match');\n    }\n\n    return key;\n  } else if (s.substr(0, 7) === 'PUB_K1_') {\n    return stringToKey(s.substr(7), KeyType.k1, exports.publicKeyDataSize, 'K1');\n  } else if (s.substr(0, 7) === 'PUB_R1_') {\n    return stringToKey(s.substr(7), KeyType.r1, exports.publicKeyDataSize, 'R1');\n  } else {\n    throw new Error('unrecognized public key format');\n  }\n}\n\nexports.stringToPublicKey = stringToPublicKey;\n/** Convert `key` to string (base-58) form */\n\nfunction publicKeyToString(key) {\n  if (key.type === KeyType.k1 && key.data.length === exports.publicKeyDataSize) {\n    return keyToString(key, 'K1', 'PUB_K1_');\n  } else if (key.type === KeyType.r1 && key.data.length === exports.publicKeyDataSize) {\n    return keyToString(key, 'R1', 'PUB_R1_');\n  } else {\n    throw new Error('unrecognized public key format');\n  }\n}\n\nexports.publicKeyToString = publicKeyToString;\n/** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).\n * Leaves other formats untouched\n */\n\nfunction convertLegacyPublicKey(s) {\n  if (s.substr(0, 3) === 'EOS') {\n    return publicKeyToString(stringToPublicKey(s));\n  }\n\n  return s;\n}\n\nexports.convertLegacyPublicKey = convertLegacyPublicKey;\n/** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).\n * Leaves other formats untouched\n */\n\nfunction convertLegacyPublicKeys(keys) {\n  return keys.map(convertLegacyPublicKey);\n}\n\nexports.convertLegacyPublicKeys = convertLegacyPublicKeys;\n/** Convert key in `s` to binary form */\n\nfunction stringToPrivateKey(s) {\n  if (typeof s !== 'string') {\n    throw new Error('expected string containing private key');\n  }\n\n  if (s.substr(0, 7) === 'PVT_R1_') {\n    return stringToKey(s.substr(7), KeyType.r1, exports.privateKeyDataSize, 'R1');\n  } else {\n    throw new Error('unrecognized private key format');\n  }\n}\n\nexports.stringToPrivateKey = stringToPrivateKey;\n/** Convert `key` to string (base-58) form */\n\nfunction privateKeyToString(key) {\n  if (key.type === KeyType.r1) {\n    return keyToString(key, 'R1', 'PVT_R1_');\n  } else {\n    throw new Error('unrecognized private key format');\n  }\n}\n\nexports.privateKeyToString = privateKeyToString;\n/** Convert key in `s` to binary form */\n\nfunction stringToSignature(s) {\n  if (typeof s !== 'string') {\n    throw new Error('expected string containing signature');\n  }\n\n  if (s.substr(0, 7) === 'SIG_K1_') {\n    return stringToKey(s.substr(7), KeyType.k1, exports.signatureDataSize, 'K1');\n  } else if (s.substr(0, 7) === 'SIG_R1_') {\n    return stringToKey(s.substr(7), KeyType.r1, exports.signatureDataSize, 'R1');\n  } else {\n    throw new Error('unrecognized signature format');\n  }\n}\n\nexports.stringToSignature = stringToSignature;\n/** Convert `signature` to string (base-58) form */\n\nfunction signatureToString(signature) {\n  if (signature.type === KeyType.k1) {\n    return keyToString(signature, 'K1', 'SIG_K1_');\n  } else if (signature.type === KeyType.r1) {\n    return keyToString(signature, 'R1', 'SIG_R1_');\n  } else {\n    throw new Error('unrecognized signature format');\n  }\n}\n\nexports.signatureToString = signatureToString;","map":null,"metadata":{},"sourceType":"script"}