{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport useSWR from 'swr';\nimport { formatUnits } from '@ethersproject/units';\nimport { Contract } from '@ethersproject/contracts';\nimport ERC20ABI from './abi/ERC20.abi.json';\nimport { TOKENS_BY_NETWORK } from '../../utils/networks';\nimport { getLibrary, fetcher } from './utils';\nimport CountUp from 'react-countup';\n/* eslint react/prop-types: 0 */\n\nexport const ERC20Balance = ({\n  chainId,\n  account,\n  active,\n  library,\n  classes\n}) => {\n  return /*#__PURE__*/React.createElement(Web3ReactProvider, {\n    getLibrary: getLibrary\n  }, active && /*#__PURE__*/React.createElement(React.Fragment, null, TOKENS_BY_NETWORK[chainId].map(token => /*#__PURE__*/React.createElement(TokenBalance, _extends({\n    account: account,\n    library: library,\n    classes: classes,\n    key: token.address\n  }, token)))));\n};\n\nconst TokenBalance = ({\n  symbol,\n  address,\n  decimals,\n  account,\n  library,\n  classes\n}) => {\n  const {\n    data: balance,\n    mutate\n  } = useSWR([address, 'balanceOf', account], {\n    fetcher: fetcher(library, ERC20ABI)\n  });\n  useEffect(() => {\n    // listen for changes on an Ethereum address\n    console.log(`listening for Transfer...`);\n    const contract = new Contract(address, ERC20ABI, library.getSigner());\n    const fromMe = contract.filters.Transfer(account, null);\n    library.on(fromMe, (from, to, amount, event) => {\n      mutate(undefined, true);\n    });\n    const toMe = contract.filters.Transfer(null, account);\n    library.on(toMe, (from, to, amount, event) => {\n      mutate(undefined, true);\n    }); // remove listener when the component is unmounted\n\n    return () => {\n      library.removeAllListeners(toMe);\n      library.removeAllListeners(fromMe);\n    }; // trigger the effect only on component mount\n  }, []);\n\n  if (!balance) {\n    return /*#__PURE__*/React.createElement(\"div\", null, \"...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.number\n  }, /*#__PURE__*/React.createElement(CountUp, {\n    className: classes.metrics,\n    decimals: 2,\n    start: 0,\n    end: parseFloat(formatUnits(balance, decimals))\n  }), \" \", symbol);\n};","map":null,"metadata":{},"sourceType":"module"}