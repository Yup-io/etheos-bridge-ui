{"ast":null,"code":"import hash from './libs/hash';\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache(initialData) {\n    if (initialData === void 0) {\n      initialData = {};\n    }\n\n    this.__cache = new Map(Object.entries(initialData));\n    this.__listeners = [];\n  }\n\n  Cache.prototype.get = function (key) {\n    var _key = this.serializeKey(key)[0];\n    return this.__cache.get(_key);\n  };\n\n  Cache.prototype.set = function (key, value) {\n    var _key = this.serializeKey(key)[0];\n\n    this.__cache.set(_key, value);\n\n    this.notify();\n  };\n\n  Cache.prototype.keys = function () {\n    return Array.from(this.__cache.keys());\n  };\n\n  Cache.prototype.has = function (key) {\n    var _key = this.serializeKey(key)[0];\n    return this.__cache.has(_key);\n  };\n\n  Cache.prototype.clear = function () {\n    this.__cache.clear();\n\n    this.notify();\n  };\n\n  Cache.prototype.delete = function (key) {\n    var _key = this.serializeKey(key)[0];\n\n    this.__cache.delete(_key);\n\n    this.notify();\n  }; // TODO: introduce namespace for the cache\n\n\n  Cache.prototype.serializeKey = function (key) {\n    var args = null;\n\n    if (typeof key === 'function') {\n      try {\n        key = key();\n      } catch (err) {\n        // dependencies not ready\n        key = '';\n      }\n    }\n\n    if (Array.isArray(key)) {\n      // args array\n      args = key;\n      key = hash(key);\n    } else {\n      // convert null to ''\n      key = String(key || '');\n    }\n\n    var errorKey = key ? 'err@' + key : '';\n    var isValidatingKey = key ? 'validating@' + key : '';\n    return [key, args, errorKey, isValidatingKey];\n  };\n\n  Cache.prototype.subscribe = function (listener) {\n    var _this = this;\n\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    var isSubscribed = true;\n\n    this.__listeners.push(listener);\n\n    return function () {\n      if (!isSubscribed) return;\n      isSubscribed = false;\n\n      var index = _this.__listeners.indexOf(listener);\n\n      if (index > -1) {\n        _this.__listeners[index] = _this.__listeners[_this.__listeners.length - 1];\n        _this.__listeners.length--;\n      }\n    };\n  }; // Notify Cache subscribers about a change in the cache\n\n\n  Cache.prototype.notify = function () {\n    for (var _i = 0, _a = this.__listeners; _i < _a.length; _i++) {\n      var listener = _a[_i];\n      listener();\n    }\n  };\n\n  return Cache;\n}();\n\nexport default Cache;","map":null,"metadata":{},"sourceType":"module"}