{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Tooltip, Button, Dialog, DialogTitle, DialogContent, DialogContentText, Typography, Grid } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEagerConnect, useInactiveListener } from '../../utils/hooks';\nimport { injected } from '../../utils/connectors.js';\nimport { connect } from 'react-redux';\nimport { loginScatter, logoutScatter, signalConnection } from '../../redux/actions/scatter.actions';\nimport scatterWallet from '../../eos/scatter/scatter.wallet';\n\nconst styles = theme => ({\n  connect: {\n    backgroundColor: '#505050',\n    color: '#FAFAFA',\n    borderRadius: '100px',\n    margin: '0px 10px 10px 10px',\n    padding: '8px 24px',\n    fontFamily: 'Rubik',\n    fontWeight: '400',\n    '&:hover': {\n      backgroundColor: '#505050',\n      boxShadow: '1px 1px 5px #00eab799, -1px -1px 5px #f890e7aa, inset -3px -3px 10px #6a6a6a33'\n    },\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '0.75rem'\n    }\n  },\n  dialog: {\n    width: '100%',\n    marginLeft: 0,\n    [theme.breakpoints.down('md')]: {\n      marginLeft: 0,\n      width: '100%'\n    },\n    [theme.breakpoints.up('md')]: {\n      marginLeft: 0,\n      width: `100%`\n    },\n    [theme.breakpoints.up('1600')]: {\n      width: '100%',\n      marginLeft: 0\n    }\n  },\n  dialogTitleText: {\n    fontFamily: 'Rubik',\n    fontWeight: '300',\n    color: '#ffffff',\n    fontSize: '24'\n  },\n  dialogContentText: {\n    fontFamily: 'Rubik',\n    fontWeight: '200',\n    color: '#ffffff',\n    marginTop: '20px'\n  },\n  primaryBtn: {\n    color: '#0a0a0a',\n    fontWeight: '500',\n    backgroundColor: '#00eab7',\n    '&:hover': {\n      backgroundColor: '#00bb92'\n    }\n  },\n  linkBtn: {\n    color: '#FFFFFF',\n    fontWeight: '100',\n    textTransform: 'capitalize',\n    textDecoration: 'underline'\n  },\n  desktopDialogContentText: {\n    display: 'inline',\n    [theme.breakpoints.down('600')]: {\n      display: 'none'\n    }\n  },\n  mobileDialogContentText: {\n    display: 'inline',\n    [theme.breakpoints.up('600')]: {\n      display: 'none'\n    }\n  },\n  blockButton: {\n    display: 'block',\n    backgroundColor: 'transparent',\n    color: '#ffffff',\n    borderColor: '#6a6a6a',\n    width: '100%',\n    height: '50px',\n    fontWeight: '200',\n    fontSize: '14px',\n    fontFamily: 'Rubik',\n    textAlign: 'start',\n    textTransform: 'none',\n    '&:hover': {\n      backgroundColor: '#FAFAFA66'\n    }\n  },\n  walletIcon: {\n    maxWidth: '6vw',\n    width: '22px',\n    float: 'right'\n  },\n  buttonIcon: {\n    maxWidth: '3vw',\n    width: '15px',\n    marginRight: '5px',\n    display: 'flex'\n  }\n});\n\nconst WalletLogin = props => {\n  const {\n    classes\n  } = props;\n  const {\n    connector,\n    account,\n    activate,\n    deactivate,\n    active\n  } = useWeb3React();\n  const {\n    scatter,\n    scatterAccount,\n    updateScatter,\n    scatterInstall,\n    disconnectScatter\n  } = props; // handle logic to recognize the connector currently being activated\n\n  const [activatingConnector, setActivatingConnector] = useState();\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]); // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n\n  useInactiveListener(!triedEager || activatingConnector);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const handleDialogOpen = () => {\n    setDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpen(false);\n  };\n\n  const checkScatter = () => {\n    (async () => {\n      if (scatter == null || scatterAccount == null) {\n        try {\n          await scatterWallet.detect(updateScatter, scatterInstall);\n        } catch (err) {\n          if (err.message === 'TWO_SCATTERS_INSTALLED') {\n            console.error('Both Scatter Desktop and Extension are installed. Close or uninstall one to continue');\n          }\n        }\n      } else {\n        disconnectScatter();\n      }\n    })();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, account && active && !scatter && /*#__PURE__*/React.createElement(Tooltip, {\n    placement: \"bottom\",\n    title: /*#__PURE__*/React.createElement(\"h2\", {\n      color: \"#fff\",\n      style: {\n        fontSize: '12px',\n        fontWeight: '500'\n      }\n    }, \"Disconnect Wallet\")\n  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    className: classes.connect,\n    onClick: () => {\n      deactivate();\n      handleDialogOpen();\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    justify: \"center\",\n    spacing: 0\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    style: {\n      marginBottom: '2px'\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.buttonIcon,\n    src: \"images/icons/metamask-fox.svg\"\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, account.substring(0, 8), \"...\"))))), scatter && scatter.identity && /*#__PURE__*/React.createElement(Tooltip, {\n    placement: \"bottom\",\n    title: /*#__PURE__*/React.createElement(\"h2\", {\n      color: \"#fff\",\n      style: {\n        fontSize: '12px',\n        fontWeight: '500'\n      }\n    }, \"Disconnect Wallet\")\n  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    className: classes.connect,\n    onClick: () => {\n      checkScatter();\n      handleDialogOpen();\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    direction: \"row\",\n    justify: \"center\",\n    spacing: 0\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    style: {\n      marginBottom: '2px'\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.buttonIcon,\n    src: \"images/logos/yuplogowhite.png\"\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, scatter.identity.name))))), !account && !active && !scatter && /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n    className: classes.connect,\n    onClick: handleDialogOpen\n  }, \"Connect Wallet\"), /*#__PURE__*/React.createElement(Dialog, {\n    open: dialogOpen,\n    onClose: handleDialogClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    className: classes.dialog,\n    PaperProps: {\n      style: {\n        backgroundColor: '#1a1a1a',\n        boxShadow: '2px 2px 100px #313131',\n        width: '80%',\n        marginTop: '-25vh',\n        maxWidth: '315px',\n        borderRadius: '12px'\n      }\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    className: classes.dialogTitle,\n    id: \"form-dialog-title\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"space-between\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"left\",\n    className: classes.dialogTitleText\n  }, \"Connect Wallet\")))), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"space-around\",\n    alignItems: \"stretch\",\n    spacing: 1\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: classes.blockButton,\n    variant: \"outlined\",\n    onClick: () => {\n      setActivatingConnector(injected);\n      activate(injected);\n      handleDialogClose();\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, \"MetaMask\"), /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.walletIcon,\n    src: \"images/icons/metamask-fox.svg\"\n  }))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: classes.blockButton,\n    variant: \"outlined\",\n    onClick: () => {\n      checkScatter();\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, \"Yup\"), /*#__PURE__*/React.createElement(Grid, {\n    item: true\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.walletIcon,\n    src: \"images/logos/yuplogowhite.png\"\n  })))))), /*#__PURE__*/React.createElement(DialogContentText, null)))));\n};\n\nWalletLogin.propTypes = {\n  classes: PropTypes.object.isRequired,\n  scatter: PropTypes.object,\n  scatterInstall: PropTypes.func,\n  updateScatter: PropTypes.func,\n  scatterAccount: PropTypes.object,\n  disconnectScatter: PropTypes.func\n};\n\nconst mapStateToProps = ({\n  scatterRequest\n}) => {\n  return { ...scatterRequest\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    scatterInstall: bool => dispatch(signalConnection(bool)),\n    updateScatter: (scatter, scatterAccount) => dispatch(loginScatter(scatter, scatterAccount)),\n    disconnectScatter: () => dispatch(logoutScatter())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(WalletLogin));","map":null,"metadata":{},"sourceType":"module"}