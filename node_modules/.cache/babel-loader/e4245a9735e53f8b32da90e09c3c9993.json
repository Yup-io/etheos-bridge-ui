{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { withStyles, MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { Grid, MenuItem, FormHelperText, Snackbar, Tooltip, DialogContent, DialogContentText, DialogTitle, Dialog } from '@material-ui/core';\nimport { nameToUint64 } from 'eosjs-account-name';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Footer from '../Footer/Footer';\nimport { connect } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport Web3 from 'web3';\nimport ERC20ABI from './abi/ERC20ABI.abi.json';\nimport BridgeABI from './abi/BridgeABI.abi.json';\nimport Alert from '@material-ui/lab/Alert';\nimport numeral from 'numeral';\nimport { transfer } from '../../eos/actions';\nimport axios from 'axios';\nconst web3 = new Web3(new Web3(Web3.givenProvider));\nconst {\n  ETH_TOKEN_CONTRACT,\n  BRIDGE_FEE,\n  BACKEND_API,\n  BRIDGE_CONTRACT,\n  YUPETH_BRIDGE_FEE,\n  LP_ETH_TOKEN_CONTRACT\n} = process.env;\nconst MINIMUM_BRIDGE = 0.00001;\n\nconst styles = theme => ({\n  container: {\n    width: '100%',\n    padding: '0px',\n    background: '#3A3A3A',\n    fontFamily: 'Rubik',\n    [theme.breakpoints.down('sm')]: {\n      height: '100%'\n    }\n  },\n  bridgeContainer: {\n    width: '35%',\n    maxWidth: '550px',\n    background: '#434343',\n    margin: 'auto',\n    borderRadius: '20px',\n    padding: '0px 0px 25px 0px',\n    [theme.breakpoints.down('md')]: {\n      width: '60%'\n    },\n    [theme.breakpoints.down('sm')]: {\n      width: '100%',\n      minHeight: '50vh'\n    }\n  },\n  grid: {\n    paddingLeft: theme.spacing(5),\n    paddingRight: theme.spacing(5),\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(2),\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(3)\n    },\n    maxWidth: '100%'\n  },\n  textItem: {\n    width: '75px'\n  },\n  text: {\n    width: '75px',\n    fontSize: '1.5rem',\n    color: '#fff',\n    fontWeight: '100',\n    fontFamily: 'Rubik'\n  },\n  textField: {\n    fontSize: '1.5rem',\n    lineHeight: '1.1875em',\n    fontFamily: 'Rubik',\n    [theme.breakpoints.down('lg')]: {},\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '1.2rem'\n    },\n    [theme.breakpoints.down('xs')]: {}\n  },\n  formControl: {\n    minWidth: 100,\n    marginRight: '0px',\n    [theme.breakpoints.down('xs')]: {\n      minWidth: 20\n    }\n  },\n  menu: {\n    fontFamily: 'Rubik !important'\n  },\n  memoItem: {\n    margin: 'auto',\n    padding: theme.spacing(4),\n    width: '100%'\n  },\n  acctField: {\n    fontFamily: 'Rubik',\n    borderRadius: '15px',\n    [theme.breakpoints.down('md')]: {},\n    [theme.breakpoints.down('xs')]: {}\n  },\n  feeGrid: {\n    margin: 'auto',\n    paddingLeft: theme.spacing(5),\n    paddingRight: theme.spacing(5),\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    [theme.breakpoints.down('xs')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1)\n    }\n  },\n  feeText: {\n    fontSize: '1.1rem',\n    color: '#C4C4C4',\n    fontWeight: '100',\n    fontFamily: 'Rubik, sans-serif',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '0.9rem'\n    }\n  },\n  sendBtn: {\n    backgroundColor: '#04C399',\n    width: '90%',\n    height: '60px',\n    fontSize: '1.2rem',\n    color: '#fff',\n    display: 'flex',\n    borderRadius: '15px',\n    margin: '7% auto auto auto',\n    boxShadow: '0 0 20px #A3A3A355',\n    '&:hover': {\n      backgroundColor: '#04C399',\n      opacity: '0.8',\n      boxShadow: '0 0 20px #A3A3A380'\n    },\n    [theme.breakpoints.down('md')]: {\n      margin: '10% auto auto auto',\n      bottom: '10px'\n    }\n  },\n  disclaimerText: {\n    color: '#C4C4C4',\n    fontWeight: '300'\n  }\n});\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#fff'\n    },\n    secondary: {\n      main: '#fff'\n    },\n    third: {\n      main: '#00eab7'\n    }\n  },\n  overrides: {\n    container: {\n      fontFamily: 'Rubik, sans-serif'\n    }\n  }\n});\n\nconst YupBridge = ({\n  classes,\n  scatter,\n  scatterAccount\n}) => {\n  const {\n    account\n  } = useWeb3React();\n  const [token, setToken] = useState('YUP');\n  const [chain, setChain] = useState(''); // const [ethAddress, setETHAddress] = useState('')\n\n  const [sendBal, setSendBal] = useState(0.0000);\n  const [accountBal, setAccountBal] = useState(0.000);\n  const [memo, setMemo] = useState('');\n  const [error, setError] = useState({\n    severity: 'warning',\n    msg: 'This is an experimental technology. Use with caution!',\n    snackbar: true\n  });\n  const [bridgeFee, setBridgeFee] = useState(0.0000);\n  const [total, setTotal] = useState(0.0000);\n  const [successDialogOpen, setSuccessDialogOpen] = useState(false);\n  useEffect(() => {\n    setChain(account ? 'EOS' : 'ETH');\n    console.log('account :>> ', account);\n    fetchAndSetBalance();\n  }, [account, scatter, token]);\n  useEffect(() => {\n    const bridgeFee = account ? 0.0000 : token === 'YUP' ? BRIDGE_FEE : YUPETH_BRIDGE_FEE;\n    setBridgeFee(bridgeFee);\n    const total = chain === account ? sendBal : sendBal + parseFloat(bridgeFee);\n    const parsedFeePlusSendBal = parseFloat(numeral(total).format('0,0.0000'));\n    setTotal(parsedFeePlusSendBal);\n  }, [token, sendBal, account, scatter]);\n\n  const handleBalanceChange = e => {\n    setSendBal(parseFloat(e.target.value));\n  };\n\n  const handleSuccessDialogClose = () => {\n    setSuccessDialogOpen(false);\n  };\n\n  const fetchAndSetBalance = async () => {\n    try {\n      if (scatterAccount) {\n        const {\n          data\n        } = await axios.get(`${BACKEND_API}/levels/user/${scatterAccount.name}`);\n        setAccountBal(data.balance[token]);\n      } else if (account) {\n        const tokenInstance = new web3.eth.Contract(ERC20ABI, token === 'YUP' ? ETH_TOKEN_CONTRACT : LP_ETH_TOKEN_CONTRACT);\n        const erc20TokenBalance = (await tokenInstance.methods.balanceOf(account).call()) * Math.pow(10, -18);\n        setAccountBal(erc20TokenBalance);\n      }\n    } catch (err) {\n      setAccountBal(0.00);\n    }\n  };\n\n  const handleAcctChange = e => {\n    setMemo(e.target.value);\n  };\n\n  const handleTokenChange = e => {\n    setToken(e.target.value);\n  };\n\n  const handleChainChange = e => {\n    setChain(e.target.value);\n  };\n\n  const sendToken = async () => {\n    let txRes;\n\n    if (sendBal > accountBal) {\n      setError({\n        severity: 'error',\n        msg: `Please enter a valid amount.`,\n        snackbar: true\n      });\n      return;\n    } // try {\n    // IF CONNECTED WITH METAMASK\n\n\n    if (account) {\n      const transferAmount = web3.utils.toWei(sendBal.toString());\n      console.log('transferAmount :>> ', transferAmount);\n      const yupETHTokenInstance = new web3.eth.Contract(ERC20ABI, ETH_TOKEN_CONTRACT);\n      const bridgeContractInstance = new web3.eth.Contract(BridgeABI, BRIDGE_CONTRACT);\n      const value = web3.utils.toBN(transferAmount);\n      console.log('value :>> ', value);\n      const memoUINT64 = nameToUint64(memo); // await yupETHTokenInstance.methods.approve(BRIDGE_CONTRACT, transferAmount).send({ from: account })\n      // await bridgeContractInstance.methods.sendToken(value, memoUINT64).send({ from: account })\n\n      console.log('bridgeContractInstance.methods.sendToken :>> ', bridgeContractInstance.methods.sendToken);\n      const batch = new web3.BatchRequest();\n      batch.add(yupETHTokenInstance.methods.approve(BRIDGE_CONTRACT, transferAmount).send({\n        from: account\n      }));\n      batch.add(bridgeContractInstance.methods.sendToken(value, memoUINT64).send({\n        from: account\n      }));\n      txRes = await batch.execute(); // IF CONNECTED WITH SCATTER\n    } else if (scatterAccount) {\n      const txData = {\n        amount: sendBal,\n        asset: token,\n        recipient: memo\n      };\n      txRes = await transfer(scatterAccount, txData);\n    }\n\n    txRes == null ? snackbarErrorMessage() : successDialog(); //   } catch (e) {\n    //     snackbarErrorMessage()\n    // }\n  };\n\n  const successDialog = () => {\n    setSuccessDialogOpen(true);\n    document.getElementById('send-bal-field').value = '';\n    document.getElementById('address-field').value = '';\n  };\n\n  const snackbarErrorMessage = () => {\n    setError({\n      severity: 'error',\n      msg: 'There was an error with your transaction. Please try again.',\n      snackbar: true\n    });\n  };\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === 'clickaway') return;\n    setError({\n      snackbar: false\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Snackbar, {\n    open: error.snackbar,\n    autoHideDuration: 4000,\n    onClose: handleSnackbarClose,\n    message: error.msg\n  }, /*#__PURE__*/React.createElement(Alert, {\n    severity: error.severity,\n    onClose: handleSnackbarClose,\n    variant: \"filled\",\n    style: {\n      fontSize: 14,\n      textTransform: 'none',\n      maxWidth: 400\n    }\n  }, error.msg)), /*#__PURE__*/React.createElement(Dialog, {\n    open: successDialogOpen,\n    onClose: handleSuccessDialogClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    PaperProps: {\n      style: {\n        backgroundColor: '#1A1A1A',\n        color: '#F7F7F7',\n        width: '400px',\n        fontFamily: 'Rubik, sans serif'\n      }\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, \"Success\"), /*#__PURE__*/React.createElement(DialogContent, null, /*#__PURE__*/React.createElement(DialogContentText, {\n    className: classes.disclaimerText\n  }, \"You have successfully transferred \", sendBal, \" \", token, \"!\"), /*#__PURE__*/React.createElement(DialogContentText, {\n    className: classes.disclaimerText\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    style: {\n      color: 'white'\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    style: {\n      color: 'white'\n    },\n    target: \"_blank\",\n    href: `https://etherscan.io/address/`\n  }, \"See Address on Etherscan \\u2197\\uFE0F\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bridgeContainer\n  }, /*#__PURE__*/React.createElement(MuiThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.grid,\n    alignItems: \"center\",\n    justifycontent: \"flex-start\",\n    direction: \"row\",\n    spacing: 1\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    sm: 2,\n    className: classes.textItem,\n    style: {\n      marginBottom: '20px',\n      [theme.breakpoints.down('sm')]: {\n        height: '100%'\n      }\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.text\n  }, \"Send\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    sm: 3\n  }, /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    id: \"send-bal-field\",\n    margin: \"none\",\n    onChange: handleBalanceChange,\n    type: \"text\",\n    placeholder: \"0.00\",\n    InputProps: {\n      className: classes.textField\n    },\n    style: {}\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    style: {\n      opacity: '0.7',\n      color: '#C4C4C4'\n    }\n  }, \"Balance: \", numeral(accountBal).format('0,0.00'), \" \")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    sm: 3\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl\n  }, /*#__PURE__*/React.createElement(Select, {\n    inputProps: {\n      className: classes.textField\n    },\n    MenuProps: {\n      getContentAnchorEl: null,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      }\n    },\n    value: token,\n    onChange: handleTokenChange,\n    margin: \"none\",\n    size: \"medium\"\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"YUP\"\n  }, \"YUP\"), /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"YUPETH\"\n  }, \"YUP-ETH LP\")), /*#__PURE__*/React.createElement(FormHelperText, {\n    style: {\n      opacity: '0.7',\n      color: '#C4C4C4'\n    }\n  }, \"Token\")))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.grid,\n    alignItems: \"center\",\n    direction: \"row\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    sm: 2,\n    className: classes.textItem\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.text\n  }, \"to\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    sm: 2\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: classes.textField,\n    inputProps: {\n      className: classes.textField\n    },\n    MenuProps: {\n      getContentAnchorEl: null,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      }\n    },\n    value: chain,\n    onChange: handleChainChange,\n    margin: \"none\",\n    size: \"medium\",\n    style: {\n      paddingTop: '2px'\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"ETH\",\n    style: {\n      pointerEvents: account ? 'none' : ''\n    }\n  }, \"Ethereum\"), /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.menu,\n    value: \"EOS\",\n    style: {\n      pointerEvents: scatterAccount ? 'none' : ''\n    }\n  }, \"EOS\"))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    classes: {\n      root: classes.memoItem\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    id: \"address-field\",\n    margin: \"none\",\n    variant: \"outlined\",\n    onChange: handleAcctChange,\n    type: \"text\",\n    fullWidth: true,\n    InputProps: {\n      className: classes.acctField\n    },\n    placeholder: \"Address\"\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.feeGrid,\n    alignItems: \"center\",\n    direction: \"row\",\n    style: {\n      display: account ? 'none' : ''\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText\n  }, \"Bridge Fee\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      textAlign: 'right'\n    }\n  }, bridgeFee, \" \", token))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.feeGrid,\n    alignItems: \"center\",\n    direction: \"row\"\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      color: '#fff'\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", null, \"Total\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      color: '#fff',\n      textAlign: 'right'\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", null, total, \" \", token)))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.feeGrid,\n    alignItems: \"center\",\n    direction: \"row\",\n    style: {\n      opacity: '0.3'\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    placement: \"bottom-start\",\n    title: \"In order to ensure stability of the bridge, there needs to be a minimum set for bridging\"\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText\n  }, \"Minimum to bridge\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.feeText,\n    style: {\n      textAlign: 'right'\n    }\n  }, MINIMUM_BRIDGE, \" \", token)))), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      pointerEvents: sendBal >= MINIMUM_BRIDGE ? 'all' : 'none'\n    },\n    onClick: () => {\n      if (isNaN(sendBal)) {\n        setError({\n          severity: 'warning',\n          msg: 'Please enter a valid staking amount.',\n          snackbar: true\n        });\n      } else {\n        sendToken();\n      }\n    },\n    className: classes.sendBtn\n  }, \"Send\"))), /*#__PURE__*/React.createElement(Footer, null));\n};\n\nYupBridge.propTypes = {\n  classes: PropTypes.object.isRequired,\n  scatter: PropTypes.object,\n  scatterAccount: PropTypes.object\n};\n\nconst mapStateToProps = ({\n  scatterRequest\n}) => {\n  return { ...scatterRequest\n  };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(YupBridge));","map":null,"metadata":{},"sourceType":"module"}