{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/errors.ts",
    "src/index-bundle.js",
    "src/index.ts",
    "src/link-abi-data.ts",
    "src/link-options.ts",
    "src/link-session.ts",
    "src/link.ts",
    "src/utils.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "/**\n * Error codes. Accessible using the `code` property on errors thrown by [[Link]] and [[LinkSession]].\n * - `E_DELIVERY`: Unable to request message to wallet.\n * - `E_TIMEOUT`: Request was delivered but user/wallet didn't respond in time.\n * - `E_CANCEL`: The [[LinkTransport]] canceled the request.\n * - `E_IDENTITY`: Identity proof failed to verify.\n */\nexport type LinkErrorCode = 'E_DELIVERY' | 'E_TIMEOUT' | 'E_CANCEL' | 'E_IDENTITY'\n\n/**\n * Error that is thrown if a [[LinkTransport]] cancels a request.\n * @internal\n */\nexport class CancelError extends Error {\n    public code = 'E_CANCEL'\n    constructor(reason?: string) {\n        super(`User canceled request ${reason ? '(' + reason + ')' : ''}`)\n    }\n}\n\n/**\n * Error that is thrown if an identity request fails to verify.\n * @internal\n */\nexport class IdentityError extends Error {\n    public code = 'E_IDENTITY'\n    constructor(reason?: string) {\n        super(`Unable to verify identity ${reason ? '(' + reason + ')' : ''}`)\n    }\n}\n\n/**\n * Error originating from a [[LinkSession]].\n * @internal\n */\nexport class SessionError extends Error {\n    public code: 'E_DELIVERY' | 'E_TIMEOUT'\n    constructor(reason: string, code: 'E_DELIVERY' | 'E_TIMEOUT') {\n        super(reason)\n        this.code = code\n    }\n}\n",
    "let pkg = require('./index')\nmodule.exports = pkg.default\nfor (const key of Object.keys(pkg)) {\n    if (key === 'default') continue\n    module.exports[key] = pkg[key]\n}\n",
    "export * from './link'\nexport * from './link-session'\nexport {LinkOptions} from './link-options'\nexport {LinkTransport} from './link-transport'\nexport {LinkStorage} from './link-storage'\nexport * from './errors'\n\n// default export is Link class for convenience\nimport {Link} from './link'\nexport default Link\n\n// convenience re-exports from esr\nexport {PlaceholderAuth, PlaceholderName, PlaceholderPermission} from 'eosio-signing-request'\n",
    "export default {\n    version: 'eosio::abi/1.1',\n    types: [],\n    structs: [\n        {\n            name: 'sealed_message',\n            base: '',\n            fields: [\n                {\n                    name: 'from',\n                    type: 'public_key',\n                },\n                {\n                    name: 'nonce',\n                    type: 'uint64',\n                },\n                {\n                    name: 'ciphertext',\n                    type: 'bytes',\n                },\n                {\n                    name: 'checksum',\n                    type: 'uint32',\n                },\n            ],\n        },\n        {\n            name: 'link_create',\n            base: '',\n            fields: [\n                {\n                    name: 'session_name',\n                    type: 'name',\n                },\n                {\n                    name: 'request_key',\n                    type: 'public_key',\n                },\n            ],\n        },\n        {\n            name: 'link_info',\n            base: '',\n            fields: [\n                {\n                    name: 'expiration',\n                    type: 'time_point_sec',\n                },\n            ],\n        },\n    ],\n    actions: [],\n    ricardian_clauses: [],\n    error_messages: [],\n    tables: [],\n    abi_extensions: [],\n}\n",
    "import {ChainName} from 'eosio-signing-request'\nimport {JsonRpc} from 'eosjs'\nimport {LinkStorage} from './link-storage'\nimport {LinkTransport} from './link-transport'\n\n/**\n * Available options when creating a new [[Link]] instance.\n */\nexport interface LinkOptions {\n    /**\n     * Link transport responsible for presenting signing requests to user, required.\n     */\n    transport: LinkTransport\n    /**\n     * ChainID or esr chain name alias for which the link is valid.\n     * Defaults to EOS (aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906).\n     */\n    chainId?: string | ChainName\n    /**\n     * URL to EOSIO node to communicate with or e eosjs JsonRpc instance.\n     * Defaults to https://eos.greymass.com\n     */\n    rpc?: string | JsonRpc\n    /**\n     * URL to link callback service.\n     * Defaults to https://cb.anchor.link.\n     */\n    service?: string\n    /**\n     * Optional storage adapter that will be used to persist sessions if set.\n     * If not storage adapter is set but the given transport provides a storage, that will be used.\n     * Explicitly set this to `null` to force no storage.\n     */\n    storage?: LinkStorage | null\n    /**\n     * Text encoder, only needed in old browsers or if used in node.js versions prior to v13.\n     */\n    textEncoder?: TextEncoder\n    /**\n     * Text decoder, only needed in old browsers or if used in node.js versions prior to v13.\n     */\n    textDecoder?: TextDecoder\n}\n\n/** @internal */\nexport const defaults = {\n    chainId: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906',\n    rpc: 'https://eos.greymass.com',\n    service: 'https://cb.anchor.link',\n}\n",
    "import {SigningRequest} from 'eosio-signing-request'\nimport {ApiInterfaces} from 'eosjs'\n\nimport {SessionError} from './errors'\nimport {Link, PermissionLevel, TransactArgs, TransactOptions, TransactResult} from './link'\nimport {LinkInfo} from './link-abi'\nimport {LinkTransport} from './link-transport'\nimport {abiEncode, fetch, sealMessage} from './utils'\n\n/**\n * Type describing a link session that can create a eosjs compatible\n * signature provider and transact for a specific auth.\n */\nexport abstract class LinkSession {\n    /** The underlying link instance used by the session. */\n    abstract link: Link\n    /** App identifier that owns the session. */\n    abstract identifier: string\n    /** The public key the session can sign for. */\n    abstract publicKey: string\n    /** The EOSIO auth (a.k.a. permission level) the session can sign for. */\n    abstract auth: {\n        actor: string\n        permission: string\n    }\n    /** Session type, e.g. 'channel'.  */\n    abstract type: string\n    /** Arbitrary metadata that will be serialized with the session. */\n    abstract metadata: {[key: string]: any}\n    /** Creates a eosjs compatible authority provider. */\n    abstract makeAuthorityProvider(): ApiInterfaces.AuthorityProvider\n    /** Creates a eosjs compatible signature provider that can sign for the session public key. */\n    abstract makeSignatureProvider(): ApiInterfaces.SignatureProvider\n    /**\n     * Transact using this session. See [[Link.transact]].\n     */\n    abstract transact(args: TransactArgs, options?: TransactOptions): Promise<TransactResult>\n    /** Returns a JSON-encodable object that can be used recreate the session. */\n    abstract serialize(): SerializedLinkSession\n    /**\n     * Convenience, remove this session from associated [[Link]] storage if set.\n     * Equivalent to:\n     * ```ts\n     * session.link.removeSession(session.identifier, session.auth)\n     * ```\n     */\n    async remove() {\n        if (this.link.storage) {\n            await this.link.removeSession(this.identifier, this.auth)\n        }\n    }\n    /** Restore a previously serialized session. */\n    static restore(link: Link, data: SerializedLinkSession): LinkSession {\n        switch (data.type) {\n            case 'channel':\n                return new LinkChannelSession(link, data.data, data.metadata)\n            case 'fallback':\n                return new LinkFallbackSession(link, data.data, data.metadata)\n            default:\n                throw new Error('Unable to restore, session data invalid')\n        }\n    }\n}\n\n/** @internal */\nexport interface SerializedLinkSession {\n    type: string\n    metadata: {[key: string]: any}\n    data: any\n}\n\n/** @internal */\ninterface ChannelInfo {\n    /** Public key requests are encrypted to. */\n    key: string\n    /** The wallet given channel name, usually the device name. */\n    name: string\n    /** The channel push url. */\n    url: string\n}\n\n/** @internal */\nexport interface LinkChannelSessionData {\n    /** App identifier that owns the session. */\n    identifier: string\n    /** Authenticated user permission. */\n    auth: PermissionLevel\n    /** Public key of authenticated user */\n    publicKey: string\n    /** The wallet channel url. */\n    channel: ChannelInfo\n    /** The private request key. */\n    requestKey: string\n}\n\n/**\n * Link session that pushes requests over a channel.\n * @internal\n */\nexport class LinkChannelSession extends LinkSession implements LinkTransport {\n    readonly link: Link\n    readonly auth: PermissionLevel\n    readonly identifier: string\n    readonly type = 'channel'\n    readonly metadata\n    readonly publicKey: string\n    serialize: () => SerializedLinkSession\n    private channel: ChannelInfo\n    private timeout = 2 * 60 * 1000 // ms\n    private encrypt: (request: SigningRequest) => Uint8Array\n\n    constructor(link: Link, data: LinkChannelSessionData, metadata: any) {\n        super()\n        this.link = link\n        this.auth = data.auth\n        this.publicKey = data.publicKey\n        this.channel = data.channel\n        this.identifier = data.identifier\n        this.encrypt = (request) => {\n            return sealMessage(request.encode(true, false), data.requestKey, data.channel.key)\n        }\n        this.metadata = {\n            ...(metadata || {}),\n            timeout: this.timeout,\n            name: this.channel.name,\n        }\n        this.serialize = () => ({\n            type: 'channel',\n            data,\n            metadata: this.metadata,\n        })\n    }\n\n    onSuccess(request, result) {\n        if (this.link.transport.onSuccess) {\n            this.link.transport.onSuccess(request, result)\n        }\n    }\n\n    onFailure(request, error) {\n        if (this.link.transport.onFailure) {\n            this.link.transport.onFailure(request, error)\n        }\n    }\n\n    onRequest(request, cancel) {\n        const info: LinkInfo = {\n            expiration: new Date(Date.now() + this.timeout).toISOString().slice(0, -1),\n        }\n        if (this.link.transport.onSessionRequest) {\n            this.link.transport.onSessionRequest(this, request, cancel)\n        }\n        setTimeout(() => {\n            cancel(new SessionError('Wallet did not respond in time', 'E_TIMEOUT'))\n        }, this.timeout + 500)\n        request.data.info.push({\n            key: 'link',\n            value: abiEncode(info, 'link_info'),\n        })\n        fetch(this.channel.url, {\n            method: 'POST',\n            headers: {\n                'X-Buoy-Wait': (this.timeout / 1000).toFixed(0),\n            },\n            body: this.encrypt(request),\n        })\n            .then((response) => {\n                if (response.status !== 200) {\n                    cancel(new SessionError('Unable to push message', 'E_DELIVERY'))\n                } else {\n                    // request delivered\n                }\n            })\n            .catch((error) => {\n                cancel(\n                    new SessionError(\n                        `Unable to reach link service (${error.message || String(error)})`,\n                        'E_DELIVERY'\n                    )\n                )\n            })\n    }\n\n    prepare(request) {\n        if (this.link.transport.prepare) {\n            return this.link.transport.prepare(request, this)\n        }\n        return Promise.resolve(request)\n    }\n\n    showLoading() {\n        if (this.link.transport.showLoading) {\n            return this.link.transport.showLoading()\n        }\n    }\n\n    public makeSignatureProvider(): ApiInterfaces.SignatureProvider {\n        return this.link.makeSignatureProvider([this.publicKey], this)\n    }\n\n    public makeAuthorityProvider(): ApiInterfaces.AuthorityProvider {\n        return this.link.makeAuthorityProvider()\n    }\n\n    transact(args: TransactArgs, options?: TransactOptions) {\n        return this.link.transact(args, options, this)\n    }\n}\n\n/** @internal */\nexport interface LinkFallbackSessionData {\n    auth: {\n        actor: string\n        permission: string\n    }\n    publicKey: string\n    identifier: string\n}\n\n/**\n * Link session that sends every request over the transport.\n * @internal\n */\nexport class LinkFallbackSession extends LinkSession implements LinkTransport {\n    readonly link: Link\n    readonly auth: {\n        actor: string\n        permission: string\n    }\n    readonly type = 'fallback'\n    readonly identifier: string\n    readonly metadata: {[key: string]: any}\n    readonly publicKey: string\n    serialize: () => SerializedLinkSession\n\n    constructor(link: Link, data: LinkFallbackSessionData, metadata: any) {\n        super()\n        this.link = link\n        this.auth = data.auth\n        this.publicKey = data.publicKey\n        this.metadata = metadata || {}\n        this.identifier = data.identifier\n        this.serialize = () => ({\n            type: this.type,\n            data,\n            metadata: this.metadata,\n        })\n    }\n\n    onSuccess(request, result) {\n        if (this.link.transport.onSuccess) {\n            this.link.transport.onSuccess(request, result)\n        }\n    }\n\n    onFailure(request, error) {\n        if (this.link.transport.onFailure) {\n            this.link.transport.onFailure(request, error)\n        }\n    }\n\n    onRequest(request, cancel) {\n        if (this.link.transport.onSessionRequest) {\n            this.link.transport.onSessionRequest(this, request, cancel)\n        } else {\n            this.link.transport.onRequest(request, cancel)\n        }\n    }\n\n    prepare(request) {\n        if (this.link.transport.prepare) {\n            return this.link.transport.prepare(request, this)\n        }\n        return Promise.resolve(request)\n    }\n\n    showLoading() {\n        if (this.link.transport.showLoading) {\n            return this.link.transport.showLoading()\n        }\n    }\n\n    public makeSignatureProvider(): ApiInterfaces.SignatureProvider {\n        return this.link.makeSignatureProvider([this.publicKey], this)\n    }\n\n    public makeAuthorityProvider(): ApiInterfaces.AuthorityProvider {\n        return this.link.makeAuthorityProvider()\n    }\n\n    transact(args: TransactArgs, options?: TransactOptions) {\n        return this.link.transact(args, options, this)\n    }\n}\n",
    "import * as esr from 'eosio-signing-request'\nimport {ApiInterfaces, JsonRpc} from 'eosjs'\nimport * as ecc from 'eosjs-ecc'\nimport makeFetch from 'fetch-ponyfill'\nimport WebSocket from 'isomorphic-ws'\nimport zlib from 'pako'\nimport {v4 as uuid} from 'uuid'\n\nimport {CancelError, IdentityError} from './errors'\nimport {LinkCreate} from './link-abi'\nimport {defaults, LinkOptions} from './link-options'\nimport {LinkChannelSession, LinkFallbackSession, LinkSession} from './link-session'\nimport {LinkStorage} from './link-storage'\nimport {LinkTransport} from './link-transport'\nimport {abiEncode, fetch, generatePrivateKey, normalizePublicKey, publicKeyEqual} from './utils'\n\n/** EOSIO permission level with actor and signer, a.k.a. 'auth', 'authority' or 'account auth' */\nexport type PermissionLevel = esr.abi.PermissionLevel\n\n/**\n * Payload accepted by the [[Link.transact]] method.\n * Note that one of `action`, `actions` or `transaction` must be set.\n */\nexport interface TransactArgs {\n    /** Full transaction to sign. */\n    transaction?: esr.abi.Transaction\n    /** Action to sign. */\n    action?: esr.abi.Action\n    /** Actions to sign. */\n    actions?: esr.abi.Action[]\n}\n\n/**\n * Options for the [[Link.transact]] method.\n */\nexport interface TransactOptions {\n    /**\n     * Whether to broadcast the transaction or just return the signature.\n     * Defaults to true.\n     */\n    broadcast?: boolean\n}\n\n/**\n * The result of a [[Link.transact]] call.\n */\nexport interface TransactResult {\n    /** The signing request that was sent. */\n    request: esr.SigningRequest\n    /** The transaction signatures. */\n    signatures: string[]\n    /** The callback payload. */\n    payload: esr.CallbackPayload\n    /** The signer authority. */\n    signer: PermissionLevel\n    /** The resulting transaction. */\n    transaction: esr.abi.Transaction\n    /** Serialized version of transaction. */\n    serializedTransaction: Uint8Array\n    /** Push transaction response from api node, only present if transaction was broadcast. */\n    processed?: {[key: string]: any}\n}\n\n/**\n * The result of a [[Link.identify]] call.\n */\nexport interface IdentifyResult extends TransactResult {\n    /** The identified account. */\n    account: object\n    /** The public key that signed the identity proof.  */\n    signerKey: string\n}\n\n/**\n * The result of a [[Link.login]] call.\n */\nexport interface LoginResult extends IdentifyResult {\n    /** The session created by the login. */\n    session: LinkSession\n}\n\n/**\n * Main class, also exposed as the default export of the library.\n *\n * Example:\n *\n * ```ts\n * import AnchorLink from 'anchor-link'\n * import ConsoleTransport from 'anchor-link-console-transport'\n *\n * const link = new AnchorLink({\n *     transport: new ConsoleTransport()\n * })\n *\n * const result = await link.transact({actions: myActions})\n * ```\n */\nexport class Link implements esr.AbiProvider {\n    /** The eosjs RPC instance used to communicate with the EOSIO node. */\n    public readonly rpc: JsonRpc\n    /** Transport used to deliver requests to the user wallet. */\n    public readonly transport: LinkTransport\n    /** EOSIO ChainID for which requests are valid. */\n    public readonly chainId: string\n    /** Storage adapter used to persist sessions. */\n    public readonly storage?: LinkStorage\n\n    private serviceAddress: string\n    private requestOptions: esr.SigningRequestEncodingOptions\n    private abiCache = new Map<string, any>()\n    private pendingAbis = new Map<string, Promise<any>>()\n\n    /** Create a new link instance. */\n    constructor(options: LinkOptions) {\n        if (typeof options !== 'object') {\n            throw new TypeError('Missing options object')\n        }\n        if (!options.transport) {\n            throw new TypeError(\n                'options.transport is required, see https://github.com/greymass/anchor-link#transports'\n            )\n        }\n        if (options.rpc === undefined || typeof options.rpc === 'string') {\n            this.rpc = new JsonRpc(options.rpc || defaults.rpc, {fetch: fetch as any})\n        } else {\n            this.rpc = options.rpc\n        }\n        if (options.chainId) {\n            this.chainId =\n                typeof options.chainId === 'number'\n                    ? esr.nameToId(options.chainId)\n                    : options.chainId\n        } else {\n            this.chainId = defaults.chainId\n        }\n        this.serviceAddress = (options.service || defaults.service).trim().replace(/\\/$/, '')\n        this.transport = options.transport\n        if (options.storage !== null) {\n            this.storage = options.storage || this.transport.storage\n        }\n        this.requestOptions = {\n            abiProvider: this,\n            textDecoder: options.textDecoder || new TextDecoder(),\n            textEncoder: options.textEncoder || new TextEncoder(),\n            zlib,\n        }\n    }\n\n    /**\n     * Fetch the ABI for given account, cached.\n     * @internal\n     */\n    public async getAbi(account: string) {\n        let rv = this.abiCache.get(account)\n        if (!rv) {\n            let getAbi = this.pendingAbis.get(account)\n            if (!getAbi) {\n                getAbi = this.rpc.get_abi(account)\n                this.pendingAbis.set(account, getAbi)\n            }\n            rv = (await getAbi).abi\n            this.pendingAbis.delete(account)\n            if (rv) {\n                this.abiCache.set(account, rv)\n            }\n        }\n        return rv\n    }\n\n    /**\n     * Create a new unique buoy callback url.\n     * @internal\n     */\n    public createCallbackUrl() {\n        return `${this.serviceAddress}/${uuid()}`\n    }\n\n    /**\n     * Create a SigningRequest instance configured for this link.\n     * @internal\n     */\n    public async createRequest(args: esr.SigningRequestCreateArguments, transport?: LinkTransport) {\n        const t = transport || this.transport\n        // generate unique callback url\n        let request = await esr.SigningRequest.create(\n            {\n                ...args,\n                chainId: this.chainId,\n                broadcast: false,\n                callback: {\n                    url: this.createCallbackUrl(),\n                    background: true,\n                },\n            },\n            this.requestOptions\n        )\n        if (t.prepare) {\n            request = await t.prepare(request)\n        }\n        return request\n    }\n\n    /**\n     * Send a SigningRequest instance using this link.\n     * @internal\n     */\n    public async sendRequest(\n        request: esr.SigningRequest,\n        transport?: LinkTransport,\n        broadcast = false\n    ) {\n        const t = transport || this.transport\n        try {\n            const linkUrl = request.data.callback\n            if (!linkUrl.startsWith(this.serviceAddress)) {\n                throw new Error('Request must have a link callback')\n            }\n            if (request.data.flags !== 2) {\n                throw new Error('Invalid request flags')\n            }\n            // wait for callback or user cancel\n            const ctx: {cancel?: () => void} = {}\n            const socket = waitForCallback(linkUrl, ctx).then((data) => {\n                if (typeof data.rejected === 'string') {\n                    throw new CancelError(`Rejected by wallet: ${data.rejected}`)\n                }\n                return data\n            })\n            const cancel = new Promise<never>((resolve, reject) => {\n                t.onRequest(request, (reason) => {\n                    if (ctx.cancel) {\n                        ctx.cancel()\n                    }\n                    if (typeof reason === 'string') {\n                        reject(new CancelError(reason))\n                    } else {\n                        reject(reason)\n                    }\n                })\n            })\n            const payload = await Promise.race([socket, cancel])\n            const signer: PermissionLevel = {\n                actor: payload.sa,\n                permission: payload.sp,\n            }\n            const signatures: string[] = Object.keys(payload)\n                .filter((key) => key.startsWith('sig') && key !== 'sig0')\n                .map((key) => payload[key]!)\n            // recreate transaction from request response\n            const resolved = await esr.ResolvedSigningRequest.fromPayload(\n                payload,\n                this.requestOptions\n            )\n            const info = resolved.request.getInfo()\n            if (info['fuel_sig']) {\n                signatures.unshift(info['fuel_sig'])\n            }\n            const {serializedTransaction, transaction} = resolved\n            const result: TransactResult = {\n                request: resolved.request,\n                serializedTransaction,\n                transaction,\n                signatures,\n                payload,\n                signer,\n            }\n            if (broadcast) {\n                const res = await this.rpc.push_transaction({\n                    signatures: result.signatures,\n                    serializedTransaction: result.serializedTransaction,\n                })\n                result.processed = res.processed\n            }\n            if (t.onSuccess) {\n                t.onSuccess(request, result)\n            }\n            return result\n        } catch (error) {\n            if (t.onFailure) {\n                t.onFailure(request, error)\n            }\n            throw error\n        }\n    }\n\n    /**\n     * Sign and optionally broadcast a EOSIO transaction, action or actions.\n     *\n     * Example:\n     *\n     * ```ts\n     * let result = await myLink.transact({transaction: myTx})\n     * ```\n     *\n     * @param args The action, actions or transaction to use.\n     * @param options Options for this transact call.\n     * @param transport Transport override, for internal use.\n     */\n    public async transact(\n        args: TransactArgs,\n        options?: TransactOptions,\n        transport?: LinkTransport\n    ): Promise<TransactResult> {\n        const t = transport || this.transport\n        const broadcast = options ? options.broadcast !== false : true\n        // Initialize the loading state of the transport\n        if (t && t.showLoading) {\n            t.showLoading()\n        }\n        // eosjs transact compat: upgrade to transaction if args have any header fields\n        let anyArgs = args as any\n        if (\n            args.actions &&\n            (anyArgs.expiration ||\n                anyArgs.ref_block_num ||\n                anyArgs.ref_block_prefix ||\n                anyArgs.max_net_usage_words ||\n                anyArgs.max_cpu_usage_ms ||\n                anyArgs.delay_sec)\n        ) {\n            args = {\n                transaction: {\n                    expiration: '1970-01-01T00:00:00',\n                    ref_block_num: 0,\n                    ref_block_prefix: 0,\n                    max_net_usage_words: 0,\n                    max_cpu_usage_ms: 0,\n                    delay_sec: 0,\n                    ...anyArgs,\n                },\n            }\n        }\n        const request = await this.createRequest(args, t)\n        const result = await this.sendRequest(request, t, broadcast)\n        return result\n    }\n\n    /**\n     * Send an identity request and verify the identity proof.\n     * @param requestPermission Optional request permission if the request is for a specific account or permission.\n     * @param info Metadata to add to the request.\n     * @note This is for advanced use-cases, you probably want to use [[Link.login]] instead.\n     */\n    public async identify(\n        requestPermission?: PermissionLevel,\n        info?: {[key: string]: string | Uint8Array}\n    ): Promise<IdentifyResult> {\n        const request = await this.createRequest({\n            identity: {permission: requestPermission || null},\n            info,\n        })\n        const res = await this.sendRequest(request)\n        if (!res.request.isIdentity()) {\n            throw new IdentityError(`Unexpected response`)\n        }\n        const message = Buffer.concat([\n            Buffer.from(request.getChainId(), 'hex'),\n            Buffer.from(res.serializedTransaction),\n            Buffer.alloc(32),\n        ])\n        const {signer} = res\n        const signerKey = ecc.recover(res.signatures[0], message)\n        const account = await this.rpc.get_account(signer.actor)\n        if (!account) {\n            throw new IdentityError(`Signature from unknown account: ${signer.actor}`)\n        }\n        const permission = account.permissions.find(\n            ({perm_name}) => perm_name === signer.permission\n        )\n        if (!permission) {\n            throw new IdentityError(\n                `${signer.actor} signed for unknown permission: ${signer.permission}`\n            )\n        }\n        const auth = permission.required_auth\n        const keyAuth = auth.keys.find(({key}) => publicKeyEqual(key, signerKey))\n        if (!keyAuth) {\n            throw new IdentityError(`${formatAuth(signer)} has no key matching id signature`)\n        }\n        if (auth.threshold > keyAuth.weight) {\n            throw new IdentityError(`${formatAuth(signer)} signature does not reach auth threshold`)\n        }\n        if (requestPermission) {\n            if (\n                (requestPermission.actor !== esr.PlaceholderName &&\n                    requestPermission.actor !== signer.actor) ||\n                (requestPermission.permission !== esr.PlaceholderPermission &&\n                    requestPermission.permission !== signer.permission)\n            ) {\n                throw new IdentityError(\n                    `Unexpected identity proof from ${formatAuth(signer)}, expected ${formatAuth(\n                        requestPermission\n                    )} `\n                )\n            }\n        }\n        return {\n            ...res,\n            account,\n            signerKey,\n        }\n    }\n\n    /**\n     * Login and create a persistent session.\n     * @param identifier The session identifier, an EOSIO name (`[a-z1-5]{1,12}`).\n     *                   Should be set to the contract account if applicable.\n     */\n    public async login(identifier: string): Promise<LoginResult> {\n        const privateKey = await generatePrivateKey()\n        const requestKey = ecc.privateToPublic(privateKey)\n        const createInfo: LinkCreate = {\n            session_name: identifier,\n            request_key: requestKey,\n        }\n        const res = await this.identify(undefined, {\n            link: abiEncode(createInfo, 'link_create'),\n        })\n        const metadata = {sameDevice: res.request.getRawInfo()['return_path'] !== undefined}\n        let session: LinkSession\n        if (res.payload.link_ch && res.payload.link_key && res.payload.link_name) {\n            session = new LinkChannelSession(\n                this,\n                {\n                    identifier,\n                    auth: res.signer,\n                    publicKey: res.signerKey,\n                    channel: {\n                        url: res.payload.link_ch,\n                        key: res.payload.link_key,\n                        name: res.payload.link_name,\n                    },\n                    requestKey: privateKey,\n                },\n                metadata\n            )\n        } else {\n            session = new LinkFallbackSession(\n                this,\n                {\n                    identifier,\n                    auth: res.signer,\n                    publicKey: res.signerKey,\n                },\n                metadata\n            )\n        }\n        if (this.storage) {\n            await this.storeSession(identifier, session)\n        }\n        return {\n            ...res,\n            session,\n        }\n    }\n\n    /**\n     * Restore previous session, see [[Link.login]] to create a new session.\n     * @param identifier The session identifier, should be same as what was used when creating the session with [[Link.login]].\n     * @param auth A specific session auth to restore, if omitted the most recently used session will be restored.\n     * @returns A [[LinkSession]] instance or null if no session can be found.\n     * @throws If no [[LinkStorage]] adapter is configured or there was an error retrieving the session data.\n     **/\n    public async restoreSession(identifier: string, auth?: PermissionLevel) {\n        if (!this.storage) {\n            throw new Error('Unable to restore session: No storage adapter configured')\n        }\n        let key: string\n        if (auth) {\n            key = this.sessionKey(identifier, formatAuth(auth))\n        } else {\n            let latest = (await this.listSessions(identifier))[0]\n            if (!latest) {\n                return null\n            }\n            key = this.sessionKey(identifier, formatAuth(latest))\n        }\n        let data = await this.storage.read(key)\n        if (!data) {\n            return null\n        }\n        let sessionData: any\n        try {\n            sessionData = JSON.parse(data)\n        } catch (error) {\n            throw new Error(\n                `Unable to restore session: Stored JSON invalid (${error.message || String(error)})`\n            )\n        }\n        const session = LinkSession.restore(this, sessionData)\n        if (auth) {\n            // update latest used\n            await this.touchSession(identifier, auth)\n        }\n        return session\n    }\n\n    /**\n     * List stored session auths for given identifier.\n     * The most recently used session is at the top (index 0).\n     * @throws If no [[LinkStorage]] adapter is configured or there was an error retrieving the session list.\n     **/\n    public async listSessions(identifier: string) {\n        if (!this.storage) {\n            throw new Error('Unable to list sessions: No storage adapter configured')\n        }\n        let key = this.sessionKey(identifier, 'list')\n        let list: PermissionLevel[]\n        try {\n            list = JSON.parse((await this.storage.read(key)) || '[]')\n        } catch (error) {\n            throw new Error(\n                `Unable to list sessions: Stored JSON invalid (${error.message || String(error)})`\n            )\n        }\n        return list\n    }\n\n    /**\n     * Remove stored session for given identifier and auth.\n     * @throws If no [[LinkStorage]] adapter is configured or there was an error removing the session data.\n     */\n    public async removeSession(identifier: string, auth: PermissionLevel) {\n        if (!this.storage) {\n            throw new Error('Unable to remove session: No storage adapter configured')\n        }\n        let key = this.sessionKey(identifier, formatAuth(auth))\n        await this.storage.remove(key)\n        await this.touchSession(identifier, auth, true)\n    }\n\n    /**\n     * Remove all stored sessions for given identifier.\n     * @throws If no [[LinkStorage]] adapter is configured or there was an error removing the session data.\n     */\n    public async clearSessions(identifier: string) {\n        if (!this.storage) {\n            throw new Error('Unable to clear sessions: No storage adapter configured')\n        }\n        for (const auth of await this.listSessions(identifier)) {\n            await this.removeSession(identifier, auth)\n        }\n    }\n\n    /**\n     * Create an eosjs compatible signature provider using this link.\n     * @param availableKeys Keys the created provider will claim to be able to sign for.\n     * @param transport (internal) Transport override for this call.\n     * @note We don't know what keys are available so those have to be provided,\n     *       to avoid this use [[LinkSession.makeSignatureProvider]] instead. Sessions can be created with [[Link.login]].\n     */\n    public makeSignatureProvider(\n        availableKeys: string[],\n        transport?: LinkTransport\n    ): ApiInterfaces.SignatureProvider {\n        return {\n            getAvailableKeys: async () => availableKeys,\n            sign: async (args) => {\n                const t = transport || this.transport\n                let request = esr.SigningRequest.fromTransaction(\n                    args.chainId,\n                    args.serializedTransaction,\n                    this.requestOptions\n                )\n                request.setCallback(this.createCallbackUrl(), true)\n                request.setBroadcast(false)\n                if (t.prepare) {\n                    request = await t.prepare(request)\n                }\n                const {\n                    serializedTransaction,\n                    signatures,\n                } = await this.sendRequest(request, t)\n                return {\n                    ...args,\n                    serializedTransaction,\n                    signatures,\n                }\n            },\n        }\n    }\n\n    /**\n     * Create an eosjs authority provider using this link.\n     * @note Uses the configured RPC Node's `/v1/chain/get_required_keys` API to resolve keys.\n     */\n    public makeAuthorityProvider(): ApiInterfaces.AuthorityProvider {\n        const {rpc} = this\n        return {\n            async getRequiredKeys(args: ApiInterfaces.AuthorityProviderArgs) {\n                const {availableKeys, transaction} = args\n                const result = await rpc.fetch('/v1/chain/get_required_keys', {\n                    transaction,\n                    available_keys: availableKeys.map(normalizePublicKey),\n                })\n                return result.required_keys.map(normalizePublicKey)\n            },\n        }\n    }\n\n    /** Makes sure session is in storage list of sessions and moves it to top (most recently used). */\n    private async touchSession(identifier: string, auth: PermissionLevel, remove = false) {\n        let auths = await this.listSessions(identifier)\n        let formattedAuth = formatAuth(auth)\n        let existing = auths.findIndex((a) => formatAuth(a) === formattedAuth)\n        if (existing >= 0) {\n            auths.splice(existing, 1)\n        }\n        if (remove === false) {\n            auths.unshift(auth)\n        }\n        let key = this.sessionKey(identifier, 'list')\n        await this.storage!.write(key, JSON.stringify(auths))\n    }\n\n    /** Makes sure session is in storage list of sessions and moves it to top (most recently used). */\n    private async storeSession(identifier: string, session: LinkSession) {\n        let key = this.sessionKey(identifier, formatAuth(session.auth))\n        let data = JSON.stringify(session.serialize())\n        await this.storage!.write(key, data)\n        await this.touchSession(identifier, session.auth)\n    }\n\n    /** Session storage key for identifier and suffix. */\n    private sessionKey(identifier: string, suffix: string) {\n        return [this.chainId, identifier, suffix].join('-')\n    }\n}\n\n/**\n * Connect to a WebSocket channel and wait for a message.\n * @internal\n */\nfunction waitForCallback(url: string, ctx: {cancel?: () => void}) {\n    return new Promise<esr.CallbackPayload>((resolve, reject) => {\n        let active = true\n        let retries = 0\n        const socketUrl = url.replace(/^http/, 'ws')\n        const handleResponse = (response: string) => {\n            try {\n                resolve(JSON.parse(response))\n            } catch (error) {\n                error.message = 'Unable to parse callback JSON: ' + error.message\n                reject(error)\n            }\n        }\n        const connect = () => {\n            const socket = new WebSocket(socketUrl)\n            ctx.cancel = () => {\n                active = false\n                if (\n                    socket.readyState === WebSocket.OPEN ||\n                    socket.readyState === WebSocket.CONNECTING\n                ) {\n                    socket.close()\n                }\n            }\n            socket.onmessage = (event) => {\n                active = false\n                if (socket.readyState === WebSocket.OPEN) {\n                    socket.close()\n                }\n                if (typeof Blob !== 'undefined' && event.data instanceof Blob) {\n                    const reader = new FileReader()\n                    reader.onload = () => {\n                        handleResponse(reader.result as string)\n                    }\n                    reader.onerror = (error) => {\n                        reject(error)\n                    }\n                    reader.readAsText(event.data)\n                } else {\n                    if (typeof event.data === 'string') {\n                        handleResponse(event.data)\n                    } else {\n                        handleResponse(event.data.toString())\n                    }\n                }\n            }\n            socket.onopen = () => {\n                retries = 0\n            }\n            socket.onerror = (error) => {}\n            socket.onclose = (close) => {\n                if (active) {\n                    setTimeout(connect, backoff(retries++))\n                }\n            }\n        }\n        connect()\n    })\n}\n\n/**\n * Exponential backoff function that caps off at 10s after 10 tries.\n * https://i.imgur.com/IrUDcJp.png\n * @internal\n */\nfunction backoff(tries: number): number {\n    return Math.min(Math.pow(tries * 10, 2), 10 * 1000)\n}\n\n/**\n * Format a EOSIO permission level in the format `actor@permission` taking placeholders into consideration.\n * @internal\n */\nfunction formatAuth(auth: PermissionLevel): string {\n    let {actor, permission} = auth\n    if (actor === esr.PlaceholderName) {\n        actor = '<any>'\n    }\n    if (permission === esr.PlaceholderName || permission === esr.PlaceholderPermission) {\n        permission = '<any>'\n    }\n    return `${actor}@${permission}`\n}\n",
    "import {Numeric, Serialize} from 'eosjs'\nimport * as ecc from 'eosjs-ecc'\nimport makeFetch from 'fetch-ponyfill'\n\nimport {Bytes, SealedMessage} from './link-abi'\nimport linkAbi from './link-abi-data'\n\n/** @internal */\nexport const fetch = makeFetch().fetch\n\n/** @internal */\nconst types = Serialize.getTypesFromAbi(Serialize.createInitialTypes(), linkAbi)\n\n/**\n * Helper to ABI encode value.\n * @internal\n */\nexport function abiEncode(value: any, typeName: string): Uint8Array {\n    let type = types.get(typeName)\n    if (!type) {\n        throw new Error(`No such type: ${typeName}`)\n    }\n    let buf = new Serialize.SerialBuffer()\n    type.serialize(buf, value)\n    return buf.asUint8Array()\n}\n\n/**\n * Helper to ABI decode data.\n * @internal\n */\nexport function abiDecode<ResultType = any>(data: Bytes, typeName: string): ResultType {\n    let type = types.get(typeName)\n    if (!type) {\n        throw new Error(`No such type: ${typeName}`)\n    }\n    if (typeof data === 'string') {\n        data = Serialize.hexToUint8Array(data)\n    } else if (!(data instanceof Uint8Array)) {\n        data = new Uint8Array(data)\n    }\n    let buf = new Serialize.SerialBuffer({\n        array: data,\n    })\n    return type.deserialize(buf) as ResultType\n}\n\n/**\n * Encrypt a message using AES and shared secret derived from given keys.\n * @internal\n */\nexport function sealMessage(message: string, privateKey: string, publicKey: string) {\n    const res = ecc.Aes.encrypt(privateKey, publicKey, message)\n    const data: SealedMessage = {\n        from: ecc.privateToPublic(privateKey),\n        nonce: res.nonce.toString(),\n        ciphertext: res.message,\n        checksum: res.checksum,\n    }\n    return abiEncode(data, 'sealed_message')\n}\n\n/**\n * Ensure public key is in new PUB_ format.\n * @internal\n */\nexport function normalizePublicKey(key: string) {\n    if (key.startsWith('PUB_')) {\n        return key\n    }\n    return Numeric.publicKeyToString(Numeric.stringToPublicKey('EOS' + key.substr(-50)))\n}\n\n/**\n * Return true if given public keys are equal.\n * @internal\n */\nexport function publicKeyEqual(keyA: string, keyB: string) {\n    return normalizePublicKey(keyA) === normalizePublicKey(keyB)\n}\n\n/**\n * Generate a random private key.\n * Uses browser crypto if available, otherwise falls back to slow eosjs-ecc.\n * @internal\n */\nexport async function generatePrivateKey() {\n    if (typeof window !== 'undefined' && window.crypto) {\n        const data = new Uint32Array(32)\n        window.crypto.getRandomValues(data)\n        return ecc.PrivateKey.fromBuffer(Buffer.from(data)).toString()\n    } else {\n        return await ecc.randomKey()\n    }\n}\n"
  ]
}