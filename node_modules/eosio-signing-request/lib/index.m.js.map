{"version":3,"file":"index.m.js","sources":["../src/base64u.ts","../src/chain-id.ts","../node_modules/tslib/tslib.es6.js","../src/abi.ts","../src/signing-request.ts"],"sourcesContent":["/**\n * Base64u - URL-Safe Base64 variant no padding.\n * Based on https://gist.github.com/jonleighton/958841\n */\n\nconst charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\nconst lookup = new Uint8Array(256)\nfor (let i = 0; i < 64; i++) {\n    lookup[charset.charCodeAt(i)] = i\n}\n\nexport function encode(data: Uint8Array): string {\n    const byteLength = data.byteLength\n    const byteRemainder = byteLength % 3\n    const mainLength = byteLength - byteRemainder\n\n    const parts: string[] = []\n\n    let a: number\n    let b: number\n    let c: number\n    let d: number\n    let chunk: number\n\n    // Main loop deals with bytes in chunks of 3\n    for (let i = 0; i < mainLength; i += 3) {\n        // Combine the three bytes into a single integer\n        chunk = (data[i] << 16) | (data[i + 1] << 8) | data[i + 2]\n\n        // Use bitmasks to extract 6-bit segments from the triplet\n        a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\n        b = (chunk & 258048) >> 12 // 258048   = (2^6 - 1) << 12\n        c = (chunk & 4032) >> 6 // 4032     = (2^6 - 1) << 6\n        d = chunk & 63 // 63       =  2^6 - 1\n\n        // Convert the raw binary segments to the appropriate ASCII encoding\n        parts.push(charset[a] + charset[b] + charset[c] + charset[d])\n    }\n\n    // Deal with the remaining bytes\n    if (byteRemainder === 1) {\n        chunk = data[mainLength]\n\n        a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\n\n        // Set the 4 least significant bits to zero\n        b = (chunk & 3) << 4 // 3   = 2^2 - 1\n\n        parts.push(charset[a] + charset[b])\n    } else if (byteRemainder === 2) {\n        chunk = (data[mainLength] << 8) | data[mainLength + 1]\n\n        a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\n        b = (chunk & 1008) >> 4 // 1008  = (2^6 - 1) << 4\n\n        // Set the 2 least significant bits to zero\n        c = (chunk & 15) << 2 // 15    = 2^4 - 1\n\n        parts.push(charset[a] + charset[b] + charset[c])\n    }\n\n    return parts.join('')\n}\n\nexport function decode(input: string): Uint8Array {\n    const byteLength = input.length * 0.75\n    const data = new Uint8Array(byteLength)\n\n    let a: number\n    let b: number\n    let c: number\n    let d: number\n    let p = 0\n\n    for (let i = 0; i < input.length; i += 4) {\n        a = lookup[input.charCodeAt(i)]\n        b = lookup[input.charCodeAt(i + 1)]\n        c = lookup[input.charCodeAt(i + 2)]\n        d = lookup[input.charCodeAt(i + 3)]\n\n        data[p++] = (a << 2) | (b >> 4)\n        data[p++] = ((b & 15) << 4) | (c >> 2)\n        data[p++] = ((c & 3) << 6) | (d & 63)\n    }\n\n    return data\n}\n","import {Checksum256, Checksum256Type, TypeAlias, UInt8, Variant} from '@greymass/eosio'\n\n/** Chain ID aliases. */\nexport enum ChainName {\n    UNKNOWN = 0,\n    EOS = 1,\n    TELOS = 2,\n    JUNGLE = 3,\n    KYLIN = 4,\n    WORBLI = 5,\n    BOS = 6,\n    MEETONE = 7,\n    INSIGHTS = 8,\n    BEOS = 9,\n    WAX = 10,\n    PROTON = 11,\n    FIO = 12,\n}\n\nexport type ChainIdType = ChainId | ChainName | Checksum256Type\n\n@TypeAlias('chain_id')\nexport class ChainId extends Checksum256 {\n    static from<T extends typeof Checksum256>(this: T, value: ChainIdType): InstanceType<T> {\n        if (value instanceof this) {\n            return value as InstanceType<T>\n        }\n        if (typeof value === 'number') {\n            value = ChainIdLookup.get(value) as Checksum256Type\n            if (!value) {\n                throw new Error('Unknown chain id alias')\n            }\n        }\n        return super.from(value) as InstanceType<T>\n    }\n\n    get chainVariant(): ChainIdVariant {\n        const name = this.chainName\n        if (name !== ChainName.UNKNOWN) {\n            return ChainIdVariant.from(['chain_alias', name])\n        }\n        return ChainIdVariant.from(this)\n    }\n\n    get chainName(): ChainName {\n        const cid = this.hexString\n        for (const [n, id] of ChainIdLookup) {\n            if (id === cid) {\n                return n\n            }\n        }\n        return ChainName.UNKNOWN\n    }\n}\n\n@TypeAlias('chain_alias')\nexport class ChainAlias extends UInt8 {\n    value!: ChainName\n}\n\n@Variant.type('variant_id', [ChainAlias, ChainId])\nexport class ChainIdVariant extends Variant {\n    value!: ChainId | ChainAlias\n\n    get chainId(): ChainId {\n        if (this.value instanceof ChainId) {\n            return this.value\n        }\n        return ChainId.from(this.value.value)\n    }\n}\n\nconst ChainIdLookup = new Map<ChainName, Checksum256Type>([\n    [ChainName.EOS, 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'],\n    [ChainName.TELOS, '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11'],\n    [ChainName.JUNGLE, 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473'],\n    [ChainName.KYLIN, '5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191'],\n    [ChainName.WORBLI, '73647cde120091e0a4b85bced2f3cfdb3041e266cbbe95cee59b73235a1b3b6f'],\n    [ChainName.BOS, 'd5a3d18fbb3c084e3b1f3fa98c21014b5f3db536cc15d08f9f6479517c6a3d86'],\n    [ChainName.MEETONE, 'cfe6486a83bad4962f232d48003b1824ab5665c36778141034d75e57b956e422'],\n    [ChainName.INSIGHTS, 'b042025541e25a472bffde2d62edd457b7e70cee943412b1ea0f044f88591664'],\n    [ChainName.BEOS, 'b912d19a6abd2b1b05611ae5be473355d64d95aeff0c09bedc8c166cd6468fe4'],\n    [ChainName.WAX, '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4'],\n    [ChainName.PROTON, '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0'],\n    [ChainName.FIO, '21dcae42c0182200e93f954a074011f9048a7624c6fe81d3c9541a614a88bd1c'],\n])\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/** SigningRequest ABI and typedefs. */\n\nimport {\n    Action,\n    Bytes,\n    Name,\n    PermissionLevel,\n    Signature,\n    Struct,\n    Transaction,\n    TypeAlias,\n    UInt8,\n    Variant,\n} from '@greymass/eosio'\n\nimport {ChainIdVariant} from './chain-id'\n\n@TypeAlias('account_name')\nexport class AccountName extends Name {}\n\n@TypeAlias('permission_name')\nexport class PermissionName extends Name {}\n\n@Struct.type('identity')\nexport class IdentityV2 extends Struct {\n    @Struct.field(PermissionLevel, {optional: true}) permission?: PermissionLevel\n}\n\n@Struct.type('identity')\nexport class IdentityV3 extends Struct {\n    @Struct.field('name') scope!: Name\n    @Struct.field(PermissionLevel, {optional: true}) permission?: PermissionLevel\n}\n\n@Variant.type('variant_req', [Action, {type: Action, array: true}, Transaction, IdentityV2])\nexport class RequestVariantV2 extends Variant {\n    value!: Action | Action[] | Transaction | IdentityV2\n}\n\n@Variant.type('variant_req', [Action, {type: Action, array: true}, Transaction, IdentityV3])\nexport class RequestVariantV3 extends Variant {\n    value!: Action | Action[] | Transaction | IdentityV3\n}\n\n@TypeAlias('request_flags')\nexport class RequestFlags extends UInt8 {\n    static broadcast = 1 << 0\n    static background = 1 << 1\n\n    get broadcast() {\n        return (this.value & RequestFlags.broadcast) !== 0\n    }\n    set broadcast(enabled: boolean) {\n        this.setFlag(RequestFlags.broadcast, enabled)\n    }\n\n    get background() {\n        return (this.value & RequestFlags.background) !== 0\n    }\n    set background(enabled: boolean) {\n        this.setFlag(RequestFlags.background, enabled)\n    }\n\n    private setFlag(flag: number, enabled: boolean) {\n        if (enabled) {\n            this.value |= flag\n        } else {\n            this.value &= ~flag\n        }\n    }\n}\n\n@Struct.type('info_pair')\nexport class InfoPair extends Struct {\n    @Struct.field('string') key!: string\n    @Struct.field('bytes') value!: Bytes\n}\n\n@Struct.type('signing_request')\nexport class RequestDataV2 extends Struct {\n    @Struct.field(ChainIdVariant) chain_id!: ChainIdVariant\n    @Struct.field(RequestVariantV2) req!: RequestVariantV2\n    @Struct.field(RequestFlags) flags!: RequestFlags\n    @Struct.field('string') callback!: string\n    @Struct.field(InfoPair, {array: true}) info!: InfoPair[]\n}\n\n@Struct.type('signing_request')\nexport class RequestDataV3 extends Struct {\n    @Struct.field(ChainIdVariant) chain_id!: ChainIdVariant\n    @Struct.field(RequestVariantV3) req!: RequestVariantV3\n    @Struct.field(RequestFlags) flags!: RequestFlags\n    @Struct.field('string') callback!: string\n    @Struct.field(InfoPair, {array: true}) info!: InfoPair[]\n}\n\n@Struct.type('request_signature')\nexport class RequestSignature extends Struct {\n    @Struct.field('name') signer!: Name\n    @Struct.field('signature') signature!: Signature\n}\n","/**\n * EOSIO Signing Request (ESR).\n */\n\nimport {\n    ABI,\n    ABIDecoder,\n    ABIDef,\n    ABIEncoder,\n    ABISerializable,\n    ABISerializableType,\n    Action,\n    AnyAction,\n    AnyTransaction,\n    Bytes,\n    BytesType,\n    Checksum256,\n    Name,\n    NameType,\n    PermissionLevel,\n    PermissionLevelType,\n    Serializer,\n    Signature,\n    SignatureType,\n    TimePointSec,\n    TimePointType,\n    Transaction,\n    TransactionExtension,\n    UInt16,\n    UInt16Type,\n    UInt32,\n    UInt32Type,\n    UInt8,\n    VarUInt,\n} from '@greymass/eosio'\n\nimport * as base64u from './base64u'\nimport {ChainAlias, ChainId, ChainIdType, ChainIdVariant, ChainName} from './chain-id'\nimport {\n    IdentityV2,\n    IdentityV3,\n    InfoPair,\n    RequestDataV2,\n    RequestDataV3,\n    RequestFlags,\n    RequestSignature,\n} from './abi'\n\n/** Current supported protocol version, backwards compatible with version 2. */\nexport const ProtocolVersion = 3\n\n/** Interface that should be implemented by abi providers. */\nexport interface AbiProvider {\n    /**\n     * Return a promise that resolves to an abi object for the given account name,\n     * e.g. the result of a rpc call to chain/get_abi.\n     */\n    getAbi: (account: Name) => Promise<ABIDef>\n}\n\n/** Interface that should be implemented by zlib implementations. */\nexport interface ZlibProvider {\n    /** Deflate data w/o adding zlib header. */\n    deflateRaw: (data: Uint8Array) => Uint8Array\n    /** Inflate data w/o requiring zlib header. */\n    inflateRaw: (data: Uint8Array) => Uint8Array\n}\n\n/** Interface that should be implemented by signature providers. */\nexport interface SignatureProvider {\n    /** Sign 32-byte message and return signer name and signature string. */\n    sign: (message: Checksum256) => {signer: NameType; signature: SignatureType}\n}\n\n/**\n * The callback payload sent to background callbacks.\n */\nexport interface CallbackPayload {\n    /** The first signature. */\n    sig: string\n    /** Transaction ID as HEX-encoded string. */\n    tx: string\n    /** Block number hint (only present if transaction was broadcast). */\n    bn?: string\n    /** Signer authority, aka account name. */\n    sa: string\n    /** Signer permission, e.g. \"active\". */\n    sp: string\n    /** Reference block num used when resolving request. */\n    rbn: string\n    /** Reference block id used when resolving request. */\n    rid: string\n    /** The originating signing request packed as a uri string. */\n    req: string\n    /** Expiration time used when resolving request. */\n    ex: string\n    /** All signatures 0-indexed as `sig0`, `sig1`, etc. */\n    [sig0: string]: string | undefined\n}\n\n/**\n * Context used to resolve a callback.\n * Compatible with the JSON response from a `push_transaction` call.\n */\nexport interface ResolvedCallback {\n    /** The URL to hit. */\n    url: string\n    /**\n     * Whether to run the request in the background. For a https url this\n     * means POST in the background instead of a GET redirect.\n     */\n    background: boolean\n    /**\n     * The callback payload as a object that should be encoded to JSON\n     * and POSTed to background callbacks.\n     */\n    payload: CallbackPayload\n}\n\n/**\n * Context used to resolve a transaction.\n * Compatible with the JSON response from a `get_block` call.\n */\nexport interface TransactionContext {\n    /** Timestamp expiration will be derived from. */\n    timestamp?: TimePointType\n    /**\n     * How many seconds in the future to set expiration when deriving from timestamp.\n     * Defaults to 60 seconds if unset.\n     */\n    expire_seconds?: UInt32Type\n    /** Block number ref_block_num will be derived from. */\n    block_num?: UInt32Type\n    /** Reference block number, takes precedence over block_num if both is set. */\n    ref_block_num?: UInt16Type\n    /** Reference block prefix. */\n    ref_block_prefix?: UInt32Type\n    /** Expiration timestamp, takes precedence over timestamp and expire_seconds if set. */\n    expiration?: TimePointType\n    /** Chain ID to resolve for, required for multi-chain requests. */\n    chainId?: ChainIdType\n}\n\n/**\n * The placeholder name: `............1` aka `uint64(1)`.\n * If used in action data will be resolved to current signer.\n * If used in as an authorization permission will be resolved to\n * the signers permission level.\n *\n * Example action:\n * ```\n * { account: \"eosio.token\",\n *   name: \"transfer\",\n *   authorization: [{actor: \"............1\", permission: \"............1\"}],\n *   data: {\n *     from: \"............1\",\n *     to: \"bar\",\n *     quantity: \"42.0000 EOS\",\n *     memo: \"Don't panic\" }}\n * ```\n * When signed by `foo@active` would resolve to:\n * ```\n * { account: \"eosio.token\",\n *   name: \"transfer\",\n *   authorization: [{actor: \"foo\", permission: \"active\"}],\n *   data: {\n *     from: \"foo\",\n *     to: \"bar\",\n *     quantity: \"42.0000 EOS\",\n *     memo: \"Don't panic\" }}\n * ```\n */\nexport const PlaceholderName = Name.from('............1') // aka uint64(1)\n\n/** Placeholder that will resolve to signer permission name. */\nexport const PlaceholderPermission = Name.from('............2') // aka uint64(2)\n\nexport const PlaceholderAuth = PermissionLevel.from({\n    actor: PlaceholderName,\n    permission: PlaceholderPermission,\n})\n\nexport interface ResolvedAction {\n    /** The account (a.k.a. contract) to run action on. */\n    account: Name\n    /** The name of the action. */\n    name: Name\n    /** The permissions authorizing the action. */\n    authorization: PermissionLevel[]\n    /** The decoded action data. */\n    data: Record<string, ABISerializable>\n}\n\nexport interface ResolvedTransaction {\n    /** The time at which a transaction expires. */\n    expiration: TimePointSec\n    /** *Specifies a block num in the last 2^16 blocks. */\n    ref_block_num: UInt16\n    /** Specifies the lower 32 bits of the block id. */\n    ref_block_prefix: UInt32\n    /** Upper limit on total network bandwidth (in 8 byte words) billed for this transaction. */\n    max_net_usage_words: VarUInt\n    /** Upper limit on the total CPU time billed for this transaction. */\n    max_cpu_usage_ms: UInt8\n    /** Number of seconds to delay this transaction for during which it may be canceled. */\n    delay_sec: VarUInt\n    /** The context free actions in the transaction. */\n    context_free_actions: ResolvedAction[]\n    /** The actions in the transaction. */\n    actions: ResolvedAction[]\n    /** Transaction extensions. */\n    transaction_extensions: TransactionExtension[]\n}\n\nexport type CallbackType = string | {url: string; background: boolean}\n\ninterface SigningRequestCommonArguments {\n    /**\n     * Chain ID to use, can be set to `null` for a multi-chain request.\n     * Defaults to EOS if omitted.\n     */\n    chainId?: ChainIdType | null\n    /**\n     * Chain IDs to constrain a multi-chain request to.\n     * Only considered if `chainId` is explicitly set to `null.\n     */\n    chainIds?: ChainIdType[]\n    /** Optional metadata to pass along with the request. */\n    info?: {[key: string]: Bytes | ABISerializable}\n}\n\nexport interface SigningRequestCreateArguments extends SigningRequestCommonArguments {\n    /** Single action to create request with. */\n    action?: AnyAction\n    /** Multiple actions to create request with. */\n    actions?: AnyAction[]\n    /**\n     * Full or partial transaction to create request with.\n     * If TAPoS info is omitted it will be filled in when resolving the request.\n     */\n    transaction?: Partial<AnyTransaction>\n    /** Create an identity request. */\n    identity?: {\n        scope?: NameType\n        permission?: PermissionLevelType\n    }\n    /** Whether wallet should broadcast tx, defaults to true. */\n    broadcast?: boolean\n    /**\n     * Optional callback URL the signer should hit after\n     * broadcasting or signing. Passing a string means background = false.\n     */\n    callback?: CallbackType\n}\n\nexport interface SigningRequestCreateIdentityArguments extends SigningRequestCommonArguments {\n    /**\n     * Callback where the identity should be delivered.\n     */\n    callback: CallbackType\n    /**\n     * Requested account name of identity.\n     * Defaults to placeholder (any identity) if omitted.\n     */\n    account?: NameType\n    /**\n     * Requested account permission.\n     * Defaults to placeholder (any permission) if omitted.\n     */\n    permission?: NameType\n    /**\n     * Scope for the request.\n     */\n    scope?: NameType\n}\n\nexport interface SigningRequestEncodingOptions {\n    /** Optional zlib, if provided the request will be compressed when encoding. */\n    zlib?: ZlibProvider\n    /** Abi provider, required if the arguments contain un-encoded actions. */\n    abiProvider?: AbiProvider\n    /** Optional signature provider, will be used to create a request signature if provided. */\n    signatureProvider?: SignatureProvider\n}\n\nexport type AbiMap = Map<string, ABI>\n\nexport class SigningRequest {\n    /** Return the identity ABI for given version. */\n    private static identityAbi(version: number) {\n        const abi = Serializer.synthesize(this.identityType(version))\n        abi.actions = [{name: 'identity', type: 'identity', ricardian_contract: ''}]\n        return abi\n    }\n\n    /** Return the ABISerializableType identity type for given version. */\n    private static identityType(version: number): typeof IdentityV2 | typeof IdentityV3 {\n        return version === 2 ? IdentityV2 : IdentityV3\n    }\n\n    /** Return the ABISerializableType storage type for given version. */\n    private static storageType(version: number): typeof RequestDataV3 | typeof RequestDataV2 {\n        return version === 2 ? RequestDataV2 : RequestDataV3\n    }\n\n    /** Create a new signing request. */\n    public static async create(\n        args: SigningRequestCreateArguments,\n        options: SigningRequestEncodingOptions = {}\n    ) {\n        let actions: AnyAction[]\n        if (args.action) {\n            actions = [args.action]\n        } else if (args.actions) {\n            actions = args.actions\n        } else if (args.transaction) {\n            actions = args.transaction.actions || []\n        } else {\n            actions = []\n        }\n        const requiredAbis = actions\n            .filter(\n                (action) =>\n                    !Bytes.isBytes(action.data) &&\n                    (action.data.constructor as any).abiName === undefined\n            )\n            .map((action) => Name.from(action.account))\n        const abis: Record<string, ABIDef> = {}\n        if (requiredAbis.length > 0) {\n            const provider = options.abiProvider\n            if (!provider) {\n                throw new Error('Missing abi provider')\n            }\n            const accountAbis = await Promise.all(\n                requiredAbis.map((account) => provider.getAbi(account))\n            )\n            for (const [idx, abi] of accountAbis.entries()) {\n                abis[requiredAbis[idx].toString()] = abi\n            }\n        }\n        return this.createSync(args, options, abis)\n    }\n\n    /**\n     * Synchronously create a new signing request.\n     * @throws If an un-encoded action with no abi def is encountered.\n     */\n    public static createSync(\n        args: SigningRequestCreateArguments,\n        options: SigningRequestEncodingOptions = {},\n        abis: Record<string, ABIDef> = {}\n    ) {\n        let version = 2\n        const data: any = {}\n        const encode = (action: AnyAction) => encodeAction(action, abis)\n\n        // multi-chain requests requires version 3\n        if (args.chainId === null) {\n            version = 3\n        }\n\n        // set the request data\n        if (args.identity !== undefined) {\n            if (args.identity.scope) {\n                version = 3\n            }\n            data.req = ['identity', this.identityType(version).from(args.identity)]\n        } else if (args.action && !args.actions && !args.transaction) {\n            data.req = ['action', encode(args.action)]\n        } else if (args.actions && !args.action && !args.transaction) {\n            if (args.actions.length === 1) {\n                data.req = ['action', encode(args.actions[0])]\n            } else {\n                data.req = ['action[]', args.actions.map(encode)]\n            }\n        } else if (args.transaction && !args.action && !args.actions) {\n            const tx = args.transaction\n            // set default values if missing\n            if (tx.expiration === undefined) {\n                tx.expiration = '1970-01-01T00:00:00.000'\n            }\n            if (tx.ref_block_num === undefined) {\n                tx.ref_block_num = 0\n            }\n            if (tx.ref_block_prefix === undefined) {\n                tx.ref_block_prefix = 0\n            }\n            if (tx.context_free_actions === undefined) {\n                tx.context_free_actions = []\n            }\n            if (tx.transaction_extensions === undefined) {\n                tx.transaction_extensions = []\n            }\n            if (tx.delay_sec === undefined) {\n                tx.delay_sec = 0\n            }\n            if (tx.max_cpu_usage_ms === undefined) {\n                tx.max_cpu_usage_ms = 0\n            }\n            if (tx.max_net_usage_words === undefined) {\n                tx.max_net_usage_words = 0\n            }\n            if (tx.actions === undefined) {\n                tx.actions = []\n            }\n            if (tx.context_free_actions === undefined) {\n                tx.context_free_actions = []\n            }\n            // encode actions if needed\n            tx.actions = tx.actions.map(encode)\n            data.req = ['transaction', tx]\n        } else {\n            throw new TypeError(\n                'Invalid arguments: Must have exactly one of action, actions or transaction'\n            )\n        }\n\n        // set the chain id\n        if (args.chainId === null) {\n            data.chain_id = ChainIdVariant.from(['chain_alias', 0])\n        } else {\n            data.chain_id = ChainId.from(args.chainId || ChainName.EOS).chainVariant\n        }\n\n        // request flags and callback\n        const flags = RequestFlags.from(0)\n        let callback = ''\n        flags.broadcast = args.broadcast !== undefined ? args.broadcast : data.req[0] !== 'identity'\n        if (typeof args.callback === 'string') {\n            callback = args.callback\n        } else if (typeof args.callback === 'object') {\n            callback = args.callback.url\n            flags.background = args.callback.background || false\n        }\n        data.flags = flags\n        data.callback = callback\n\n        // info pairs\n        data.info = []\n        if (typeof args.info === 'object') {\n            for (const key in args.info) {\n                const isOwn = Object.prototype.hasOwnProperty.call(args.info, key)\n                if (isOwn) {\n                    let value = args.info[key]\n                    if (!(value instanceof Bytes)) {\n                        value = Serializer.encode({object: value})\n                    }\n                    data.info.push({key, value})\n                }\n            }\n        }\n        if (args.chainIds && args.chainId === null) {\n            const ids = args.chainIds.map((id) => ChainId.from(id).chainVariant)\n            data.info.push({\n                key: 'chain_ids',\n                value: Serializer.encode({object: ids, type: {type: ChainIdVariant, array: true}}),\n            })\n        }\n\n        const req = new SigningRequest(\n            version,\n            this.storageType(version).from(data),\n            options.zlib,\n            options.abiProvider\n        )\n\n        // sign the request if given a signature provider\n        if (options.signatureProvider) {\n            req.sign(options.signatureProvider)\n        }\n\n        return req\n    }\n\n    /** Creates an identity request. */\n    public static identity(\n        args: SigningRequestCreateIdentityArguments,\n        options: SigningRequestEncodingOptions = {}\n    ) {\n        let permission: PermissionLevelType | undefined = {\n            actor: args.account || PlaceholderName,\n            permission: args.permission || PlaceholderPermission,\n        }\n        if (\n            permission.actor === PlaceholderName &&\n            permission.permission === PlaceholderPermission\n        ) {\n            permission = undefined\n        }\n        return this.createSync(\n            {\n                ...args,\n                identity: {\n                    permission,\n                    scope: args.scope,\n                },\n                broadcast: false,\n            },\n            options\n        )\n    }\n\n    /**\n     * Create a request from a chain id and serialized transaction.\n     * @param chainId The chain id where the transaction is valid.\n     * @param serializedTransaction The serialized transaction.\n     * @param options Creation options.\n     */\n    public static fromTransaction(\n        chainId: ChainIdType,\n        serializedTransaction: BytesType,\n        options: SigningRequestEncodingOptions = {}\n    ) {\n        const id = ChainId.from(chainId)\n        serializedTransaction = Bytes.from(serializedTransaction)\n\n        const encoder = new ABIEncoder()\n        encoder.writeByte(2) // header\n        encoder.writeArray(Serializer.encode({object: id.chainVariant}).array)\n        encoder.writeByte(2) // transaction variant\n        encoder.writeArray(Bytes.from(serializedTransaction).array)\n        encoder.writeByte(RequestFlags.broadcast)\n        encoder.writeByte(0) // callback\n        encoder.writeByte(0) // info\n\n        return SigningRequest.fromData(encoder.getData(), options)\n    }\n\n    /** Creates a signing request from encoded `esr:` uri string. */\n    public static from(uri: string, options: SigningRequestEncodingOptions = {}) {\n        if (typeof uri !== 'string') {\n            throw new Error('Invalid request uri')\n        }\n        const [scheme, path] = uri.split(':')\n        if (scheme !== 'esr' && scheme !== 'web+esr') {\n            throw new Error('Invalid scheme')\n        }\n        const data = base64u.decode(path.startsWith('//') ? path.slice(2) : path)\n        return SigningRequest.fromData(data, options)\n    }\n\n    public static fromData(data: BytesType, options: SigningRequestEncodingOptions = {}) {\n        data = Bytes.from(data)\n        const header = data.array[0]\n        const version = header & ~(1 << 7)\n        if (version !== 2 && version !== 3) {\n            throw new Error('Unsupported protocol version')\n        }\n        let payload = data.droppingFirst(1)\n        if ((header & (1 << 7)) !== 0) {\n            if (!options.zlib) {\n                throw new Error('Compressed URI needs zlib')\n            }\n            payload = Bytes.from(options.zlib.inflateRaw(payload.array))\n        }\n        const decoder = new ABIDecoder(payload.array)\n        const req = Serializer.decode({data: decoder, type: this.storageType(version)})\n        let sig: RequestSignature | undefined\n        if (decoder.canRead()) {\n            sig = Serializer.decode({data: decoder, type: RequestSignature}) as RequestSignature\n        }\n        return new SigningRequest(version, req, options.zlib, options.abiProvider, sig)\n    }\n\n    /** The signing request version. */\n    public version: number\n\n    /** The raw signing request data. */\n    public data: RequestDataV2 | RequestDataV3\n\n    /** The request signature. */\n    public signature?: RequestSignature\n\n    private zlib?: ZlibProvider\n    private abiProvider?: AbiProvider\n\n    /**\n     * Create a new signing request.\n     * Normally not used directly, see the `create` and `from` class methods.\n     */\n    constructor(\n        version: number,\n        data: RequestDataV2 | RequestDataV3,\n        zlib?: ZlibProvider,\n        abiProvider?: AbiProvider,\n        signature?: RequestSignature\n    ) {\n        if (data.flags.broadcast && data.req.variantName === 'identity') {\n            throw new Error('Invalid request (identity request cannot be broadcast)')\n        }\n        this.version = version\n        this.data = data\n        this.zlib = zlib\n        this.abiProvider = abiProvider\n        this.signature = signature\n    }\n\n    /**\n     * Sign the request, mutating.\n     * @param signatureProvider The signature provider that provides a signature for the signer.\n     */\n    public sign(signatureProvider: SignatureProvider) {\n        const message = this.getSignatureDigest()\n        this.signature = RequestSignature.from(signatureProvider.sign(message))\n    }\n\n    /**\n     * Get the signature digest for this request.\n     */\n    public getSignatureDigest() {\n        // protocol version + utf8 \"request\"\n        const prefix = [this.version, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74]\n        return new Bytes().appending(prefix).appending(this.getData()).sha256Digest\n    }\n\n    /**\n     * Set the signature data for this request, mutating.\n     * @param signer Account name of signer.\n     * @param signature The signature string.\n     */\n    public setSignature(signer: string, signature: string) {\n        this.signature = RequestSignature.from({signer, signature})\n    }\n\n    /**\n     * Set the request callback, mutating.\n     * @param url Where the callback should be sent.\n     * @param background Whether the callback should be sent in the background.\n     */\n    public setCallback(url: string, background: boolean) {\n        this.data.callback = url\n        this.data.flags.background = background\n    }\n\n    /**\n     * Set broadcast flag.\n     * @param broadcast Whether the transaction should be broadcast by receiver.\n     */\n    public setBroadcast(broadcast: boolean) {\n        this.data.flags.broadcast = broadcast\n    }\n\n    /**\n     * Encode this request into an `esr:` uri.\n     * @argument compress Whether to compress the request data using zlib,\n     *                    defaults to true if omitted and zlib is present;\n     *                    otherwise false.\n     * @argument slashes Whether add slashes after the protocol scheme, i.e. `esr://`.\n     *                   Defaults to true.\n     * @returns An esr uri string.\n     */\n    public encode(compress?: boolean, slashes?: boolean): string {\n        const shouldCompress = compress !== undefined ? compress : this.zlib !== undefined\n        if (shouldCompress && this.zlib === undefined) {\n            throw new Error('Need zlib to compress')\n        }\n        let header = this.version\n        const data = this.getData()\n        const sigData = this.getSignatureData()\n        let array = new Uint8Array(data.byteLength + sigData.byteLength)\n        array.set(data, 0)\n        array.set(sigData, data.byteLength)\n        if (shouldCompress) {\n            const deflated = this.zlib!.deflateRaw(array)\n            if (array.byteLength > deflated.byteLength) {\n                header |= 1 << 7\n                array = deflated\n            }\n        }\n        const out = new Uint8Array(1 + array.byteLength)\n        out[0] = header\n        out.set(array, 1)\n        let scheme = 'esr:'\n        if (slashes !== false) {\n            scheme += '//'\n        }\n        return scheme + base64u.encode(out)\n    }\n\n    /** Get the request data without header or signature. */\n    public getData(): Uint8Array {\n        return Serializer.encode({object: this.data}).array\n    }\n\n    /** Get signature data, returns an empty array if request is not signed. */\n    public getSignatureData(): Uint8Array {\n        if (!this.signature) {\n            return new Uint8Array(0)\n        }\n        return Serializer.encode({object: this.signature}).array\n    }\n\n    /** ABI definitions required to resolve request. */\n    public getRequiredAbis() {\n        return this.getRawActions()\n            .filter((action) => !isIdentity(action))\n            .map((action) => action.account)\n            .filter((value, index, self) => self.indexOf(value) === index)\n    }\n\n    /** Whether TaPoS values are required to resolve request. */\n    public requiresTapos() {\n        const tx = this.getRawTransaction()\n        return !this.isIdentity() && !hasTapos(tx)\n    }\n\n    /** Resolve required ABI definitions. */\n    public async fetchAbis(abiProvider?: AbiProvider): Promise<AbiMap> {\n        const required = this.getRequiredAbis()\n        if (required.length > 0) {\n            const provider = abiProvider || this.abiProvider\n            if (!provider) {\n                throw new Error('Missing ABI provider')\n            }\n            const abis = new Map<string, any>()\n            await Promise.all(\n                required.map(async (account) => {\n                    abis.set(account.toString(), ABI.from(await provider.getAbi(account)))\n                })\n            )\n            return abis\n        } else {\n            return new Map()\n        }\n    }\n\n    /**\n     * Decode raw actions actions to object representations.\n     * @param abis ABI defenitions required to decode all actions.\n     * @param signer Placeholders in actions will be resolved to signer if set.\n     */\n    public resolveActions(abis: AbiMap, signer?: PermissionLevelType): ResolvedAction[] {\n        return this.getRawActions().map((rawAction) => {\n            let abi: ABI\n            if (isIdentity(rawAction)) {\n                abi = (this.constructor as typeof SigningRequest).identityAbi(this.version)\n            } else {\n                const rawAbi = abis.get(rawAction.account.toString())\n                if (!rawAbi) {\n                    throw new Error(`Missing ABI definition for ${rawAction.account}`)\n                }\n                abi = ABI.from(rawAbi)\n            }\n            const type = abi.getActionType(rawAction.name)\n            if (!type) {\n                throw new Error(\n                    `Missing type for action ${rawAction.account}:${rawAction.name} in ABI`\n                )\n            }\n            let data = rawAction.decodeData(abi) as Record<string, ABISerializable>\n            let authorization = rawAction.authorization\n            if (signer) {\n                const signerPerm = PermissionLevel.from(signer)\n                const resolve = (value: any): any => {\n                    if (value instanceof Name) {\n                        if (value.equals(PlaceholderName)) {\n                            return signerPerm.actor\n                        } else if (value.equals(PlaceholderPermission)) {\n                            return signerPerm.permission\n                        } else {\n                            return value\n                        }\n                    } else if (Array.isArray(value)) {\n                        return value.map(resolve)\n                    } else if (typeof value === 'object' && value !== null) {\n                        for (const key of Object.keys(value)) {\n                            value[key] = resolve(value[key])\n                        }\n                        return value\n                    } else {\n                        return value\n                    }\n                }\n                data = resolve(data)\n                authorization = authorization.map((auth) => {\n                    let {actor, permission} = auth\n                    if (actor.equals(PlaceholderName)) {\n                        actor = signerPerm.actor\n                    }\n                    if (permission.equals(PlaceholderPermission)) {\n                        permission = signerPerm.permission\n                    }\n                    // backwards compatibility, actor placeholder will also resolve to permission when used in auth\n                    if (permission.equals(PlaceholderName)) {\n                        permission = signerPerm.permission\n                    }\n                    return PermissionLevel.from({actor, permission})\n                })\n            }\n            return {\n                ...rawAction,\n                authorization,\n                data,\n            }\n        })\n    }\n\n    public resolveTransaction(\n        abis: AbiMap,\n        signer: PermissionLevelType,\n        ctx: TransactionContext = {}\n    ) {\n        const tx = this.getRawTransaction()\n        if (!this.isIdentity() && !hasTapos(tx)) {\n            if (\n                ctx.expiration !== undefined &&\n                ctx.ref_block_num !== undefined &&\n                ctx.ref_block_prefix !== undefined\n            ) {\n                tx.expiration = TimePointSec.from(ctx.expiration)\n                tx.ref_block_num = UInt16.from(ctx.ref_block_num)\n                tx.ref_block_prefix = UInt32.from(ctx.ref_block_prefix)\n            } else if (\n                ctx.block_num !== undefined &&\n                ctx.ref_block_prefix !== undefined &&\n                ctx.timestamp !== undefined\n            ) {\n                tx.expiration = expirationTime(ctx.timestamp, ctx.expire_seconds)\n                tx.ref_block_num = UInt16.from(ctx.block_num)\n                tx.ref_block_prefix = UInt32.from(ctx.ref_block_prefix)\n            } else {\n                throw new Error(\n                    'Invalid transaction context, need either a reference block or explicit TaPoS values'\n                )\n            }\n        } else if (this.isIdentity() && this.version > 2) {\n            // From ESR version 3 all identity requests have expiration\n            tx.expiration = ctx.expiration\n                ? TimePointSec.from(ctx.expiration)\n                : expirationTime(ctx.timestamp, ctx.expire_seconds)\n        }\n        const actions = this.resolveActions(abis, signer)\n        // TODO: resolve context free actions\n        const context_free_actions = (tx.context_free_actions as unknown) as ResolvedAction[]\n        return {...tx, context_free_actions, actions} as ResolvedTransaction\n    }\n\n    public resolve(abis: AbiMap, signer: PermissionLevelType, ctx: TransactionContext = {}) {\n        const tx = this.resolveTransaction(abis, signer, ctx)\n        const actions = tx.actions.map((action) => {\n            let abi: ABI | undefined\n            if (isIdentity(action)) {\n                abi = (this.constructor as typeof SigningRequest).identityAbi(this.version)\n            } else {\n                abi = abis.get(action.account.toString())\n            }\n            if (!abi) {\n                throw new Error(`Missing ABI definition for ${action.account}`)\n            }\n            const type = abi.getActionType(action.name)!\n            const data = Serializer.encode({object: action.data, type, abi})\n            return Action.from({...action, data})\n        })\n        const transaction = Transaction.from({...tx, actions})\n        let chainId: ChainId\n        if (this.isMultiChain()) {\n            if (!ctx.chainId) {\n                throw new Error('Missing chosen chain ID for multi-chain request')\n            }\n            chainId = ChainId.from(ctx.chainId)\n            const ids = this.getChainIds()\n            if (ids && !ids.some((id) => chainId.equals(id))) {\n                throw new Error('Trying to resolve for chain ID not defined in request')\n            }\n        } else {\n            chainId = this.getChainId()\n        }\n        return new ResolvedSigningRequest(\n            this,\n            PermissionLevel.from(signer),\n            transaction,\n            tx,\n            chainId\n        )\n    }\n\n    /**\n     * Get the id of the chain where this request is valid.\n     * @returns The 32-byte chain id as hex encoded string.\n     */\n    public getChainId(): ChainId {\n        return this.data.chain_id.chainId\n    }\n\n    /**\n     * Chain IDs this request is valid for, only valid for multi chain requests. Value of `null` when `isMultiChain` is true denotes any chain.\n     */\n    public getChainIds(): ChainId[] | null {\n        if (!this.isMultiChain()) {\n            return null\n        }\n        const ids = this.getInfoKey('chain_ids', {type: ChainIdVariant, array: true}) as\n            | ChainIdVariant[]\n            | undefined\n        if (ids) {\n            return ids.map((id) => id.chainId)\n        }\n        return null\n    }\n\n    /**\n     * Set chain IDs this request is valid for, only considered for multi chain requests.\n     */\n    public setChainIds(ids: ChainIdType[]) {\n        const value = ids.map((id) => ChainId.from(id).chainVariant)\n        this.setInfoKey('chain_ids', value, {type: ChainIdVariant, array: true})\n    }\n\n    /**\n     * True if chainId is set to chain alias `0` which indicates that the request is valid for any chain.\n     */\n    public isMultiChain(): boolean {\n        return (\n            this.data.chain_id.variantIdx === 0 &&\n            (this.data.chain_id.value as ChainAlias).value === ChainName.UNKNOWN\n        )\n    }\n\n    /** Return the actions in this request with action data encoded. */\n    public getRawActions(): Action[] {\n        const req = this.data.req\n        switch (req.variantName) {\n            case 'action':\n                return [req.value as Action]\n            case 'action[]':\n                return req.value as Action[]\n            case 'identity': {\n                if (this.version === 2) {\n                    const id = req.value as IdentityV2\n                    let data: BytesType = '0101000000000000000200000000000000' // placeholder permission\n                    let authorization: PermissionLevelType[] = [PlaceholderAuth]\n                    if (id.permission) {\n                        data = Serializer.encode({object: id})\n                        authorization = [id.permission]\n                    }\n                    return [\n                        Action.from({\n                            account: '',\n                            name: 'identity',\n                            authorization,\n                            data,\n                        }),\n                    ]\n                } else {\n                    // eslint-disable-next-line prefer-const\n                    let {scope, permission} = req.value as IdentityV3\n                    if (!permission) {\n                        permission = PlaceholderAuth\n                    }\n                    const data = Serializer.encode({object: {scope, permission}, type: IdentityV3})\n                    return [\n                        Action.from({\n                            account: '',\n                            name: 'identity',\n                            authorization: [permission],\n                            data,\n                        }),\n                    ]\n                }\n            }\n            case 'transaction':\n                return (req.value as Transaction).actions\n            default:\n                throw new Error('Invalid signing request data')\n        }\n    }\n\n    /** Unresolved transaction. */\n    public getRawTransaction(): Transaction {\n        const req = this.data.req\n        switch (req.variantName) {\n            case 'transaction':\n                return Transaction.from({...(req.value as Transaction)})\n            case 'action':\n            case 'action[]':\n            case 'identity':\n                return Transaction.from({\n                    actions: this.getRawActions(),\n                    context_free_actions: [],\n                    transaction_extensions: [],\n                    expiration: '1970-01-01T00:00:00.000',\n                    ref_block_num: 0,\n                    ref_block_prefix: 0,\n                    max_cpu_usage_ms: 0,\n                    max_net_usage_words: 0,\n                    delay_sec: 0,\n                })\n            default:\n                throw new Error('Invalid signing request data')\n        }\n    }\n\n    /** Whether the request is an identity request. */\n    public isIdentity(): boolean {\n        return this.data.req.variantName === 'identity'\n    }\n\n    /** Whether the request should be broadcast by signer. */\n    public shouldBroadcast(): boolean {\n        if (this.isIdentity()) {\n            return false\n        }\n        return this.data.flags.broadcast\n    }\n\n    /**\n     * Present if the request is an identity request and requests a specific account.\n     * @note This returns `nil` unless a specific identity has been requested,\n     *       use `isIdentity` to check id requests.\n     */\n    public getIdentity(): Name | null {\n        if (!this.isIdentity()) {\n            return null\n        }\n        const id = this.data.req.value as IdentityV2\n        if (id.permission && !id.permission.actor.equals(PlaceholderName)) {\n            return id.permission.actor\n        }\n        return null\n    }\n\n    /**\n     * Present if the request is an identity request and requests a specific permission.\n     * @note This returns `nil` unless a specific permission has been requested,\n     *       use `isIdentity` to check id requests.\n     */\n    public getIdentityPermission(): Name | null {\n        if (!this.isIdentity()) {\n            return null\n        }\n        const id = this.data.req.value as IdentityV2\n        if (id.permission && !id.permission.permission.equals(PlaceholderPermission)) {\n            return id.permission.permission\n        }\n        return null\n    }\n\n    /**\n     * Present if the request is an identity request and requests a specific permission.\n     * @note This returns `nil` unless a specific permission has been requested,\n     *       use `isIdentity` to check id requests.\n     */\n    public getIdentityScope(): Name | null {\n        if (!this.isIdentity() || this.version <= 2) {\n            return null\n        }\n        const id = this.data.req.value as IdentityV3\n        return id.scope\n    }\n\n    /** Get raw info dict */\n    public getRawInfo(): {[key: string]: Bytes} {\n        const rv: {[key: string]: Bytes} = {}\n        for (const {key, value} of this.data.info) {\n            rv[key] = value\n        }\n        return rv\n    }\n\n    public getRawInfoKey(key: string) {\n        const pair = this.data.info.find((pair) => pair.key === key)\n        if (pair) {\n            return pair.value\n        }\n    }\n\n    public setRawInfoKey(key: string, value: BytesType) {\n        let pair = this.data.info.find((pair) => pair.key === key)\n        if (!pair) {\n            pair = InfoPair.from({key, value})\n            this.data.info.push(pair)\n        } else {\n            pair.value = Bytes.from(value)\n        }\n    }\n\n    /** Set a metadata key. */\n    public setInfoKey(key: string, object: any, type?: ABISerializableType) {\n        this.setRawInfoKey(key, Serializer.encode({object, type}))\n    }\n\n    /** Get a metadata key. */\n    public getInfoKey<T extends ABISerializable>(key: string, type: ABISerializableType) {\n        const data = this.getRawInfoKey(key)\n        if (data) {\n            return Serializer.decode({data, type}) as T\n        }\n    }\n\n    /** Return a deep copy of this request. */\n    public clone(): SigningRequest {\n        let signature: RequestSignature | undefined\n        if (this.signature) {\n            signature = RequestSignature.from(JSON.parse(JSON.stringify(this.signature)))\n        }\n        const RequestData = (this.constructor as typeof SigningRequest).storageType(this.version)\n        const data = RequestData.from(JSON.parse(JSON.stringify(this.data)))\n        return new SigningRequest(this.version, data, this.zlib, this.abiProvider, signature)\n    }\n\n    // Convenience methods.\n\n    public toString() {\n        return this.encode()\n    }\n\n    public toJSON() {\n        return this.encode()\n    }\n}\n\nexport class ResolvedSigningRequest {\n    /** Recreate a resolved request from a callback payload. */\n    static async fromPayload(\n        payload: CallbackPayload,\n        options: SigningRequestEncodingOptions = {}\n    ): Promise<ResolvedSigningRequest> {\n        const request = SigningRequest.from(payload.req, options)\n        const abis = await request.fetchAbis()\n        return request.resolve(\n            abis,\n            {actor: payload.sa, permission: payload.sp},\n            {\n                ref_block_num: payload.rbn,\n                ref_block_prefix: payload.rid,\n                expiration: payload.ex,\n                chainId: payload.cid,\n            }\n        )\n    }\n\n    /** The request that created the transaction. */\n    public readonly request: SigningRequest\n    /** Expected signer of transaction. */\n    public readonly signer: PermissionLevel\n    /** Transaction object with action data encoded. */\n    public readonly transaction: Transaction\n    /** Transaction object with action data decoded. */\n    public readonly resolvedTransaction: ResolvedTransaction\n    /** Id of chain where the request was resolved. */\n    public readonly chainId: ChainId\n\n    constructor(\n        request: SigningRequest,\n        signer: PermissionLevel,\n        transaction: Transaction,\n        resolvedTransaction: ResolvedTransaction,\n        chainId: ChainId\n    ) {\n        this.request = request\n        this.signer = signer\n        this.transaction = transaction\n        this.resolvedTransaction = resolvedTransaction\n        this.chainId = chainId\n    }\n\n    public get serializedTransaction(): Uint8Array {\n        return Serializer.encode({object: this.transaction}).array\n    }\n\n    public get signingDigest(): Checksum256 {\n        return this.transaction.signingDigest(this.chainId)\n    }\n\n    public getCallback(\n        signatures: SignatureType[],\n        blockNum?: UInt32Type\n    ): ResolvedCallback | null {\n        const {callback, flags} = this.request.data\n        if (!callback || callback.length === 0) {\n            return null\n        }\n        if (!signatures || signatures.length === 0) {\n            throw new Error('Must have at least one signature to resolve callback')\n        }\n        const sigs = signatures.map((sig) => Signature.from(sig))\n        const payload: CallbackPayload = {\n            sig: String(sigs[0]),\n            tx: String(this.transaction.id),\n            rbn: String(this.transaction.ref_block_num),\n            rid: String(this.transaction.ref_block_prefix),\n            ex: String(this.transaction.expiration),\n            req: this.request.encode(),\n            sa: String(this.signer.actor),\n            sp: String(this.signer.permission),\n            cid: String(this.chainId),\n        }\n        for (const [n, sig] of sigs.slice(1).entries()) {\n            payload[`sig${n}`] = String(sig)\n        }\n        if (blockNum) {\n            payload.bn = String(UInt32.from(blockNum))\n        }\n        const url = callback.replace(/({{([a-z0-9]+)}})/g, (_1, _2, m) => {\n            return payload[m] || ''\n        })\n        return {\n            background: flags.background,\n            payload,\n            url,\n        }\n    }\n}\n\nfunction encodeAction(action: AnyAction, abis: Record<string, ABIDef>): Action {\n    if (Bytes.isBytes(action.data) || (action.data.constructor as any).abiName !== undefined) {\n        return Action.from(action)\n    }\n    const abi = abis[String(Name.from(action.account))]\n    if (!abi) {\n        throw new Error(`Missing abi for ${action.account}`)\n    }\n    return Action.from(action, abi)\n}\n\nfunction isIdentity(action: AnyAction) {\n    const account = Name.from(action.account)\n    const name = Name.from(action.name)\n    return account.rawValue.equals(0) && name.equals('identity')\n}\n\nfunction hasTapos(tx: Transaction) {\n    return !(\n        tx.expiration.value.value === 0 &&\n        tx.ref_block_num.value === 0 &&\n        tx.ref_block_prefix.value === 0\n    )\n}\n\nfunction expirationTime(timestamp?: TimePointType, expireSeconds: UInt32Type = 60) {\n    const ts = TimePointSec.from(timestamp || new Date())\n    const exp = UInt32.from(expireSeconds)\n    return TimePointSec.fromMilliseconds(ts.toMilliseconds() + exp.value * 1000)\n}\n"],"names":["ChainName","charset","lookup","Uint8Array","i","charCodeAt","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","ChainId","from","value","ChainIdLookup","get","Error","name","this","chainName","ChainIdVariant","UNKNOWN","cid","hexString","Checksum256","TypeAlias","ChainAlias","UInt8","Variant","type","Map","EOS","TELOS","JUNGLE","KYLIN","WORBLI","BOS","MEETONE","INSIGHTS","BEOS","WAX","PROTON","FIO","AccountName","Name","PermissionName","IdentityV2","Struct","field","PermissionLevel","optional","IdentityV3","RequestVariantV2","Action","array","Transaction","RequestVariantV3","RequestFlags","setFlag","flag","enabled","RequestFlags_1","broadcast","background","InfoPair","RequestDataV2","RequestDataV3","RequestSignature","ProtocolVersion","PlaceholderName","PlaceholderPermission","PlaceholderAuth","actor","permission","SigningRequest","version","data","zlib","abiProvider","signature","flags","req","variantName","identityAbi","abi","Serializer","synthesize","identityType","actions","ricardian_contract","storageType","create","args","options","_this2","createSync","abis","requiredAbis","action","transaction","filter","Bytes","isBytes","undefined","constructor","abiName","map","account","provider","Promise","all","getAbi","accountAbis","entries","toString","encode","String","encodeAction","chainId","identity","scope","TypeError","tx","expiration","ref_block_num","ref_block_prefix","context_free_actions","transaction_extensions","delay_sec","max_cpu_usage_ms","max_net_usage_words","chain_id","chainVariant","callback","url","info","prototype","hasOwnProperty","call","object","push","chainIds","ids","id","signatureProvider","sign","fromTransaction","serializedTransaction","encoder","ABIEncoder","writeByte","writeArray","fromData","getData","uri","split","scheme","path","input","a","b","p","base64u","startsWith","slice","header","payload","droppingFirst","inflateRaw","sig","decoder","ABIDecoder","decode","canRead","message","getSignatureDigest","prefix","appending","sha256Digest","setSignature","signer","setCallback","setBroadcast","compress","slashes","shouldCompress","sigData","getSignatureData","byteLength","set","deflated","deflateRaw","out","chunk","byteRemainder","mainLength","parts","join","getRequiredAbis","getRawActions","isIdentity","index","self","indexOf","requiresTapos","getRawTransaction","hasTapos","fetchAbis","required","ABI","_set2","resolveActions","rawAction","_this5","rawAbi","getActionType","decodeData","authorization","signerPerm","resolve","equals","Array","isArray","keys","auth","resolveTransaction","ctx","TimePointSec","expirationTime","timestamp","expire_seconds","UInt16","UInt32","block_num","_this6","isMultiChain","getChainIds","some","getChainId","ResolvedSigningRequest","getInfoKey","setChainIds","setInfoKey","variantIdx","shouldBroadcast","getIdentity","getIdentityPermission","getIdentityScope","getRawInfo","rv","getRawInfoKey","pair","find","setRawInfoKey","clone","JSON","parse","stringify","toJSON","request","resolvedTransaction","fromPayload","sa","sp","rbn","rid","ex","getCallback","signatures","blockNum","sigs","Signature","bn","replace","_1","_2","m","signingDigest","rawValue","expireSeconds","ts","Date","exp","fromMilliseconds","toMilliseconds"],"mappings":"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"}