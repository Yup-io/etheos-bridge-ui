"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bip32_path_1 = __importDefault(require("bip32-path"));
var buffer_1 = __importDefault(require("buffer/"));
var LedgerUtils_1 = require("./LedgerUtils");
/**
 * Ledger API
 * @param transport Ledger transport method
 */
var LedgerAPI = /** @class */ (function () {
    function LedgerAPI(transport) {
        var _this = this;
        this.transport = null;
        this.addressIndex = 0;
        this.scrambleKey = 'e0s';
        this.getAppConfiguration = function () { return (_this.transport.send(LedgerUtils_1.LEDGER_CODES.CLA, LedgerUtils_1.LEDGER_CODES.INS_GET_APP_CONFIGURATION, LedgerUtils_1.LEDGER_CODES.P1_NON_CONFIRM, LedgerUtils_1.LEDGER_CODES.P1_NON_CONFIRM)
            .then(function () { return true; })
            .catch(function (err) { throw Error(err); })); };
        this.transport = transport;
        try {
            transport.decorateAppAPIMethods(this, ['getPublicKey', 'signTransaction', 'getAppConfiguration'], this.scrambleKey);
        }
        catch (error) {
            console.error(error);
            throw error;
        }
    }
    /**
     * @returns [keys] An array of public keys
     */
    LedgerAPI.prototype.getPublicKey = function (requestPermission) {
        var _this = this;
        if (requestPermission === void 0) { requestPermission = true; }
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                var path = LedgerUtils_1.GET_LEDGER_PATHS(_this.addressIndex);
                var paths = bip32_path_1.default.fromString(path).toPathArray();
                var buffer = buffer_1.default.Buffer.alloc(1 + paths.length * 4);
                buffer[0] = paths.length;
                paths.forEach(function (element, index) {
                    buffer.writeUInt32BE(element, 1 + 4 * index);
                });
                return _this.transport
                    .send(LedgerUtils_1.LEDGER_CODES.CLA, LedgerUtils_1.LEDGER_CODES.INS_GET_PUBLIC_KEY, requestPermission ? LedgerUtils_1.LEDGER_CODES.P1_CONFIRM : LedgerUtils_1.LEDGER_CODES.P1_NON_CONFIRM, LedgerUtils_1.LEDGER_CODES.P1_NON_CONFIRM, buffer)
                    .then(function (response) {
                    var publicKeyLength = response[0];
                    var addressLength = response[1 + publicKeyLength];
                    resolve(response
                        .slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength)
                        .toString('ascii'));
                }).catch(function (err) {
                    reject(err);
                });
            }, 1);
        });
    };
    /**
     * @returns A Signed eos transaction
     */
    LedgerAPI.prototype.signTransaction = function (_a) {
        var chainId = _a.chainId, serializedTransaction = _a.serializedTransaction;
        return __awaiter(this, void 0, void 0, function () {
            var path, paths, offset, transactionBuffer, rawTx, toSend, response, _loop_1;
            var _this = this;
            return __generator(this, function (_b) {
                path = LedgerUtils_1.GET_LEDGER_PATHS(this.addressIndex);
                paths = bip32_path_1.default.fromString(path).toPathArray();
                offset = 0;
                try {
                    transactionBuffer = LedgerUtils_1.serialize(chainId, serializedTransaction).toString('hex');
                }
                catch (error) {
                    console.error(error);
                    throw new Error('Unable to deserialize transaction');
                }
                rawTx = buffer_1.default.Buffer.from(transactionBuffer, 'hex');
                toSend = [];
                _loop_1 = function () {
                    var maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;
                    var chunkSize = offset + maxChunkSize > rawTx.length
                        ? rawTx.length - offset
                        : maxChunkSize;
                    var buffer = buffer_1.default.Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);
                    if (offset === 0) {
                        buffer[0] = paths.length;
                        paths.forEach(function (element, index) {
                            buffer.writeUInt32BE(element, 1 + 4 * index);
                        });
                        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);
                    }
                    else {
                        rawTx.copy(buffer, 0, offset, offset + chunkSize);
                    }
                    toSend.push(buffer);
                    offset += chunkSize;
                };
                while (offset !== rawTx.length) {
                    _loop_1();
                }
                return [2 /*return*/, LedgerUtils_1.iteratePromises(toSend, function (data, i) {
                        return _this.transport
                            .send(LedgerUtils_1.LEDGER_CODES.CLA, LedgerUtils_1.LEDGER_CODES.INS_SIGN, i === 0 ? LedgerUtils_1.LEDGER_CODES.P1_FIRST : LedgerUtils_1.LEDGER_CODES.P1_MORE, LedgerUtils_1.LEDGER_CODES.P1_NON_CONFIRM, data)
                            .then(function (apduResponse) {
                            response = apduResponse;
                            return response;
                        });
                    }).then(function () {
                        var v = response.slice(0, 1).toString('hex');
                        var r = response.slice(1, 1 + 32).toString('hex');
                        var s = response.slice(1 + 32, 1 + 32 + 32).toString('hex');
                        return LedgerUtils_1.convertSignatures(v + r + s);
                    }).catch(function (error) {
                        console.error(error);
                        throw error;
                    })];
            });
        });
    };
    return LedgerAPI;
}());
exports.LedgerAPI = LedgerAPI;
//# sourceMappingURL=LedgerAPI.js.map