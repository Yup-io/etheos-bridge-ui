"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var hw_transport_u2f_1 = __importDefault(require("@ledgerhq/hw-transport-u2f"));
var eosjs_1 = require("eosjs");
var eosjs_jssig_1 = require("eosjs/dist/eosjs-jssig");
var eosjs_ecc_1 = __importDefault(require("eosjs-ecc"));
var asn1_ber_1 = __importDefault(require("asn1-ber"));
var buffer_1 = __importDefault(require("buffer/"));
var LEDGER_CODES;
(function (LEDGER_CODES) {
    LEDGER_CODES[LEDGER_CODES["CLA"] = 212] = "CLA";
    LEDGER_CODES[LEDGER_CODES["INS_GET_PUBLIC_KEY"] = 2] = "INS_GET_PUBLIC_KEY";
    LEDGER_CODES[LEDGER_CODES["INS_SIGN"] = 4] = "INS_SIGN";
    LEDGER_CODES[LEDGER_CODES["INS_GET_APP_CONFIGURATION"] = 6] = "INS_GET_APP_CONFIGURATION";
    LEDGER_CODES[LEDGER_CODES["P1_CONFIRM"] = 1] = "P1_CONFIRM";
    LEDGER_CODES[LEDGER_CODES["P1_NON_CONFIRM"] = 0] = "P1_NON_CONFIRM";
    LEDGER_CODES[LEDGER_CODES["P1_FIRST"] = 0] = "P1_FIRST";
    LEDGER_CODES[LEDGER_CODES["P1_MORE"] = 128] = "P1_MORE";
})(LEDGER_CODES = exports.LEDGER_CODES || (exports.LEDGER_CODES = {}));
exports.GET_LEDGER_PATHS = function (index) {
    if (index === void 0) { index = 0; }
    return "44'/194'/0'/0/" + index;
};
var cachedTransport;
function getTransport() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (cachedTransport) {
                        return [2 /*return*/, cachedTransport];
                    }
                    return [4 /*yield*/, hw_transport_u2f_1.default.create()];
                case 1:
                    cachedTransport = _a.sent();
                    return [2 /*return*/, cachedTransport];
            }
        });
    });
}
exports.getTransport = getTransport;
exports.convertSignatures = function (sigs) {
    if (!Array.isArray(sigs)) {
        sigs = [sigs];
    }
    sigs = [].concat.apply([], sigs);
    for (var i = 0; i < sigs.length; i++) {
        var sig = sigs[i];
        if (typeof sig === 'string' && sig.length === 130) {
            sigs[i] = eosjs_ecc_1.default.Signature.from(sig).toString();
        }
    }
    return sigs;
};
exports.iteratePromises = function (arr, callback) {
    var iterate = function (index, array, result) {
        if (index >= array.length) {
            return result;
        }
        return callback(array[index], index)
            .then(function (res) {
            result.push(res);
            return iterate(index + 1, array, result);
        });
    };
    return Promise.resolve().then(function () { return iterate(0, arr, []); });
};
exports.serialize = function (chainId, serializedTransaction) {
    var e_1, _a, e_2, _b;
    var api = new eosjs_1.Api({ rpc: new eosjs_1.JsonRpc(''), signatureProvider: new eosjs_jssig_1.JsSignatureProvider([]) });
    var transaction = api.deserializeTransaction(serializedTransaction);
    var writer = new asn1_ber_1.default.BerWriter();
    encode(writer, createNewBuffer(api, 'checksum256', chainId));
    encode(writer, createNewBuffer(api, 'time_point_sec', transaction.expiration));
    encode(writer, createNewBuffer(api, 'uint16', transaction.ref_block_num));
    encode(writer, createNewBuffer(api, 'uint32', transaction.ref_block_prefix));
    encode(writer, createNewBuffer(api, 'varuint32', 0)); // max_net_usage_words
    encode(writer, createNewBuffer(api, 'uint8', transaction.max_cpu_usage_ms));
    encode(writer, createNewBuffer(api, 'varuint32', transaction.delay_sec));
    encode(writer, createNewBuffer(api, 'uint8', 0)); // ctx_free_actions_size
    encode(writer, createNewBuffer(api, 'uint8', transaction.actions.length));
    try {
        for (var _c = __values(transaction.actions), _d = _c.next(); !_d.done; _d = _c.next()) {
            var action = _d.value;
            encode(writer, createNewBuffer(api, 'name', action.account));
            encode(writer, createNewBuffer(api, 'name', action.name));
            encode(writer, createNewBuffer(api, 'uint8', action.authorization.length));
            try {
                for (var _e = (e_2 = void 0, __values(action.authorization)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var authorization = _f.value;
                    encode(writer, createNewBuffer(api, 'name', authorization.actor));
                    encode(writer, createNewBuffer(api, 'name', authorization.permission));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var actionData = buffer_1.default.Buffer.from(action.data, 'hex');
            encode(writer, createNewBuffer(api, 'uint8', actionData.length));
            var actionDataBuffer = new eosjs_1.Serialize.SerialBuffer({
                textDecoder: new TextDecoder(),
                textEncoder: new TextEncoder(),
            });
            actionDataBuffer.pushArray(actionData);
            encode(writer, actionDataBuffer.asUint8Array());
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    encode(writer, createNewBuffer(api, 'uint8', 0)); // transaction_extensions
    encode(writer, createNewBuffer(api, 'checksum256', buffer_1.default.Buffer.alloc(32, 0).toString('hex'))); // ctx_free_data
    return writer.buffer;
};
var createNewBuffer = function (api, type, data) {
    var buffer = new eosjs_1.Serialize.SerialBuffer({ textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });
    api.serialize(buffer, type, data);
    return buffer.asUint8Array();
};
var encode = function (writer, buffer) {
    writer.writeBuffer(buffer_1.default.Buffer.from(buffer), asn1_ber_1.default.Ber.OctetString);
};
//# sourceMappingURL=LedgerUtils.js.map