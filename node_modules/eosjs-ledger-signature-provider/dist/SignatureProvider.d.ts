import { Api } from 'eosjs';
import { LedgerAPI } from './LedgerAPI';
interface SignatureProviderInterface {
    eosjsApi: Api;
    ledgerApi: LedgerAPI;
    cachedKeys: string[];
}
export declare class SignatureProvider implements SignatureProviderInterface {
    eosjsApi: Api;
    ledgerApi: LedgerAPI;
    cachedKeys: string[];
    getLedgerApi(): Promise<LedgerAPI>;
    /** Public keys associated with the private keys that the `SignatureProvider` holds */
    getAvailableKeys(requestPermission?: boolean): Promise<string[]>;
    /** Sign a transaction */
    sign({ chainId, serializedTransaction }: {
        chainId: string;
        serializedTransaction: Uint8Array;
    }): Promise<{
        signatures: string[];
        serializedTransaction: Uint8Array;
    }>;
    protected getCachedKeys(): string[];
    protected setCachedKeys(keys: string[]): void;
    clearCachedKeys(): void;
    cleanUp(): void;
}
export {};
