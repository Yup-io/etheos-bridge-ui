"use strict";
/*
 * The Bridge Library for Meet.ONE Client
 * This library is used to assist in generating the protocol URI of the client, and encapsulates some common protocols and methods.
 * @Author: JohnTrump
 * @Date: 2018-08-06 16:26:02
 * @Last Modified by: JohnTrump
 * @Last Modified time: 2019-12-17 14:32:13
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Bridge = /** @class */ (function () {
    /**
     * Creates an instance of Bridge.
     *
     * @param {string} [protocol='meetone://']
     * @param {string} The version of Bridge Library
     */
    function Bridge(scheme, version) {
        if (scheme === void 0) { scheme = 'meetone://'; }
        if (version === void 0) { version = '2.2.0'; }
        /**
         * Try the `window.postMessage` failed times
         *
         * Over 60 times will throw error ('post url timeout')
         *
         * @type {number}
         */
        this.tryTimes = 0;
        this.scheme = scheme;
        this.version = version;
    }
    /**
     * Parse Javascript Object to params String
     *
     * Detailed conversion process:
     *
     * JSON.stringify() -> encodeURIComponent() -> btoa()
     *
     * @static
     * @param {object} obj - target Javascript Object
     * @returns {string} - params String
     */
    Bridge.coverObjectToParams = function (obj) {
        try {
            var json = JSON.stringify(obj);
            return btoa(encodeURIComponent(json));
        }
        catch (error) {
            console.error(error);
        }
        return '';
    };
    /**
     * Generate random series callback ID
     *
     * For realize the callback function
     *
     * @private
     * @returns {string} - `meet_callback_[id]`
     */
    Bridge.prototype._getCallbackId = function () {
        var random = parseInt(Math.random() * 10000 + '');
        return '3_meet_callback_' + new Date().getTime() + random;
    };
    /**
     * PostMessage to Client for invoke schema
     *
     * @private
     * @param {string} url
     */
    Bridge.prototype._sendRequest = function (url) {
        var _this = this;
        try {
            // console.log('post url', url)
            // @ts-ignore
            window.postMessage(url);
            this.tryTimes = 0;
        }
        catch (error) {
            // console.log('failed..', this.tryTimes)
            // 每1s尝试重新发起，失败次数60次之后不再发起
            if (this.tryTimes < 60) {
                setTimeout(function () {
                    _this._sendRequest(url);
                    _this.tryTimes = ++_this.tryTimes;
                }, 1000);
            }
            else {
                console.error('post url timeout(60 times):', url);
            }
        }
    };
    /**
     * Generate Promise with callbackId
     * Callback is once!
     *
     * If `bridge.version < 2.0.0` will return String
     *
     * @param {Object} obj
     *  - {
     *    routeName: String,
     *    params: Object
     * }
     * @returns {Promise | String}
     */
    Bridge.prototype.customGenerate = function (obj) {
        var callbackId = this._getCallbackId();
        obj = Object.assign(obj, { callbackId: callbackId });
        var url = this.generateURI(obj);
        if (this.version >= Bridge.V2_MIN_VERSION) {
            this._sendRequest(url);
            return new Promise(function (resolve, reject) {
                // @ts-ignore
                window[callbackId] = function (result) {
                    try {
                        resolve(result);
                    }
                    catch (error) {
                        reject(error);
                    }
                    finally {
                        // @ts-ignore
                        window[callbackId] = null;
                    }
                };
            });
        }
        else {
            return url;
        }
    };
    /**
     *
     * @author JohnTrump
     * @param {Object} obj  - target Javascript Object
     * @param {string} callbackId - make sure callbackId unique
     * @param {(result: object) => void} callback - callback function
     * @returns {*}
     * @memberof Bridge
     */
    Bridge.prototype.timesGenerate = function (obj, callbackId, callback) {
        obj = Object.assign(obj, { callbackId: callbackId });
        var url = this.generateURI(obj);
        this._sendRequest(url);
        // @ts-ignore
        window[callbackId] = callback;
        return url;
    };
    /**
     * Parse params String to Javascript Object
     *
     * Detailed conversion process: atob() -> decodeURIComponent() -> JSON.parse()
     * @static
     * @param {string} url - params String
     * @returns {object} - Javascript Object
     */
    Bridge.revertParamsToObject = function (url) {
        try {
            // decode base64
            var decodeURL = atob(url);
            var jsonStr = decodeURIComponent(decodeURL);
            return JSON.parse(jsonStr);
        }
        catch (error) {
            console.error(error);
        }
        return {};
    };
    /**
     * Generate the protocol URI
     *
     * The web side can communicate with the client through the following two calling methods.
     *
     * 1. window.location.href = uri (outside web calling - out of application client)
     *
     * 2. window.postMessage(uri) (inside Webview calling - in application client)
     *
     * @param routeName - the path for protocol uri, eg: 'eos/authorize'
     * @param params - the query of params
     * @param callbackId - callback id
     * @returns {string} - The protocol of uri
     */
    Bridge.prototype.generateURI = function (_a) {
        var _b = _a.routeName, routeName = _b === void 0 ? '' : _b, _c = _a.params, params = _c === void 0 ? {} : _c, _d = _a.callbackId, callbackId = _d === void 0 ? '' : _d;
        var targetURL = '';
        targetURL = this.scheme
            .concat(routeName)
            .concat('?params=')
            .concat(Bridge.coverObjectToParams(params));
        // 如果有指定回调
        if (callbackId) {
            targetURL = targetURL.concat('&callbackId=' + callbackId);
        }
        return targetURL;
    };
    /**
     * Get EOS wallet current network
     * include chain_id and domians[]
     */
    Bridge.prototype.invokeGetNetwork = function () {
        return this.customGenerate({
            routeName: 'eos/network'
        });
    };
    /**
     * 触发客户端分享
     *
     * @param shareType - 分享类型: `1 文本；2 图片；3 web link；4 文件; 5 口令`
     * @param imgUrl - 分享的图片[可选]
     * @param title - 分享标题
     * @param description - 分享内容
     * @param options - 附带的参数（`shareType = 5`时需要）
     */
    Bridge.prototype.invokeShare = function (_a) {
        var _b = _a.shareType, shareType = _b === void 0 ? 1 : _b, _c = _a.title, title = _c === void 0 ? '' : _c, _d = _a.description, description = _d === void 0 ? '' : _d, _e = _a.imgUrl, imgUrl = _e === void 0 ? '' : _e, _f = _a.options, options = _f === void 0 ? {} : _f;
        return this.customGenerate({
            routeName: 'app/share',
            params: {
                shareType: shareType,
                imgUrl: imgUrl,
                title: title,
                description: description,
                options: options
            }
        });
    };
    /**
     * 生成分享口令
     *
     * 生成的口令会自动被复制，打卡App后会弹出分享的内容
     *
     * @param description - 口令分享弹窗描述
     * @param name - Dapps的名称
     * @param target - 口令分享跳转的url
     * @param banner - 弹窗的banner图片
     * @param icon - 弹窗Dapp图标
     */
    Bridge.prototype.invokeShareCode = function (_a) {
        var _b = _a.description, description = _b === void 0 ? '' : _b, _c = _a.name, name = _c === void 0 ? '' : _c, _d = _a.target, target = _d === void 0 ? '' : _d, _e = _a.banner, banner = _e === void 0 ? '' : _e, _f = _a.icon, icon = _f === void 0 ? '' : _f;
        return this.customGenerate({
            routeName: 'app/share',
            params: {
                shareType: 5,
                description: description,
                options: {
                    name: name,
                    target: target,
                    banner: banner,
                    icon: icon
                }
            }
        });
    };
    /**
     * Request authorization - return authorization information directly
     */
    Bridge.prototype.invokeAuthorizeInWeb = function () {
        return this.customGenerate({
            routeName: 'eos/authorizeInWeb'
        });
    };
    /**
     *
     * Send a transfer request
     *
     * @param to 转账给谁
     * @param amount 转账金额
     * @param tokenName 代币符号
     * @param tokenContract 代币合约地址
     * @param tokenPrecision 代币精度
     * @param memo 转账备注
     * @param orderInfo 订单信息
     */
    Bridge.prototype.invokeTransfer = function (_a) {
        var _b = _a.to, to = _b === void 0 ? '' : _b, _c = _a.amount, amount = _c === void 0 ? 0 : _c, _d = _a.tokenName, tokenName = _d === void 0 ? 'EOS' : _d, _e = _a.tokenContract, tokenContract = _e === void 0 ? 'eosio.token' : _e, _f = _a.tokenPrecision, tokenPrecision = _f === void 0 ? 4 : _f, _g = _a.memo, memo = _g === void 0 ? '' : _g, _h = _a.orderInfo, orderInfo = _h === void 0 ? '' : _h;
        return this.customGenerate({
            routeName: 'eos/transfer',
            params: {
                to: to,
                amount: amount,
                tokenName: tokenName,
                tokenContract: tokenContract,
                tokenPrecision: tokenPrecision,
                memo: memo,
                orderInfo: orderInfo
            }
        });
    };
    /**
     *
     * Send a transaction request
     *
     * ref: https://github.com/EOSIO/eosjs#transaction
     *
     * @param actions - transaction Actions
     * @param options - transaction Options
     * @param description - the description about transaction
     */
    Bridge.prototype.invokeTransaction = function (_a) {
        var _b = _a.actions, actions = _b === void 0 ? [] : _b, _c = _a.options, options = _c === void 0 ? { broadcast: true } : _c, _d = _a.description, description = _d === void 0 ? '' : _d;
        return this.customGenerate({
            routeName: 'eos/transaction',
            params: {
                actions: actions,
                options: options,
                description: description
            }
        });
    };
    /**
     * Get account information
     */
    Bridge.prototype.invokeAccountInfo = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.chainId, chainId = _c === void 0 ? '' : _c, _d = _b.dappName, dappName = _d === void 0 ? '' : _d;
        return this.customGenerate({
            routeName: 'eos/account_info',
            params: {
                // Dapp所属的chainId
                chainId: chainId,
                // 当前Dapp名称
                dappName: dappName
            }
        });
    };
    /**
     *
     * invoke application to Navigate
     *
     * @param target - Navigate to route name, eg 'EOSAuthorationPage'
     * @param options - Parameters that need to passed to the route component
     */
    Bridge.prototype.invokeNavigate = function (_a) {
        var _b = _a.target, target = _b === void 0 ? '' : _b, _c = _a.options, options = _c === void 0 ? {} : _c;
        return this.customGenerate({
            routeName: 'app/navigate',
            params: {
                target: target,
                options: options
            }
        });
    };
    /**
     *
     * invoke application to open a webview
     *
     * @param title - webview title
     * @param uri - target url which will be opened in webview
     */
    Bridge.prototype.invokeWebview = function (_a) {
        var _b = _a.url, url = _b === void 0 ? '' : _b, _c = _a.title, title = _c === void 0 ? '' : _c;
        return this.customGenerate({
            routeName: 'app/webview',
            params: {
                url: url,
                title: title
            }
        });
    };
    /**
     *
     * custom menu of webview
     * @author JohnTrump
     */
    Bridge.prototype.webviewRightMenu = function (_a) {
        var _b = _a.title, title = _b === void 0 ? '' : _b, _c = _a.callback, callback = _c === void 0 ? function () { } : _c;
        // @ts-ignore
        window['3_meet_callback_webview_right_menu'] = null;
        return this.timesGenerate({
            routeName: 'app/webview/right_menu',
            params: {
                right: title
            }
        }, '3_meet_callback_webview_right_menu', callback);
    };
    /**
     * invoke clint to return signProvider for eos.js
     *
     * ref: https://github.com/EOSIO/eosjs/blob/master/src/index.test.js#L327
     *
     */
    Bridge.prototype.invokeSignProvider = function (_a) {
        var _b = _a.buf, buf = _b === void 0 ? [''] : _b, _c = _a.transaction, transaction = _c === void 0 ? null : _c;
        return this.customGenerate({
            routeName: 'eos/sign_provider',
            params: {
                buf: buf,
                transaction: transaction
            }
        });
    };
    /**
     * invoke application to sign a signature which use current account and data
     *
     * @param {string} data - The data which used to create a signature
     * @param {string} whatfor - The description for the Sign request
     * @param {boolean} isHash - Is used `ecc.Signature.signHash` to sign
     * @param {boolean} isArbitrary - Is invoked by `scatter.getArbitrarySignature`, Default is `false`
     */
    Bridge.prototype.invokeSignature = function (_a) {
        var _b = _a.data, data = _b === void 0 ? '' : _b, // 打算加密的内容
        _c = _a.whatfor, // 打算加密的内容
        whatfor = _c === void 0 ? '' : _c, // 加密请求说明
        _d = _a.isHash, // 加密请求说明
        isHash = _d === void 0 ? false : _d, _e = _a.isArbitrary, isArbitrary = _e === void 0 ? false : _e;
        return this.customGenerate({
            routeName: 'eos/signature',
            params: {
                data: data,
                whatfor: whatfor,
                isHash: isHash,
                isArbitrary: isArbitrary
            }
        });
    };
    /**
     * invoke application to get token Balance
     *
     * @param {string} accountName - the account name of want to query balance - options
     * @param {string} contract - the token publisher smart contract name - default is 'eosio.token'
     * @param {string} symbol - the token symbol - default is 'EOS'
     */
    Bridge.prototype.invokeBalance = function (_a) {
        var _b = _a.accountName, accountName = _b === void 0 ? '' : _b, _c = _a.contract, contract = _c === void 0 ? 'eosio.token' : _c, _d = _a.symbol, symbol = _d === void 0 ? 'EOS' : _d;
        return this.customGenerate({
            routeName: 'eos/getBalance',
            params: {
                accountName: accountName,
                contract: contract,
                symbol: symbol
            }
        });
    };
    Bridge.V2_MIN_VERSION = '2.0.0';
    return Bridge;
}());
exports.default = Bridge;
//# sourceMappingURL=meet-bridge.js.map