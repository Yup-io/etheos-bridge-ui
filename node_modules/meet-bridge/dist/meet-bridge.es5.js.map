{"version":3,"file":"meet-bridge.es5.js","sources":["../src/meet-bridge.ts"],"sourcesContent":["/*\n * The Bridge Library for Meet.ONE Client\n * This library is used to assist in generating the protocol URI of the client, and encapsulates some common protocols and methods.\n * @Author: JohnTrump\n * @Date: 2018-08-06 16:26:02\n * @Last Modified by: JohnTrump\n * @Last Modified time: 2019-12-17 14:32:13\n */\n\nexport default class Bridge {\n  static V2_MIN_VERSION = '2.0.0'\n\n  /**\n   * Designated protocol scheme, default `meetone://`\n   * @type {string}\n   */\n  scheme: string\n\n  /**\n   * The Version of Bridge Library\n   * @type {string}\n   */\n  version: string\n\n  /**\n   * Try the `window.postMessage` failed times\n   *\n   * Over 60 times will throw error ('post url timeout')\n   *\n   * @type {number}\n   */\n  tryTimes: number = 0\n\n  /**\n   * Creates an instance of Bridge.\n   *\n   * @param {string} [protocol='meetone://']\n   * @param {string} The version of Bridge Library\n   */\n  constructor(scheme: string = 'meetone://', version = '2.2.0') {\n    this.scheme = scheme\n    this.version = version\n  }\n\n  /**\n   * Parse Javascript Object to params String\n   *\n   * Detailed conversion process:\n   *\n   * JSON.stringify() -> encodeURIComponent() -> btoa()\n   *\n   * @static\n   * @param {object} obj - target Javascript Object\n   * @returns {string} - params String\n   */\n  public static coverObjectToParams(obj: object): string {\n    try {\n      let json = JSON.stringify(obj)\n      return btoa(encodeURIComponent(json))\n    } catch (error) {\n      console.error(error)\n    }\n    return ''\n  }\n\n  /**\n   * Generate random series callback ID\n   *\n   * For realize the callback function\n   *\n   * @private\n   * @returns {string} - `meet_callback_[id]`\n   */\n  private _getCallbackId(): string {\n    const random = parseInt(Math.random() * 10000 + '')\n    return '3_meet_callback_' + new Date().getTime() + random\n  }\n\n  /**\n   * PostMessage to Client for invoke schema\n   *\n   * @private\n   * @param {string} url\n   */\n  private _sendRequest(url: string): void {\n    try {\n      // console.log('post url', url)\n      // @ts-ignore\n      window.postMessage(url)\n      this.tryTimes = 0\n    } catch (error) {\n      // console.log('failed..', this.tryTimes)\n      // 每1s尝试重新发起，失败次数60次之后不再发起\n      if (this.tryTimes < 60) {\n        setTimeout(() => {\n          this._sendRequest(url)\n          this.tryTimes = ++this.tryTimes\n        }, 1000)\n      } else {\n        console.error('post url timeout(60 times):', url)\n      }\n    }\n  }\n\n  /**\n   * Generate Promise with callbackId\n   * Callback is once!\n   *\n   * If `bridge.version < 2.0.0` will return String\n   *\n   * @param {Object} obj\n   *  - {\n   *    routeName: String,\n   *    params: Object\n   * }\n   * @returns {Promise | String}\n   */\n  public customGenerate(obj: Object): any {\n    const callbackId = this._getCallbackId()\n    obj = Object.assign(obj, { callbackId })\n    const url = this.generateURI(obj)\n    if (this.version >= Bridge.V2_MIN_VERSION) {\n      this._sendRequest(url)\n      return new Promise((resolve, reject) => {\n        // @ts-ignore\n        window[callbackId] = function(result) {\n          try {\n            resolve(result)\n          } catch (error) {\n            reject(error)\n          } finally {\n            // @ts-ignore\n            window[callbackId] = null\n          }\n        }\n      })\n    } else {\n      return url\n    }\n  }\n\n  /**\n   *\n   * @author JohnTrump\n   * @param {Object} obj  - target Javascript Object\n   * @param {string} callbackId - make sure callbackId unique\n   * @param {(result: object) => void} callback - callback function\n   * @returns {*}\n   * @memberof Bridge\n   */\n  public timesGenerate(obj: Object, callbackId: string, callback: () => void): any {\n    obj = Object.assign(obj, { callbackId })\n    const url = this.generateURI(obj)\n    this._sendRequest(url)\n    // @ts-ignore\n    window[callbackId] = callback\n    return url\n  }\n\n  /**\n   * Parse params String to Javascript Object\n   *\n   * Detailed conversion process: atob() -> decodeURIComponent() -> JSON.parse()\n   * @static\n   * @param {string} url - params String\n   * @returns {object} - Javascript Object\n   */\n  public static revertParamsToObject(url: string): object {\n    try {\n      // decode base64\n      const decodeURL = atob(url)\n      const jsonStr = decodeURIComponent(decodeURL)\n      return JSON.parse(jsonStr)\n    } catch (error) {\n      console.error(error)\n    }\n    return {}\n  }\n\n  /**\n   * Generate the protocol URI\n   *\n   * The web side can communicate with the client through the following two calling methods.\n   *\n   * 1. window.location.href = uri (outside web calling - out of application client)\n   *\n   * 2. window.postMessage(uri) (inside Webview calling - in application client)\n   *\n   * @param routeName - the path for protocol uri, eg: 'eos/authorize'\n   * @param params - the query of params\n   * @param callbackId - callback id\n   * @returns {string} - The protocol of uri\n   */\n  public generateURI({ routeName = '', params = {}, callbackId = '' }): string {\n    let targetURL = ''\n    targetURL = this.scheme\n      .concat(routeName)\n      .concat('?params=')\n      .concat(Bridge.coverObjectToParams(params))\n    // 如果有指定回调\n    if (callbackId) {\n      targetURL = targetURL.concat('&callbackId=' + callbackId)\n    }\n    return targetURL\n  }\n\n  /**\n   * Get EOS wallet current network\n   * include chain_id and domians[]\n   */\n  public invokeGetNetwork(): any {\n    return this.customGenerate({\n      routeName: 'eos/network'\n    })\n  }\n\n  /**\n   * 触发客户端分享\n   *\n   * @param shareType - 分享类型: `1 文本；2 图片；3 web link；4 文件; 5 口令`\n   * @param imgUrl - 分享的图片[可选]\n   * @param title - 分享标题\n   * @param description - 分享内容\n   * @param options - 附带的参数（`shareType = 5`时需要）\n   */\n  public invokeShare({\n    shareType = 1,\n    title = '',\n    description = '',\n    imgUrl = '',\n    options = {}\n  }): any {\n    return this.customGenerate({\n      routeName: 'app/share',\n      params: {\n        shareType,\n        imgUrl,\n        title,\n        description,\n        options\n      }\n    })\n  }\n\n  /**\n   * 生成分享口令\n   *\n   * 生成的口令会自动被复制，打卡App后会弹出分享的内容\n   *\n   * @param description - 口令分享弹窗描述\n   * @param name - Dapps的名称\n   * @param target - 口令分享跳转的url\n   * @param banner - 弹窗的banner图片\n   * @param icon - 弹窗Dapp图标\n   */\n  public invokeShareCode({\n    description = '',\n    name = '',\n    target = '',\n    banner = '',\n    icon = ''\n  }): any {\n    return this.customGenerate({\n      routeName: 'app/share',\n      params: {\n        shareType: 5,\n        description,\n        options: {\n          name,\n          target,\n          banner,\n          icon\n        }\n      }\n    })\n  }\n\n  /**\n   * Request authorization - return authorization information directly\n   */\n  public invokeAuthorizeInWeb(): any {\n    return this.customGenerate({\n      routeName: 'eos/authorizeInWeb'\n    })\n  }\n\n  /**\n   *\n   * Send a transfer request\n   *\n   * @param to 转账给谁\n   * @param amount 转账金额\n   * @param tokenName 代币符号\n   * @param tokenContract 代币合约地址\n   * @param tokenPrecision 代币精度\n   * @param memo 转账备注\n   * @param orderInfo 订单信息\n   */\n  public invokeTransfer({\n    to = '',\n    amount = 0,\n    tokenName = 'EOS',\n    tokenContract = 'eosio.token',\n    tokenPrecision = 4,\n    memo = '',\n    orderInfo = ''\n  }): any {\n    return this.customGenerate({\n      routeName: 'eos/transfer',\n      params: {\n        to,\n        amount,\n        tokenName,\n        tokenContract,\n        tokenPrecision,\n        memo,\n        orderInfo\n      }\n    })\n  }\n\n  /**\n   *\n   * Send a transaction request\n   *\n   * ref: https://github.com/EOSIO/eosjs#transaction\n   *\n   * @param actions - transaction Actions\n   * @param options - transaction Options\n   * @param description - the description about transaction\n   */\n  public invokeTransaction({ actions = [], options = { broadcast: true }, description = '' }): any {\n    return this.customGenerate({\n      routeName: 'eos/transaction',\n      params: {\n        actions,\n        options,\n        description\n      }\n    })\n  }\n\n  /**\n   * Get account information\n   */\n  public invokeAccountInfo({ chainId = '', dappName = '' } = {}): any {\n    return this.customGenerate({\n      routeName: 'eos/account_info',\n      params: {\n        // Dapp所属的chainId\n        chainId,\n        // 当前Dapp名称\n        dappName\n      }\n    })\n  }\n\n  /**\n   *\n   * invoke application to Navigate\n   *\n   * @param target - Navigate to route name, eg 'EOSAuthorationPage'\n   * @param options - Parameters that need to passed to the route component\n   */\n  public invokeNavigate({ target = '', options = {} }): any {\n    return this.customGenerate({\n      routeName: 'app/navigate',\n      params: {\n        target,\n        options\n      }\n    })\n  }\n\n  /**\n   *\n   * invoke application to open a webview\n   *\n   * @param title - webview title\n   * @param uri - target url which will be opened in webview\n   */\n  public invokeWebview({ url = '', title = '' }): any {\n    return this.customGenerate({\n      routeName: 'app/webview',\n      params: {\n        url,\n        title\n      }\n    })\n  }\n\n  /**\n   *\n   * custom menu of webview\n   * @author JohnTrump\n   */\n  public webviewRightMenu({ title = '', callback = () => {} }): any {\n    // @ts-ignore\n    window['3_meet_callback_webview_right_menu'] = null\n    return this.timesGenerate(\n      {\n        routeName: 'app/webview/right_menu',\n        params: {\n          right: title\n        }\n      },\n      '3_meet_callback_webview_right_menu',\n      callback\n    )\n  }\n\n  /**\n   * invoke clint to return signProvider for eos.js\n   *\n   * ref: https://github.com/EOSIO/eosjs/blob/master/src/index.test.js#L327\n   *\n   */\n  public invokeSignProvider({ buf = [''], transaction = null }): any {\n    return this.customGenerate({\n      routeName: 'eos/sign_provider',\n      params: {\n        buf,\n        transaction\n      }\n    })\n  }\n\n  /**\n   * invoke application to sign a signature which use current account and data\n   *\n   * @param {string} data - The data which used to create a signature\n   * @param {string} whatfor - The description for the Sign request\n   * @param {boolean} isHash - Is used `ecc.Signature.signHash` to sign\n   * @param {boolean} isArbitrary - Is invoked by `scatter.getArbitrarySignature`, Default is `false`\n   */\n  public invokeSignature({\n    data = '', // 打算加密的内容\n    whatfor = '', // 加密请求说明\n    isHash = false,\n    isArbitrary = false\n  }): any {\n    return this.customGenerate({\n      routeName: 'eos/signature',\n      params: {\n        data,\n        whatfor,\n        isHash,\n        isArbitrary\n      }\n    })\n  }\n\n  /**\n   * invoke application to get token Balance\n   *\n   * @param {string} accountName - the account name of want to query balance - options\n   * @param {string} contract - the token publisher smart contract name - default is 'eosio.token'\n   * @param {string} symbol - the token symbol - default is 'EOS'\n   */\n  public invokeBalance({ accountName = '', contract = 'eosio.token', symbol = 'EOS' }): any {\n    return this.customGenerate({\n      routeName: 'eos/getBalance',\n      params: {\n        accountName,\n        contract,\n        symbol\n      }\n    })\n  }\n}\n"],"names":["scheme","version","this","Bridge","obj","json","JSON","stringify","btoa","encodeURIComponent","error","console","random","parseInt","Math","Date","getTime","url","window","postMessage","tryTimes","setTimeout","_this","_sendRequest","callbackId","_getCallbackId","Object","assign","generateURI","V2_MIN_VERSION","Promise","resolve","reject","result","callback","decodeURL","atob","jsonStr","decodeURIComponent","parse","_a","_b","routeName","_c","params","_d","targetURL","concat","coverObjectToParams","customGenerate","shareType","title","description","_e","imgUrl","_f","options","name","target","banner","icon","to","amount","tokenName","tokenContract","tokenPrecision","_g","memo","_h","orderInfo","actions","chainId","dappName","timesGenerate","right","buf","transaction","data","whatfor","isHash","isArbitrary","accountName","contract","symbol"],"mappings":"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"}