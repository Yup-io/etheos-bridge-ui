"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ledger = void 0;
const universal_authenticator_library_1 = require("universal-authenticator-library");
const constants_1 = require("./constants");
const interfaces_1 = require("./interfaces");
const ledgerLogo_1 = require("./ledgerLogo");
const LedgerUser_1 = require("./LedgerUser");
const UALLedgerError_1 = require("./UALLedgerError");
class Ledger extends universal_authenticator_library_1.Authenticator {
    /**
     * Ledger Constructor.
     *
     * @param chains
     * @param options { appName } appName is a optional to use Ledger
     */
    constructor(chains, options) {
        super(chains, options);
        this.onBoardingLink = constants_1.CONSTANTS.onBoardingLink;
        this.users = [];
        this.chains = chains;
    }
    isMobile() {
        const userAgent = window.navigator.userAgent;
        const isIOS = userAgent.includes('iPhone') || userAgent.includes('iPad');
        const isMobile = userAgent.includes('Mobile');
        const isAndroid = userAgent.includes('Android');
        const isCustom = userAgent.toLowerCase().includes('eoslynx');
        return isIOS || isMobile || isAndroid || isCustom;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            console.info('Ledger initialized!');
        });
    }
    /**
     * Ledger will only work with ssl secured websites
     */
    shouldRender() {
        if (window.location.protocol !== 'https:' || this.isMobile()) {
            return false;
        }
        return true;
    }
    shouldAutoLogin() {
        return false;
    }
    shouldRequestAccountName() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    /**
     * Connect to the ledger and request Keys
     *
     * @param accountName Account Name is an optional paramter
     */
    login(accountName) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const chain of this.chains) {
                const user = new LedgerUser_1.LedgerUser(chain, accountName, this.requiresGetKeyConfirmation(accountName));
                yield user.init();
                const isValid = yield user.isAccountValid();
                if (!isValid) {
                    const message = `Error logging into account "${accountName}"`;
                    const type = universal_authenticator_library_1.UALErrorType.Login;
                    const cause = null;
                    throw new UALLedgerError_1.UALLedgerError(message, type, cause);
                }
                this.users.push(user);
            }
            return this.users;
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                for (const user of this.users) {
                    user.signatureProvider.cleanUp();
                    user.signatureProvider.clearCachedKeys();
                }
                this.users = [];
            }
            catch (e) {
                const message = constants_1.CONSTANTS.logoutMessage;
                const type = universal_authenticator_library_1.UALErrorType.Logout;
                const cause = e;
                throw new UALLedgerError_1.UALLedgerError(message, type, cause);
            }
        });
    }
    getStyle() {
        return {
            icon: ledgerLogo_1.ledgerLogo,
            text: interfaces_1.Name,
            textColor: constants_1.CONSTANTS.white,
            background: constants_1.CONSTANTS.ledgerGreen,
        };
    }
    isLoading() {
        return false;
    }
    isErrored() {
        return false;
    }
    getError() {
        return null;
    }
    getOnboardingLink() {
        return this.onBoardingLink;
    }
    reset() {
        return;
    }
    requiresGetKeyConfirmation(accountName) {
        if (!accountName) {
            return true;
        }
        const type = window.localStorage.getItem(universal_authenticator_library_1.UALLoggedInAuthType);
        const account = window.localStorage.getItem(universal_authenticator_library_1.UALAccountName);
        if (account === accountName && type === interfaces_1.Name) {
            return false;
        }
        return true;
    }
    getName() {
        return interfaces_1.Name;
    }
}
exports.Ledger = Ledger;
