import { Authenticator, ButtonStyle, Chain, UALError, User } from 'universal-authenticator-library';
export declare class Lynx extends Authenticator {
    private static API_LOADED_CHECK_TIMEOUT;
    private static LYNX_TIMEOUT;
    private users;
    private lynxIsLoading;
    private initError;
    private readonly supportedChains;
    /**
     * Lynx Constructor
     *
     * @param chains
     */
    constructor(chains: Chain[]);
    private isLynxReady;
    private supportsAllChains;
    private isLynxBrowser;
    /**
     * Lynx injects into the app from its internal browser, because of that we check on a
     * configured interval, allowing up to 5 seconds for Lynx to become available before
     * throwing an initialization error.
     */
    init(): Promise<void>;
    reset(): void;
    getStyle(): ButtonStyle;
    /**
     * Lynx is chain and environment specific, it will only load within the Lynx browser
     * provided all chains are supported.
     */
    shouldRender(): boolean;
    shouldAutoLogin(): boolean;
    /**
     * Requests the currently active account from Lynx, will throw a Login error if Lynx does
     * not respond or errors out
     */
    login(_?: string): Promise<User[]>;
    /**
     * Clears the array of authenticated users
     * Note: The name - logout - is slightly misleading in this particular case
     * as calling this method will not log a user out of the Lynx app but rather
     * refresh the user list on the authenticator
     */
    logout(): Promise<void>;
    shouldRequestAccountName(): Promise<boolean>;
    isLoading(): boolean;
    isErrored(): boolean;
    getError(): UALError | null;
    getOnboardingLink(): string;
    requiresGetKeyConfirmation(): boolean;
    getName(): string;
}
