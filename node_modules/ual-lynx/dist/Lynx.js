"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lynx = void 0;
const universal_authenticator_library_1 = require("universal-authenticator-library");
const interfaces_1 = require("./interfaces");
const lynxLogo_1 = require("./lynxLogo");
const LynxUser_1 = require("./LynxUser");
const UALLynxError_1 = require("./UALLynxError");
class Lynx extends universal_authenticator_library_1.Authenticator {
    /**
     * Lynx Constructor
     *
     * @param chains
     */
    constructor(chains) {
        super(chains);
        this.users = [];
        this.lynxIsLoading = true;
        this.initError = null;
        this.supportedChains = {
            // Lynx only supports mainnet
            aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906: {},
        };
    }
    isLynxReady() {
        return new Promise((resolve) => {
            Lynx.LYNX_TIMEOUT = setTimeout(() => {
                resolve(false);
            }, Lynx.API_LOADED_CHECK_TIMEOUT);
            if (!!window.lynxMobile) {
                clearTimeout(Lynx.LYNX_TIMEOUT);
                resolve(true);
            }
            window.addEventListener('lynxMobileLoaded', () => {
                clearTimeout(Lynx.LYNX_TIMEOUT);
                resolve(true);
            });
        });
    }
    supportsAllChains() {
        if (this.chains.length < 1) {
            return false;
        }
        for (const chain of this.chains) {
            if (!this.supportedChains.hasOwnProperty(chain.chainId)) {
                return false;
            }
        }
        return true;
    }
    isLynxBrowser() {
        return window.navigator.userAgent.toLowerCase().indexOf('eoslynx') !== -1;
    }
    /**
     * Lynx injects into the app from its internal browser, because of that we check on a
     * configured interval, allowing up to 5 seconds for Lynx to become available before
     * throwing an initialization error.
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.lynxIsLoading = true;
            try {
                const lynxReady = yield this.isLynxReady();
                if (!lynxReady) {
                    throw new Error('Unable to connect');
                }
            }
            catch (e) {
                this.initError = new UALLynxError_1.UALLynxError('Error occurred during autologin', universal_authenticator_library_1.UALErrorType.Initialization, e);
            }
            finally {
                this.lynxIsLoading = false;
            }
        });
    }
    reset() {
        this.initError = null;
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.init();
    }
    getStyle() {
        return {
            icon: lynxLogo_1.lynxLogo,
            text: interfaces_1.Name,
            textColor: 'white',
            background: '#21202D'
        };
    }
    /**
     * Lynx is chain and environment specific, it will only load within the Lynx browser
     * provided all chains are supported.
     */
    shouldRender() {
        if (this.isLynxBrowser() && this.supportsAllChains()) {
            return true;
        }
        return false;
    }
    shouldAutoLogin() {
        // Always autologin if should render, since that should only be inside the Lynx browser
        return this.shouldRender();
    }
    /**
     * Requests the currently active account from Lynx, will throw a Login error if Lynx does
     * not respond or errors out
     */
    login(_) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.users.length === 0) {
                try {
                    const account = yield window.lynxMobile.requestSetAccount();
                    this.users.push(new LynxUser_1.LynxUser(this.chains[0], account));
                }
                catch (e) {
                    throw new UALLynxError_1.UALLynxError('Unable to get the current account during login', universal_authenticator_library_1.UALErrorType.Login, e);
                }
            }
            return this.users;
        });
    }
    /**
     * Clears the array of authenticated users
     * Note: The name - logout - is slightly misleading in this particular case
     * as calling this method will not log a user out of the Lynx app but rather
     * refresh the user list on the authenticator
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            this.users = [];
        });
    }
    shouldRequestAccountName() {
        return __awaiter(this, void 0, void 0, function* () {
            return false;
        });
    }
    isLoading() {
        return this.lynxIsLoading;
    }
    isErrored() {
        return !!this.initError;
    }
    getError() {
        return this.initError;
    }
    getOnboardingLink() {
        return 'https://lynxwallet.io/';
    }
    requiresGetKeyConfirmation() {
        return false;
    }
    getName() {
        return interfaces_1.Name;
    }
}
exports.Lynx = Lynx;
// Forces timeout if Lynx object is not found on window in 5 seconds
Lynx.API_LOADED_CHECK_TIMEOUT = 5000;
// Reference for Lynx timeout function
Lynx.LYNX_TIMEOUT = null;
