{"version":3,"sources":["../../../src/components/authentication/UALAccountInput.js"],"names":["StyledInput","styled","input","UALAccountInput","props","e","submitAccountForLogin","authenticator","accountInput","state","which","keyCode","target","value","isValid","match","validator","length","setState","hoverStyle","buttonHover","buttonStyle","buttonEnabled","buttonDisabled","background","getStyle","inputWrapper","inputStyle","i18n","t","updateButtonWithInput","submitFromKeyboard","inputField","activateHoverSize","activateGenericSize","buttonText","RegExp","setTimeout","focus","loading","renderInput","Component","propTypes","PropTypes","object","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport i18n from '../../i18n'\n\nimport { UALLoadingIcon } from '../misc/UALLoadingIcon'\n\nimport { inputWrapper, inputStyle, buttonEnabled, buttonDisabled } from '../../styles/input'\nimport { buttonHover } from '../../styles/authenticator'\nimport { buttonText } from '../../styles/installation'\n\nexport const StyledInput = styled.input`\n  &::-webkit-input-placeholder {\n    color: rgba(255,255,255,0.5);\n  }\n`\n\n/**\n * Component for the account name input field.\n */\nexport class UALAccountInput extends Component {\n  static displayName = 'UALAccountInput'\n\n  constructor(props) {\n    super(props)\n    /**\n     * @memberof UALAccountInput\n     * @name state\n     * @prop {string} accountInput - currently entered account input\n     * @prop {Object} hoverStyle - additional button style on hover\n     */\n    this.state = {\n      accountInput: '',\n      hoverStyle: {},\n    }\n    /**\n     * @memberof UALAccountInput\n     * @name validator\n     * @type {RegExp}\n     * @desc used to validate account input against chain constraints\n     */\n    this.validator = new RegExp(/[a-z1-5]{1}[.a-z1-5]{0,11}/)\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.inputField.focus()\n    }, 300)\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   * @param {Event} e\n   */\n  submitFromKeyboard = (e) => {\n    const { submitAccountForLogin, authenticator } = this.props\n    const { accountInput } = this.state\n    return (e.which === 13 || e.keyCode === 13) && submitAccountForLogin(accountInput, authenticator)\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   * @param {Event} e\n   */\n  updateButtonWithInput = (e) => {\n    const accountInput = e.target.value\n    const isValid = accountInput.match(this.validator) && accountInput.match(this.validator)[0] === accountInput\n    if (isValid || !accountInput.length) {\n      this.setState({ accountInput })\n    }\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  activateGenericSize = () => {\n    this.setState({ hoverStyle: {} })\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  activateHoverSize = () => {\n    if (this.state.accountInput !== '') {\n      this.setState({ hoverStyle: buttonHover })\n    }\n  }\n\n  /**\n   * @method\n   * @return {ReactElement}\n   */\n  renderInput = () => {\n    const { accountInput, hoverStyle } = this.state\n    const { submitAccountForLogin, authenticator } = this.props\n    const buttonStyle = accountInput !== '' ? buttonEnabled : buttonDisabled\n    const background = authenticator.getStyle().background\n    return (\n      <div style={inputWrapper}>\n        <StyledInput\n          className='text-input'\n          style={inputStyle}\n          type='text'\n          placeholder={i18n.t('accountName')}\n          value={accountInput}\n          onChange={this.updateButtonWithInput}\n          onKeyPress={this.submitFromKeyboard}\n          ref={(input) => { this.inputField = input }}\n          autoCapitalize='none'\n        />\n        <div\n          role='button'\n          aria-label='Continue'\n          tabIndex='-1'\n          style={{ ...buttonStyle, background, ...hoverStyle }}\n          onMouseEnter={this.activateHoverSize}\n          onMouseLeave={this.activateGenericSize}\n          onClick={() => accountInput && submitAccountForLogin(accountInput, authenticator)}\n        >\n          <div style={buttonText}>{i18n.t('continue')}</div>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return !this.props.loading ? this.renderInput() : <UALLoadingIcon withContainer />\n  }\n}\n\n/**\n * @memberof UALAccountInput\n * @name props\n * @prop {Authenticator} authenticator - authenticator to enter account name for\n * @prop {function} submitAccountForLogin - attempts authentication using UAL context function\n * @prop {boolean} loading - loading state of authentication\n */\nUALAccountInput.propTypes = {\n  authenticator: PropTypes.object.isRequired,\n  submitAccountForLogin: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n}\n"],"file":"UALAccountInput.js"}