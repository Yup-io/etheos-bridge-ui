{"version":3,"sources":["../../../src/components/authentication/UALAuthButton.js"],"names":["UALAuthButton","props","instructions","button","state","boxTitles","ERROR","buttonState","UNAVAILABLE","setState","NORMAL","LOADING","startButtonStateChecker","authenticator","onErroredState","buttonStateChecker","setInterval","isLoading","isErrored","clearInterval","AVAILABLE","ERRORED","onAuthenticatorSelect","onRequestInstall","hoverStyle","buttonHover","errored","getStyle","checkButtonAvailability","checkButtonStatusOnRetry","icon","background","textColor","text","trueBackground","errorColors","LIGHT_GREY","trueTextColor","DARK_GREY","errorTooltip","getError","message","toolTip","length","attemptAuthentication","index","authButton","color","activateHoverSize","activateGenericSize","authIconWrapper","authIcon","authText","authTextFont","chevron","renderIcon","Component","propTypes","PropTypes","string","isRequired","func","object","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Tooltip from 'react-tooltip'\nimport { FaChevronRight, FaDownload } from 'react-icons/fa'\nimport { IoMdInformationCircleOutline } from 'react-icons/io'\n\nimport { UALLoadingIcon } from '../misc/UALLoadingIcon'\nimport { boxTitles } from '../../constants/box'\n\nimport {\n  authButton,\n  buttonHover,\n  authIcon,\n  authIconWrapper,\n  authText,\n  authTextFont,\n  chevron,\n  errored,\n} from '../../styles/authenticator'\n\nimport { buttonState, errorColors } from '../../constants/authentication'\n\n/**\n * Component that provides a button for logging in with a given Authenticator.\n */\nexport class UALAuthButton extends Component {\n  static displayName = 'UALAuthButton'\n\n  constructor(props) {\n    super(props)\n    let button = buttonState.UNAVAILABLE\n    if (props.instructions === boxTitles.NORMAL) {\n      button = buttonState.AVAILABLE\n      button = props.authenticator.isErrored() ? buttonState.ERRORED : button\n      button = props.authenticator.isLoading() ? buttonState.LOADING : button\n    }\n    /**\n     * @memberof UALAuthButton\n     * @name state\n     * @prop {string} icon - icon associated with authenticator\n     * @prop {string} background - hexidecimal button background color\n     * @prop {string} textColor - hexidecimal button text color\n     * @prop {string} text - button text\n     * @prop {string} button - button status\n     * @prop {Object} hoverStyle - additional button style on hover\n     */\n    this.state = {\n      ...props.authenticator.getStyle(),\n      button,\n    }\n    /**\n     * @memberof UALAuthButton\n     * @name buttonStateChecker\n     * @type {null|function}\n     * @desc interval for checking button status during initialization\n     */\n    this.buttonStateChecker = null\n  }\n\n  componentDidMount() {\n    const { onErroredState } = this.props\n    const { button } = this.state\n    if (button === buttonState.LOADING) {\n      this.startButtonStateChecker()\n    }\n    if (button === buttonState.ERRORED) {\n      onErroredState()\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkButtonAvailability()\n    this.checkButtonStatusOnRetry()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.buttonStateChecker)\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  checkButtonAvailability = () => {\n    const { instructions } = this.props\n    const { button } = this.state\n    if (instructions === boxTitles.ERROR && button !== buttonState.UNAVAILABLE) {\n      this.setState({ button: buttonState.UNAVAILABLE })\n    }\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  checkButtonStatusOnRetry = () => {\n    const { instructions } = this.props\n    const { button } = this.state\n    if (instructions === boxTitles.NORMAL && button === buttonState.UNAVAILABLE) {\n      this.setState({ button: buttonState.LOADING }, this.startButtonStateChecker)\n    }\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  startButtonStateChecker = () => {\n    const { authenticator, onErroredState } = this.props\n    this.buttonStateChecker = setInterval(() => {\n      if (!authenticator.isLoading() && !authenticator.isErrored()) {\n        clearInterval(this.buttonStateChecker)\n        this.setState({ button: buttonState.AVAILABLE })\n      } else if (authenticator.isErrored()) {\n        clearInterval(this.buttonStateChecker)\n        this.setState({ button: buttonState.ERRORED }, onErroredState())\n      }\n    }, 250)\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  attemptAuthentication = () => {\n    const { button } = this.state\n    const { onAuthenticatorSelect, authenticator, onRequestInstall } = this.props\n    if (button === buttonState.AVAILABLE) {\n      onAuthenticatorSelect(authenticator)\n    }\n    if (button === buttonState.UNAVAILABLE) {\n      onRequestInstall(authenticator)\n    }\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  activateGenericSize = () => {\n    const { button } = this.state\n    if (button === buttonState.AVAILABLE || button === buttonState.UNAVAILABLE) {\n      this.setState({ hoverStyle: {} })\n    }\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   */\n  activateHoverSize = () => {\n    const { button } = this.state\n    if (button === buttonState.AVAILABLE || button === buttonState.UNAVAILABLE) {\n      this.setState({ hoverStyle: buttonHover })\n    }\n  }\n\n  /**\n   * @method\n   * @return {ReactElement}\n   */\n  renderIcon = () => {\n    const { button } = this.state\n    switch (button) {\n    case buttonState.LOADING:\n      return <UALLoadingIcon />\n    case buttonState.ERRORED:\n      return <IoMdInformationCircleOutline style={errored} />\n    case buttonState.UNAVAILABLE:\n      return <FaDownload />\n    default:\n      return <FaChevronRight />\n    }\n  }\n\n  render() {\n    const { icon, background, textColor, text, hoverStyle, button } = this.state\n    const { authenticator } = this.props\n    const trueBackground = button === buttonState.ERRORED ? errorColors.LIGHT_GREY\n      : background\n    const trueTextColor = button === buttonState.ERRORED ? errorColors.DARK_GREY\n      : textColor\n    const errorTooltip = authenticator.getError() ? authenticator.getError().message : ''\n    const toolTip = errorTooltip.length > 0 && button !== buttonState.UNAVAILABLE && <Tooltip />\n    return (\n      <div\n        onClick={this.attemptAuthentication}\n        role='button'\n        aria-label={text}\n        tabIndex={this.props.index}\n        style={{ ...authButton, background: trueBackground, ...hoverStyle, color: trueTextColor }}\n        onMouseEnter={this.activateHoverSize}\n        onMouseLeave={this.activateGenericSize}\n        data-tip={errorTooltip}\n        data-effect='solid'\n      >\n        {toolTip}\n        <div style={authIconWrapper}><img style={authIcon} src={icon} alt='' /></div>\n        <div style={authText}>\n          <span style={authTextFont}>{text}</span>\n          <span style={chevron}>{ this.renderIcon() }</span>\n        </div>\n      </div>\n    )\n  }\n}\n\n/**\n * @memberof UALAuthButton\n * @name props\n * @prop {string} instructions - current instructions on UAL modal\n * @prop {function} onAuthenticatorSelect - triggered when authenticator button is clicked\n * @prop {function} onRequestInstall - triggered when authenticator install button is clicked\n * @prop {function} onErroredState - triggered when authenticator initialization ends in error\n * @prop {Authenticator} authenticator - reference to current authenticator instance\n * @prop {number} index - authenticator's index in list\n */\nUALAuthButton.propTypes = {\n  instructions: PropTypes.string.isRequired,\n  onAuthenticatorSelect: PropTypes.func.isRequired,\n  onRequestInstall: PropTypes.func.isRequired,\n  onErroredState: PropTypes.func.isRequired,\n  authenticator: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n}\n"],"file":"UALAuthButton.js"}