{"version":3,"sources":["../../../src/components/modal/UALBox.js"],"names":["UALBoxBase","props","authenticator","authenticateWithoutAccountInput","ual","shouldRequestAccountName","needsAccountName","authenticateWithAccountInput","availableAuthenticators","nonErroredAuthenticators","filter","auth","isErrored","length","setState","instructions","boxTitles","ERROR","secondaryInstructions","installGuide","loginState","containerEnter","showAccountInput","showInstallScreen","i18n","t","containerExit","transitionForward","transitionToReset","authName","getStyle","text","installState","state","NORMAL","previousSelectState","restart","defaultBoxState","nextState","transitionToComplete","setTimeout","resetContainer","activeUser","modal","hideModal","app","background","UALBoxParts","boxBackground","box","exitButton","titleWrapper","boxTitle","refreshBox","mainContent","authenticate","checkAuthenticators","enterInstallScreen","errorMessage","backButton","goBackToAuthSelect","learnMore","mediaQuery","Component","UALBox","displayName","propTypes","PropTypes","shape","chains","arrayOf","object","isRequired","authenticators","loading","bool","message","string","broadcastStatus","func","appName","logout","error","submitAccountForLogin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport i18n from '../../i18n'\n\nimport { UALContainer } from './UALContainer'\nimport { withUAL } from '../provider/withUAL'\nimport { UALBoxParts } from './UALBoxParts'\n\nimport { box } from '../../styles/box'\nimport { titleWrapper } from '../../styles/title'\nimport { mediaQuery } from '../../styles/mediaQuery'\n\nimport { boxTitles, installGuide, defaultBoxState } from '../../constants/box'\n\n/**\n * Component for rendering the box containing the AuthButtons, account input, and handling\n * basic preparatory authentication logic\n */\nclass UALBoxBase extends Component {\n  static displayName = 'UALBoxBase'\n\n  constructor(props) {\n    super(props)\n    this.state = defaultBoxState\n  }\n\n  componentDidMount() {\n    const { ual: { activeUser, modal, hideModal } } = this.props\n    if (activeUser && modal) {\n      hideModal()\n    } else {\n      setTimeout(() => this.setState({ containerEnter: true }), 300)\n    }\n  }\n\n  componentDidUpdate() {\n    const { ual: { activeUser, modal, hideModal } } = this.props\n    if (activeUser && modal) {\n      hideModal()\n    }\n  }\n\n  /**\n   * Attempts authentication\n   *\n   * @method\n   * @return {Void}\n   * @param {Authenticator} authenticator\n   */\n  authenticate = async (authenticator) => {\n    const { ual: { authenticateWithoutAccountInput } } = this.props\n    const needsAccountName = await authenticator.shouldRequestAccountName()\n    if (needsAccountName) {\n      this.authenticateWithAccountInput(authenticator)\n    } else {\n      authenticateWithoutAccountInput(authenticator)\n    }\n  }\n\n  /**\n   * Checks if all available authenticators have errored\n   *\n   * @method\n   * @return {Void}\n   */\n  checkAuthenticators = () => {\n    const { availableAuthenticators } = this.props.ual\n    const nonErroredAuthenticators = availableAuthenticators.filter(auth => !auth.isErrored())\n    if (!nonErroredAuthenticators.length) {\n      this.setState({\n        instructions: boxTitles.ERROR,\n        secondaryInstructions: installGuide,\n      })\n    }\n  }\n\n  /**\n   * Transitions to authenticator's account input screen\n   *\n   * @method\n   * @return {Void}\n   * @param {Authenticator} authenticator\n   */\n  authenticateWithAccountInput = (authenticator) => {\n    const loginState = {\n      containerEnter: true,\n      showAccountInput: true,\n      showInstallScreen: false,\n      instructions: i18n.t('enterUsername'),\n      secondaryInstructions: '',\n    }\n    this.setState({\n      authenticator,\n      containerExit: true,\n      containerEnter: false,\n      transitionForward: true,\n    },\n    this.transitionToReset(loginState))\n  }\n\n  /**\n   * Transitions to authenticator's install screen\n   *\n   * @method\n   * @return {Void}\n   * @param {Authenticator} authenticator\n   */\n  enterInstallScreen = (authenticator) => {\n    const authName = authenticator.getStyle().text\n    const secondaryInstructions = i18n.t('getStarted', { authName })\n    const installState = {\n      containerEnter: true,\n      showInstallScreen: true,\n      showAccountInput: false,\n      instructions: i18n.t('welcomeAccount', { authName }),\n      secondaryInstructions,\n    }\n    this.setState({\n      authenticator,\n      containerExit: true,\n      containerEnter: false,\n      transitionForward: true,\n    },\n    this.transitionToReset(installState))\n  }\n\n  /**\n   * Returns to authenticator select screen\n   *\n   * @method\n   * @return {Void}\n   */\n  goBackToAuthSelect = () => {\n    const { showInstallScreen } = this.state\n    const instructions = showInstallScreen ? boxTitles.ERROR : boxTitles.NORMAL\n    const secondaryInstructions = showInstallScreen ? installGuide : ''\n    const previousSelectState = {\n      containerEnter: true,\n      showAccountInput: false,\n      showInstallScreen: false,\n      instructions,\n      secondaryInstructions,\n    }\n    this.setState({\n      containerExit: true,\n      containerEnter: false,\n      transitionForward: false,\n    },\n    this.transitionToReset(previousSelectState))\n  }\n\n  /**\n   * Attempts authentication\n   *\n   * @method\n   * @return {Void}\n   * @param {Authenticator} authenticator\n   */\n  refreshBox = () => {\n    const { restart } = this.props.ual\n    this.setState({ ...defaultBoxState, containerEnter: true }, restart)\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   * @param {Object} nextState\n   */\n  resetContainer = (nextState) => {\n    this.setState({ containerExit: false, containerEnter: false }, this.transitionToComplete(nextState))\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   * @param {Object} nextState\n   */\n  transitionToReset = (nextState) => {\n    setTimeout(() => { this.resetContainer(nextState) }, 300)\n  }\n\n  /**\n   * @method\n   * @return {Void}\n   * @param {Object} nextState\n   */\n  transitionToComplete = (nextState) => {\n    setTimeout(() => { this.setState(nextState) }, 50)\n  }\n\n  render() {\n    const {\n      containerEnter,\n      containerExit,\n      transitionForward,\n      ...state\n    } = this.state\n    const { ual } = this.props\n    const app = { ...state, ...ual }\n    const background = UALBoxParts.boxBackground(app)\n    return (\n      <div id='ual-box' style={{ ...box, ...background }}>\n        {UALBoxParts.exitButton(app)}\n        <div style={titleWrapper}>\n          {UALBoxParts.boxTitle(app)}\n        </div>\n        <UALContainer enter={containerEnter} exit={containerExit} transitionForward={transitionForward}>\n          {UALBoxParts.secondaryInstructions(app, this.refreshBox)}\n          {UALBoxParts.mainContent(app, this.authenticate, this.checkAuthenticators, this.enterInstallScreen)}\n          {UALBoxParts.errorMessage(ual)}\n          {UALBoxParts.backButton(app, this.goBackToAuthSelect)}\n          {UALBoxParts.learnMore(app)}\n        </UALContainer>\n        <style>{ mediaQuery }</style>\n      </div>\n    )\n  }\n}\n\nexport const UALBox = withUAL(UALBoxBase)\n\nUALBox.displayName = 'UALBox'\n\n/**\n * @typeDef ual\n * @desc the ual context that UALBox consumes\n * @prop {Chain[]} chains - chain list from props\n * @prop {Authenticator[]} authenticators - authenticator instances from props\n * @prop {Authenticator[]} availableAuthenticators - available authenticator list\n * @prop {boolean} loading - loading state of UAL\n * @prop {User} activeUser - logged in user\n * @prop {string} message - message, if any, accompanying current UAL state\n * @prop {function} broadcastStatus - dispatches a provider state update\n * @prop {function} hideModal - hides the modal\n * @prop {boolean} modal - whether or not show modal, initialized via props\n * @prop {string} appName - name of app\n * @prop {function} logout - logs user out of authenticator and resets UAL state\n * @prop {function} restart - resets all available authenticators and resets UAL state\n * @prop {UALError|null} error - captured error if any\n * @prop {function} authenticateWithoutAccountInput - attempts authentication with an authenticator not requiring account input\n * @prop {function} submitAccountForLogin - attempts authentication\n */\n/**\n * @memberof UALBoxBase\n * @name props\n * @prop {ual} ual\n */\nUALBoxBase.propTypes = {\n  ual: PropTypes.shape({\n    chains: PropTypes.arrayOf(PropTypes.object).isRequired,\n    authenticators: PropTypes.arrayOf(PropTypes.object).isRequired,\n    availableAuthenticators: PropTypes.arrayOf(PropTypes.object).isRequired,\n    loading: PropTypes.bool.isRequired,\n    activeUser: PropTypes.object,\n    message: PropTypes.string.isRequired,\n    broadcastStatus: PropTypes.func.isRequired,\n    hideModal: PropTypes.func.isRequired,\n    modal: PropTypes.bool.isRequired,\n    appName: PropTypes.string.isRequired,\n    logout: PropTypes.func.isRequired,\n    restart: PropTypes.func.isRequired,\n    error: PropTypes.object,\n    authenticateWithoutAccountInput: PropTypes.func.isRequired,\n    submitAccountForLogin: PropTypes.func.isRequired,\n  }).isRequired,\n}\n"],"file":"UALBox.js"}