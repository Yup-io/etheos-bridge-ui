{"version":3,"sources":["../../../src/components/provider/UALProvider.js"],"names":["UALProvider","props","type","availableAuthenticators","loggedIn","filter","auth","getName","length","clearCache","invalidate","Date","undefined","authenticator","invalidateSeconds","shouldInvalidateAfter","invalidateAt","setSeconds","getSeconds","window","localStorage","setItem","autoLoginAuthenticator","authenticateWithoutAccountInput","state","setState","availableCheck","setInterval","isLoading","clearInterval","message","i18n","t","removeItem","logout","e","console","warn","chains","authenticators","appName","modal","loading","users","activeAuthenticator","activeUser","isAutoLogin","error","hideModal","showModal","DEFAULT_STATUS","fullLogout","restart","forEach","reset","broadcastStatus","status","authenticatorName","getStyle","text","login","getAccountName","accountName","setUALInvalidateAt","submitAccountForLogin","accountInput","requiresGetKeyConfirmation","getItem","checkForInvalidatedSession","ual","UAL","getAuthenticators","getAuthenticatorInstance","Error","msg","source","errType","UALErrorType","Login","UALError","fetchAuthenticators","modalStyles","baseFont","children","Component","propTypes","PropTypes","arrayOf","object","isRequired","oneOfType","node","string","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport i18n from '../../i18n'\nimport '../../types'\nimport { UAL, UALError, UALErrorType } from 'universal-authenticator-library'\n\nimport { UALContext } from './UALContext'\nimport { DEFAULT_STATUS } from '../../constants/provider'\nimport { UALBox } from '../modal/UALBox'\n\nimport { modalStyles } from '../../styles/provider'\nimport { baseFont } from '../../styles/base'\n\n/**\n * Wrapper component that provides a child app with access to UAL functionality\n */\nexport class UALProvider extends Component {\n  static displayName = 'UALProvider'\n\n  constructor(props) {\n    super(props)\n    /**\n     * @namespace UAL\n     */\n    this.state = {\n      /**\n       * @memberof UAL\n       * @desc chain list from props\n       * @type {Chain[]} chains\n       */\n      chains: props.chains,\n      /**\n       * @memberof UAL\n       * @desc authenticator instances from props\n       * @type {Authenticator[]} authenticators\n       */\n      authenticators: props.authenticators,\n      /**\n       * @memberof UAL\n       * @desc available authenticator list\n       * @type {Authenticator[]} availableAuthenticators\n       */\n      availableAuthenticators: [],\n      /**\n       * @memberof UAL\n       * @desc name of app\n       * @type {string} appName\n       */\n      appName: props.appName,\n      /**\n       * @memberof UAL\n       * @desc whether or not show modal, initialized via props\n       * @type {boolean} modal\n       */\n      modal: props.modal,\n      /**\n       * @memberof UAL\n       * @desc loading state of UAL\n       * @type {boolean} loading\n       */\n      loading: false,\n      /**\n       * @memberof UAL\n       * @desc list of authenticated users\n       * @type {User[]} users\n       */\n      users: [],\n      /**\n       * @memberof UAL\n       * @desc authenticator currently used\n       * @type {Authenticator} activeAuthenticator\n       */\n      activeAuthenticator: null,\n      /**\n       * @memberof UAL\n       * @desc logged in user\n       * @type {User} activeUser\n       */\n      activeUser: null,\n      /**\n       * @memberof UAL\n       * @desc whether or not activeAuthenticator should auto login\n       * @type {boolean} isAutoLogin\n       */\n      isAutoLogin: false,\n      /**\n       * @memberof UAL\n       * @desc captured error if any\n       * @type {UALError|null} error\n       */\n      error: null,\n      /**\n       * @memberof UAL\n       * @desc message, if any, accompanying current UAL state\n       * @type {string} message\n       */\n      message: '',\n      /**\n       * @memberof UAL\n       * @function\n       * @name hideModal\n       * @desc hides the modal\n       * @return {Void}\n       */\n      hideModal: () => this.setState({ modal: false, loading: true, message: i18n.t('loadingAuthenticators') }),\n      /**\n       * @memberof UAL\n       * @function\n       * @name showModal\n       * @desc shows the modal\n       * @return {Void}\n       */\n      showModal: () => {\n        this.setState({ modal: true })\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name logout\n       * @desc logs user out of authenticator and resets UAL state\n       * @return {Void}\n       */\n      logout: () => {\n        const { activeAuthenticator } = this.state\n        this.setState(DEFAULT_STATUS, () => activeAuthenticator && this.fullLogout(activeAuthenticator))\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name restart\n       * @desc resets all available authenticators and resets UAL state\n       * @return {Void}\n       */\n      restart: () => {\n        this.setState({ DEFAULT_STATUS }, () => {\n          const { availableAuthenticators } = this.state\n          availableAuthenticators.forEach(auth => auth.reset())\n          this.setState(availableAuthenticators)\n        })\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name broadcastStatus\n       * @desc dispatches a provider state update\n       * @return {Void}\n       */\n      broadcastStatus: (status = DEFAULT_STATUS) => this.setState(status),\n      /**\n       * @memberof UAL\n       * @function\n       * @name authenticateWithoutAccountInput\n       * @desc attempts authentication with an authenticator not requiring account input\n       * @return {Void}\n       * @param {Authenticator} authenticator\n       * @param {boolean} [false] isAutoLogin\n       */\n      authenticateWithoutAccountInput: async (authenticator, isAutoLogin = false) => {\n        const { broadcastStatus } = this.state\n        broadcastStatus({\n          loading: true,\n          message: i18n.t('continueWithAuthenticator', { authenticatorName: authenticator.getStyle().text }),\n          activeAuthenticator: authenticator,\n        })\n        try {\n          const users = await authenticator.login()\n          const accountName = await users[0].getAccountName()\n          if (!isAutoLogin) {\n            window.localStorage.setItem('UALLoggedInAuthType', authenticator.getName())\n            this.setUALInvalidateAt(authenticator)\n          }\n          broadcastStatus({\n            activeUser: users[users.length - 1],\n            users,\n            isAutoLogin,\n            message: i18n.t('currentlyLoggedInAs', { accountName }),\n          })\n        } catch (err) {\n          broadcastStatus({\n            loading: false,\n            error: err,\n            message: err.message,\n          })\n        }\n      },\n      /**\n       * @memberof UAL\n       * @function\n       * @name submitAccountForLogin\n       * @desc attempts authentication\n       * @return {Void}\n       * @param {string} accountInput\n       * @param {Authenticator} authenticator\n       */\n      submitAccountForLogin: async (accountInput, authenticator) => {\n        const { broadcastStatus } = this.state\n        broadcastStatus({\n          loading: true,\n          message: authenticator.requiresGetKeyConfirmation()\n            ? i18n.t('waitWhileFindAccountWithConfirmation')\n            : i18n.t('waitWhileFindAccount'),\n        })\n        try {\n          const users = await authenticator.login(accountInput)\n          window.localStorage.setItem('UALLoggedInAuthType', authenticator.getName())\n          window.localStorage.setItem('UALAccountName', accountInput)\n          broadcastStatus({\n            activeUser: users[users.length - 1],\n            activeAuthenticator: authenticator,\n            users,\n            message: i18n.t('currentlyLoggedInAs', { accountName: accountInput }),\n          })\n          this.setUALInvalidateAt(authenticator)\n        } catch (err) {\n          broadcastStatus({\n            error: err,\n            message: err.message,\n            loading: false,\n          })\n        }\n      },\n    }\n  }\n\n  componentDidMount() {\n    const { chains, appName, authenticators, authenticateWithoutAccountInput, submitAccountForLogin } = this.state\n    let type = window.localStorage.getItem('UALLoggedInAuthType')\n    const invalidate = window.localStorage.getItem('UALInvalidateAt')\n    const accountName = window.localStorage.getItem('UALAccountName')\n    type = this.checkForInvalidatedSession(type, invalidate)\n    const ual = new UAL(chains, appName, authenticators)\n    const { availableAuthenticators, autoLoginAuthenticator } = ual.getAuthenticators()\n    try {\n      if (type) {\n        const authenticator = this.getAuthenticatorInstance(type, availableAuthenticators)\n        if (!authenticator) {\n          throw new Error('authenticator instance not found')\n        }\n        const availableCheck = setInterval(() => {\n          if (!authenticator.isLoading()) {\n            clearInterval(availableCheck)\n            // Only Ledger requires an account name\n            if (accountName) {\n              submitAccountForLogin(accountName, authenticator)\n            } else {\n              authenticateWithoutAccountInput(authenticator)\n            }\n          }\n        }, 250)\n      }\n    } catch (e) {\n      this.clearCache()\n      const msg = i18n.t('sessionEndedNeedLogin')\n      const source = type || 'Universal Authenticator Library'\n      const errType = UALErrorType.Login\n      console.warn(new UALError(msg, errType, e, source))\n    } finally {\n      this.fetchAuthenticators(availableAuthenticators, autoLoginAuthenticator)\n    }\n  }\n\n  componentDidUpdate() {\n    const { loading, message, availableAuthenticators, broadcastStatus } = this.state\n    if (loading && message === i18n.t('loadingAuthenticators') && availableAuthenticators.length) {\n      broadcastStatus({ message: i18n.t('authenticatorsLoaded'), loading: false })\n    }\n  }\n\n  /**\n   * Verifies a logged in user's authenticator is still app supported\n   *\n   * @method\n   * @param {string} type - authenticator type of sessioned user\n   * @param {Object[]} availableAuthenticators - list of available app supported authenticators\n   * @return {number|boolean}\n   */\n  getAuthenticatorInstance = (type, availableAuthenticators) => {\n    const loggedIn = availableAuthenticators.filter(auth => auth.getName() === type)\n    if (!loggedIn.length) {\n      this.clearCache()\n    }\n    return loggedIn.length ? loggedIn[0] : false\n  }\n\n  /**\n   * Checks if the saved browser session has passed the UALInvalidateAt date and clear the cache if true\n   *\n   * @method\n   * @param {string} type - UALLoggedInAuthType value\n   * @param {string} invalidate - UALInvalidateAt value in string formatted date\n   * @return {string|undefined} - UALLoggedInAuthType value or undefined if no longer valid\n   */\n  checkForInvalidatedSession = (type, invalidate) => {\n    if (type && invalidate && new Date(invalidate) <= new Date()) {\n      this.clearCache()\n      return undefined\n    }\n    return type\n  }\n\n  /**\n   * Sets UALInvalidateAt value to local storage depending on amount of seconds set in authenticator\n   *\n   * @method\n   * @param {Authenticator} authenticator - should-invalidate-after authenticator\n   * @return {Void}\n   */\n  setUALInvalidateAt = (authenticator) => {\n    const invalidateSeconds = authenticator.shouldInvalidateAfter()\n    const invalidateAt = new Date()\n    invalidateAt.setSeconds(invalidateAt.getSeconds() + invalidateSeconds)\n    window.localStorage.setItem('UALInvalidateAt', invalidateAt)\n  }\n\n  /**\n   * Renders available authenticators or starts auto-login process if applicable\n   *\n   * @method\n   * @param {Authenticator[]} availableAuthenticators - list of available app supported authenticators\n   * @param {Authenticator} autoLoginAuthenticator - auto-login authenticator\n   * @return {Void}\n   */\n  fetchAuthenticators = (availableAuthenticators, autoLoginAuthenticator) => {\n    const { authenticateWithoutAccountInput } = this.state\n    if (autoLoginAuthenticator) {\n      this.setState({ availableAuthenticators: [autoLoginAuthenticator] }, () => {\n        const availableCheck = setInterval(() => {\n          if (!autoLoginAuthenticator.isLoading()) {\n            clearInterval(availableCheck)\n            authenticateWithoutAccountInput(autoLoginAuthenticator, true)\n          }\n        }, 250)\n      })\n    } else {\n      this.setState({ availableAuthenticators }, () => {\n        this.setState({ message: i18n.t('authenticatorsLoaded') })\n      })\n    }\n  }\n\n  /**\n   * Clears locally stored user session\n   *\n   * @method\n   * @return {Void}\n   */\n  clearCache = () => {\n    window.localStorage.removeItem('UALLoggedInAuthType')\n    window.localStorage.removeItem('UALAccountName')\n    window.localStorage.removeItem('UALInvalidateAt')\n  }\n\n  /**\n   * Clears localStorage and logs out user\n   *\n   * @method\n   * @param {Authenticator} authenticator - used authenticator\n   * @return {Void}\n   */\n  fullLogout = (authenticator) => {\n    this.clearCache()\n    authenticator.logout()\n      .catch(e => console.warn(e))\n  }\n\n  render() {\n    const modal = this.state.modal && <div style={modalStyles}><UALBox /></div>\n    return (\n      <UALContext.Provider value={this.state}>\n        <style>{baseFont}</style>\n        { modal }\n        { this.props.children }\n      </UALContext.Provider>\n    )\n  }\n}\n\n/**\n * @memberof UALProvider\n * @name props\n * @prop {Chain[]} chains - list of chains the app supports\n * @prop {Authenticator[]} authenticators - list of authenticators the app supports\n * @prop {Node[]|Node} children - child app(s)\n * @prop {string} appName - name of app\n * @prop {boolean} modal - whether or not to show modal\n */\nUALProvider.propTypes = {\n\n  chains: PropTypes.arrayOf(PropTypes.object).isRequired,\n  authenticators: PropTypes.arrayOf(PropTypes.object).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  appName: PropTypes.string.isRequired,\n  modal: PropTypes.bool,\n}\n\nUALProvider.defaultProps = {\n  modal: false,\n}\n"],"file":"UALProvider.js"}