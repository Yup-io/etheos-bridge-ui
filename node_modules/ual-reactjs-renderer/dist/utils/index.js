"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.darkenColor = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
 * Code inspired by Chris Coyier's vanilla css lighten/darken color solution
 * https://css-tricks.com/snippets/javascript/lighten-darken-color/
 */
var hexToRGB = function hexToRGB(color) {
  var num = parseInt(color.replace('#', ''), 16);
  var r = (num >> 16) - 30; // eslint-disable-line

  var b = (num >> 8 & 0x00FF) - 30; // eslint-disable-line

  var g = (num & 0x0000FF) - 30; // eslint-disable-line

  return [r, b, g];
};

var limitValues = function limitValues(value) {
  if (value > 255) return 255;
  if (value < 0) return 0;
  return value;
};

var darkenColor = function darkenColor(color) {
  var colors;

  if (!color) {
    return '#1A3270';
  }

  if (color.indexOf('rgb') !== -1) {
    colors = color.replace('rgb(', '').replace(')', '').split(',').map(function (num) {
      return parseInt(num, 10) - 30;
    }).map(limitValues);
  } else {
    colors = hexToRGB(color).map(limitValues);
  }

  var _colors = colors,
      _colors2 = _slicedToArray(_colors, 3),
      r = _colors2[0],
      g = _colors2[1],
      b = _colors2[2];

  return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
};

exports.darkenColor = darkenColor;
//# sourceMappingURL=index.js.map