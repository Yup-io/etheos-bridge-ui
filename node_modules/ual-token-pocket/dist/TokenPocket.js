"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenPocket = void 0;
const tp_eosjs_1 = __importDefault(require("tp-eosjs"));
const universal_authenticator_library_1 = require("universal-authenticator-library");
const interfaces_1 = require("./interfaces");
const tokenPocketLogo_1 = require("./tokenPocketLogo");
const TokenPocketUser_1 = require("./TokenPocketUser");
const UALTokenPocketError_1 = require("./UALTokenPocketError");
class TokenPocket extends universal_authenticator_library_1.Authenticator {
    /**
     * TokenPocket Constructor.
     *
     * @param chains
     */
    constructor(chains) {
        super(chains);
        this.users = [];
        this.tokenPocketIsLoading = true;
        this.initError = null;
        this.supportedChains = {
            // Token Pocket only supports mainnet
            aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906: {},
        };
    }
    isTokenPocketReady() {
        return tp_eosjs_1.default.isConnected();
    }
    supportsAllChains() {
        if (this.chains.length < 1) {
            return false;
        }
        for (const chain of this.chains) {
            if (!this.supportedChains.hasOwnProperty(chain.chainId)) {
                return false;
            }
        }
        return true;
    }
    /**
     * TokenPocket injects into the app from its internal browser, because of that we check on a
     * configured interval, allowing up to 5 seconds for TokenPocket to become available before
     * throwing an initialization error.
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.tokenPocketIsLoading = true;
            try {
                if (!this.isTokenPocketReady()) {
                    throw new Error('Unable to connect');
                }
            }
            catch (e) {
                this.initError = new UALTokenPocketError_1.UALTokenPocketError('Error occurred during autologin', universal_authenticator_library_1.UALErrorType.Initialization, e);
            }
            finally {
                this.tokenPocketIsLoading = false;
            }
        });
    }
    reset() {
        this.initError = null;
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.init();
    }
    getStyle() {
        return {
            icon: tokenPocketLogo_1.tokenPocketLogo,
            text: interfaces_1.Name,
            textColor: 'white',
            background: '#347CEE'
        };
    }
    /**
     * The TokenPocket authenticator is chain and environment specific, it will only load
     * within the Token Pocket browser provided all chains are supported.
     */
    shouldRender() {
        if (this.supportsAllChains() && this.isTokenPocketReady()) {
            return true;
        }
        return false;
    }
    shouldAutoLogin() {
        // Always autologin if should render, since that should only be inside the Token Pocket browser
        return this.shouldRender();
    }
    /**
     * Requests the currently active account from Token Pocket, will throw a Login error if Token Pocket
     * does not respond or errors out
     */
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.users.length === 0) {
                try {
                    const response = yield tp_eosjs_1.default.getCurrentWallet();
                    if (response.result) {
                        this.users.push(new TokenPocketUser_1.TokenPocketUser(this.chains[0], response.data));
                    }
                    else {
                        throw new Error('No result returned');
                    }
                }
                catch (e) {
                    throw new UALTokenPocketError_1.UALTokenPocketError('Unable to get the current account during login', universal_authenticator_library_1.UALErrorType.Login, e);
                }
            }
            return this.users;
        });
    }
    /**
     * Clears the array of authenticated users
     * Note: The name - logout - is slightly misleading in this particular case
     * as calling this method will not log a user out of the Token Pocket app but rather
     * refresh the user list on the authenticator
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            this.users = [];
        });
    }
    shouldRequestAccountName() {
        return __awaiter(this, void 0, void 0, function* () {
            return false;
        });
    }
    isLoading() {
        return this.tokenPocketIsLoading;
    }
    isErrored() {
        return !!this.initError;
    }
    getError() {
        return this.initError;
    }
    getOnboardingLink() {
        return 'https://www.mytokenpocket.vip/en/';
    }
    requiresGetKeyConfirmation() {
        return false;
    }
    getName() {
        return interfaces_1.Name;
    }
}
exports.TokenPocket = TokenPocket;
